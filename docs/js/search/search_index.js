var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.088,1,0.611]],["body/interfaces/Coordinates.html",[0,0.158,1,0.976,2,0.393,3,0.301,4,0.258,5,0.258,6,0.218,7,0.329,8,0.498,9,0.258,10,0.827,11,1.317,12,1.317,13,1.07,14,0.508,15,0.043,16,0.512,17,0.268,18,0.513,19,0.513,20,0.513,21,0.76,22,0.865,23,0.76,24,0.584,25,0.827,26,0.513,27,0.827,28,0.556,29,0.827,30,0.827,31,0.513,32,0.218,33,1.095,34,0.659,35,0.883,36,0.987,37,0.827,38,0.987,39,0.345,40,0.584,41,0.556,42,0.556,43,0.556,44,0.556,45,0.393,46,1.168,47,0.697,48,0.827,49,0.556,50,0.393,51,0.556,52,0.697,53,0.393,54,1.095,55,0.556,56,1.093,57,0.498,58,0.74,59,0.384,60,0.508,61,0.345,62,0.393,63,0.393,64,0.393,65,0.76,66,0.883,67,0.767,68,0.659,69,0.498,70,1.093,71,0.498,72,1.093,73,0.498,74,0.498,75,1.093,76,0.74,77,1.258,78,0.787,79,0.393,80,0.74,81,0.881,82,0.881,83,0.669,84,1.224,85,1.302,86,0.883,87,0.827,88,0.827,89,0.498,90,0.689,91,1.168,92,0.301,93,0.443,94,0.325,95,0.443,96,0.393,97,0.556,98,0.498,99,0.556,100,0.301,101,0.584,102,0.74,103,0.827,104,0.809,105,0.498,106,0.556,107,0.498,108,0.498,109,0.74,110,0.978,111,0.556,112,0.459,113,0.883,114,0.74,115,0.498,116,0.556,117,0.679,118,0.345,119,0.393,120,0.513,121,0.584,122,0.685,123,0.883,124,0.345,125,0.556,126,0.345,127,0.498,128,0.725,129,0.498,130,0.556,131,0.513,132,0.345,133,0.556,134,0.443,135,1.224,136,0.498,137,0.443,138,0.498,139,0.556,140,0.498,141,0.556,142,0.556,143,0.556,144,0.498,145,0.556,146,0.556,147,0.556,148,0.659,149,0.498,150,0.498,151,0.498,152,0.556,153,0.556,154,0.556,155,0.74,156,0.74,157,0.498,158,0.556,159,0.443,160,0.498,161,0.556,162,0.883,163,1.268,164,1.134,165,0.827,166,0.827,167,0.556,168,0.556,169,0.498,170,0.76,171,0.74,172,0.613,173,0.498,174,0.556,175,0.556,176,0.498,177,0.864,178,0.393,179,0.498,180,0.498,181,0.556,182,0.556,183,0.498,184,0.443,185,0.498,186,0.498,187,0.498,188,1.134,189,0.556,190,0.987,191,0.556,192,1.068,193,0.556,194,0.827,195,1.483,196,0.74,197,0.74,198,0.827,199,0.827,200,0.827,201,0.827,202,0.827,203,0.827,204,0.556,205,0.827,206,0.827,207,1.258,208,0.498,209,0.393,210,0.393,211,0.345,212,0.556,213,0.697,214,0.556,215,0.393,216,0.827,217,1.074,218,0.556,219,0.556,220,0.827,221,0.556,222,0.498,223,0.556,224,0.556,225,0.556,226,0.498,227,0.556,228,0.498,229,0.556,230,0.827,231,0.971,232,0.556,233,0.498,234,0.498,235,0.393,236,0.556,237,0.498,238,0.827,239,0.556,240,0.556,241,0.498,242,0.556,243,0.556,244,0.556,245,0.556,246,0.498,247,0.827,248,1.093,249,1.093,250,1.168,251,0.74,252,0.827,253,0.987,254,0.556,255,1.168,256,1.093,257,0.827,258,0.556,259,0.825,260,0.301,261,1.029,262,0.556,263,0.556,264,0.556,265,0.772,266,0.556,267,0.987,268,0.825,269,0.556,270,0.556,271,0.556,272,0.556,273,0.556,274,0.556,275,0.556,276,0.556,277,1.093,278,0.827,279,0.556,280,1.093,281,0.827,282,0.556,283,0.556,284,0.556,285,0.556,286,0.556,287,0.697,288,0.556,289,0.987,290,0.987,291,0.987,292,0.556,293,0.987,294,0.987,295,0.556,296,0.987,297,0.827,298,0.827,299,0.827,300,0.556,301,0.827,302,0.827,303,0.556,304,0.827,305,0.827,306,0.556,307,0.556,308,0.556,309,0.987,310,0.556,311,0.556,312,0.556,313,0.556,314,0.556,315,0.556,316,0.393,317,0.584,318,0.584,319,0.556,320,0.345,321,0.393,322,1.093,323,0.556,324,0.556,325,1.093,326,1.224,327,0.827,328,0.556,329,0.556,330,0.556,331,0.556,332,0.987,333,0.556,334,0.827,335,0.556,336,0.498,337,0.498,338,0.556,339,0.556,340,0.556,341,0.556,342,0.556,343,0.556,344,0.556,345,0.556,346,0.827,347,0.556,348,0.556,349,0.556,350,0.556,351,0.556,352,0.827,353,0.556,354,0.556,355,0.556,356,0.827,357,0.556,358,0.556,359,0.556,360,0.556,361,0.556,362,0.987,363,0.556,364,0.827,365,0.556,366,0.556,367,0.556,368,0.697,369,0.556,370,0.556,371,0.393,372,0.556,373,0.556,374,0.556,375,0.556,376,0.556,377,0.556,378,0.513,379,0.556,380,0.556,381,0.556,382,0.556,383,0.556,384,0.556,385,0.556,386,0.556,387,0.556,388,0.556,389,0.556,390,0.556,391,0.556,392,0.556,393,0.556,394,0.556,395,0.556,396,0.556,397,0.393,398,0.827,399,0.556,400,0.556,401,0.556,402,0.556,403,0.556,404,1.093,405,0.987,406,0.556,407,0.556,408,0.556,409,0.92,410,0.556,411,0.556,412,0.556,413,0.556,414,0.556,415,0.556,416,0.827,417,0.556,418,0.556,419,0.556,420,0.556,421,0.556,422,0.556,423,0.827,424,1.224,425,0.827,426,0.827,427,0.556,428,0.556,429,0.827,430,0.827,431,0.827,432,0.556,433,0.987,434,0.827,435,0.556,436,1.168,437,1.093,438,1.093,439,1.224,440,0.987,441,0.987,442,0.556,443,1.168,444,0.556,445,0.827,446,0.556,447,0.556,448,0.556,449,0.556,450,0.556,451,0.556,452,0.556,453,0.987,454,0.556,455,0.827,456,0.827,457,0.556,458,0.556,459,0.827,460,0.827,461,0.556,462,0.556,463,0.556,464,0.556,465,0.556,466,0.556,467,0.556,468,0.556,469,0.556,470,0.556,471,0.556,472,0.556,473,0.827,474,0.556,475,0.498,476,0.827,477,0.556,478,0.556,479,0.556,480,0.556,481,0.556,482,0.556,483,0.556,484,0.556,485,0.556,486,0.556,487,0.556,488,0.556,489,0.556,490,0.556,491,0.556,492,0.556,493,0.556,494,0.827,495,0.827,496,0.827,497,0.827,498,0.827,499,0.827,500,0.498,501,0.827,502,0.827,503,0.556,504,0.556,505,0.556,506,0.827,507,0.74,508,0.556,509,0.556,510,0.556,511,1.093,512,0.827,513,0.556,514,0.556,515,0.556,516,0.827,517,0.556,518,0.556,519,0.827,520,0.556,521,0.556,522,0.015,523,0.022,524,0.015]],["title/modules/DragAndDropModule.html",[525,2.097,526,1.625]],["body/modules/DragAndDropModule.html",[3,0.643,4,0.553,5,0.553,6,0.467,7,0.355,15,0.042,16,0.581,32,0.467,59,0.699,60,0.553,61,0.739,65,0.643,94,0.467,95,1.2,522,0.032,523,0.036,524,0.032,526,2.903,527,3.257,528,4.633,529,4.633,530,4.376,531,3.191,532,5.331,533,4.376,534,4.633,535,4.633]],["title/interfaces/DragAxis.html",[0,0.088,66,0.685]],["body/interfaces/DragAxis.html",[0,0.158,1,0.931,2,0.393,3,0.301,4,0.258,5,0.258,6,0.218,7,0.329,8,0.498,9,0.258,10,0.827,11,1.317,12,1.317,13,1.061,14,0.508,15,0.043,16,0.512,17,0.268,18,0.513,19,0.513,20,0.513,21,0.76,22,0.865,23,0.76,24,0.584,25,0.827,26,0.513,27,0.827,28,0.556,29,0.827,30,0.827,31,0.513,32,0.218,33,1.095,34,0.659,35,0.883,36,0.987,37,0.827,38,0.987,39,0.345,40,0.584,41,0.556,42,0.556,43,0.556,44,0.556,45,0.393,46,1.168,47,0.697,48,0.827,49,0.556,50,0.393,51,0.556,52,0.697,53,0.393,54,1.095,55,0.556,56,1.093,57,0.498,58,0.74,59,0.384,60,0.508,61,0.345,62,0.393,63,0.393,64,0.393,65,0.76,66,0.978,67,0.788,68,0.659,69,0.498,70,1.093,71,0.498,72,1.093,73,0.498,74,0.498,75,1.093,76,0.74,77,1.258,78,0.787,79,0.393,80,0.74,81,0.881,82,0.881,83,0.669,84,1.224,85,1.302,86,0.883,87,0.827,88,0.827,89,0.498,90,0.689,91,1.168,92,0.301,93,0.443,94,0.325,95,0.443,96,0.393,97,0.556,98,0.498,99,0.556,100,0.301,101,0.584,102,0.74,103,0.827,104,0.809,105,0.498,106,0.556,107,0.498,108,0.498,109,0.74,110,0.978,111,0.556,112,0.459,113,0.883,114,0.74,115,0.498,116,0.556,117,0.679,118,0.345,119,0.393,120,0.513,121,0.584,122,0.685,123,0.883,124,0.345,125,0.556,126,0.345,127,0.498,128,0.725,129,0.498,130,0.556,131,0.513,132,0.345,133,0.556,134,0.443,135,1.224,136,0.498,137,0.443,138,0.498,139,0.556,140,0.498,141,0.556,142,0.556,143,0.556,144,0.498,145,0.556,146,0.556,147,0.556,148,0.659,149,0.498,150,0.498,151,0.498,152,0.556,153,0.556,154,0.556,155,0.74,156,0.74,157,0.498,158,0.556,159,0.443,160,0.498,161,0.556,162,0.883,163,1.268,164,1.134,165,0.827,166,0.827,167,0.556,168,0.556,169,0.498,170,0.76,171,0.74,172,0.613,173,0.498,174,0.556,175,0.556,176,0.498,177,0.864,178,0.393,179,0.498,180,0.498,181,0.556,182,0.556,183,0.498,184,0.443,185,0.498,186,0.498,187,0.498,188,1.134,189,0.556,190,0.987,191,0.556,192,1.068,193,0.556,194,0.827,195,1.483,196,0.74,197,0.74,198,0.827,199,0.827,200,0.827,201,0.827,202,0.827,203,0.827,204,0.556,205,0.827,206,0.827,207,1.258,208,0.498,209,0.393,210,0.393,211,0.345,212,0.556,213,0.697,214,0.556,215,0.393,216,0.827,217,1.074,218,0.556,219,0.556,220,0.827,221,0.556,222,0.498,223,0.556,224,0.556,225,0.556,226,0.498,227,0.556,228,0.498,229,0.556,230,0.827,231,0.971,232,0.556,233,0.498,234,0.498,235,0.393,236,0.556,237,0.498,238,0.827,239,0.556,240,0.556,241,0.498,242,0.556,243,0.556,244,0.556,245,0.556,246,0.498,247,0.827,248,1.093,249,1.093,250,1.168,251,0.74,252,0.827,253,0.987,254,0.556,255,1.168,256,1.093,257,0.827,258,0.556,259,0.825,260,0.301,261,1.029,262,0.556,263,0.556,264,0.556,265,0.772,266,0.556,267,0.987,268,0.825,269,0.556,270,0.556,271,0.556,272,0.556,273,0.556,274,0.556,275,0.556,276,0.556,277,1.093,278,0.827,279,0.556,280,1.093,281,0.827,282,0.556,283,0.556,284,0.556,285,0.556,286,0.556,287,0.697,288,0.556,289,0.987,290,0.987,291,0.987,292,0.556,293,0.987,294,0.987,295,0.556,296,0.987,297,0.827,298,0.827,299,0.827,300,0.556,301,0.827,302,0.827,303,0.556,304,0.827,305,0.827,306,0.556,307,0.556,308,0.556,309,0.987,310,0.556,311,0.556,312,0.556,313,0.556,314,0.556,315,0.556,316,0.393,317,0.584,318,0.584,319,0.556,320,0.345,321,0.393,322,1.093,323,0.556,324,0.556,325,1.093,326,1.224,327,0.827,328,0.556,329,0.556,330,0.556,331,0.556,332,0.987,333,0.556,334,0.827,335,0.556,336,0.498,337,0.498,338,0.556,339,0.556,340,0.556,341,0.556,342,0.556,343,0.556,344,0.556,345,0.556,346,0.827,347,0.556,348,0.556,349,0.556,350,0.556,351,0.556,352,0.827,353,0.556,354,0.556,355,0.556,356,0.827,357,0.556,358,0.556,359,0.556,360,0.556,361,0.556,362,0.987,363,0.556,364,0.827,365,0.556,366,0.556,367,0.556,368,0.697,369,0.556,370,0.556,371,0.393,372,0.556,373,0.556,374,0.556,375,0.556,376,0.556,377,0.556,378,0.513,379,0.556,380,0.556,381,0.556,382,0.556,383,0.556,384,0.556,385,0.556,386,0.556,387,0.556,388,0.556,389,0.556,390,0.556,391,0.556,392,0.556,393,0.556,394,0.556,395,0.556,396,0.556,397,0.393,398,0.827,399,0.556,400,0.556,401,0.556,402,0.556,403,0.556,404,1.093,405,0.987,406,0.556,407,0.556,408,0.556,409,0.92,410,0.556,411,0.556,412,0.556,413,0.556,414,0.556,415,0.556,416,0.827,417,0.556,418,0.556,419,0.556,420,0.556,421,0.556,422,0.556,423,0.827,424,1.224,425,0.827,426,0.827,427,0.556,428,0.556,429,0.827,430,0.827,431,0.827,432,0.556,433,0.987,434,0.827,435,0.556,436,1.168,437,1.093,438,1.093,439,1.224,440,0.987,441,0.987,442,0.556,443,1.168,444,0.556,445,0.827,446,0.556,447,0.556,448,0.556,449,0.556,450,0.556,451,0.556,452,0.556,453,0.987,454,0.556,455,0.827,456,0.827,457,0.556,458,0.556,459,0.827,460,0.827,461,0.556,462,0.556,463,0.556,464,0.556,465,0.556,466,0.556,467,0.556,468,0.556,469,0.556,470,0.556,471,0.556,472,0.556,473,0.827,474,0.556,475,0.498,476,0.827,477,0.556,478,0.556,479,0.556,480,0.556,481,0.556,482,0.556,483,0.556,484,0.556,485,0.556,486,0.556,487,0.556,488,0.556,489,0.556,490,0.556,491,0.556,492,0.556,493,0.556,494,0.827,495,0.827,496,0.827,497,0.827,498,0.827,499,0.827,500,0.498,501,0.827,502,0.827,503,0.556,504,0.556,505,0.556,506,0.827,507,0.74,508,0.556,509,0.556,510,0.556,511,1.093,512,0.827,513,0.556,514,0.556,515,0.556,516,0.827,517,0.556,518,0.556,519,0.827,520,0.556,521,0.556,522,0.015,523,0.022,524,0.015]],["title/interfaces/DragEndEvent.html",[0,0.088,74,0.685]],["body/interfaces/DragEndEvent.html",[0,0.158,1,0.977,2,0.393,3,0.301,4,0.259,5,0.259,6,0.219,7,0.329,8,0.498,9,0.259,10,0.828,11,1.297,12,1.297,13,1.061,14,0.459,15,0.043,16,0.512,17,0.269,18,0.514,19,0.514,20,0.514,21,0.76,22,0.865,23,0.76,24,0.585,25,0.828,26,0.514,27,0.828,28,0.557,29,0.828,30,0.828,31,0.514,32,0.219,33,1.096,34,0.66,35,0.884,36,0.988,37,0.828,38,0.988,39,0.346,40,0.585,41,0.557,42,0.557,43,0.557,44,0.557,45,0.393,46,1.169,47,0.698,48,0.828,49,0.557,50,0.393,51,0.557,52,0.698,53,0.393,54,1.096,55,0.557,56,1.094,57,0.498,58,0.741,59,0.385,60,0.508,61,0.346,62,0.393,63,0.393,64,0.393,65,0.76,66,0.884,67,0.779,68,0.66,69,0.498,70,1.169,71,0.498,72,1.094,73,0.498,74,0.741,75,1.268,76,0.741,77,1.259,78,0.788,79,0.393,80,0.741,81,0.881,82,0.881,83,0.669,84,1.225,85,1.303,86,0.884,87,0.828,88,0.828,89,0.498,90,0.689,91,1.169,92,0.301,93,0.444,94,0.325,95,0.444,96,0.393,97,0.557,98,0.498,99,0.557,100,0.301,101,0.585,102,0.741,103,0.828,104,0.809,105,0.498,106,0.557,107,0.498,108,0.498,109,0.741,110,0.979,111,0.557,112,0.459,113,0.884,114,0.741,115,0.498,116,0.557,117,0.679,118,0.346,119,0.393,120,0.514,121,0.585,122,0.686,123,0.884,124,0.346,125,0.557,126,0.346,127,0.498,128,0.726,129,0.498,130,0.557,131,0.514,132,0.346,133,0.557,134,0.444,135,1.225,136,0.498,137,0.444,138,0.498,139,0.557,140,0.498,141,0.557,142,0.557,143,0.557,144,0.498,145,0.557,146,0.557,147,0.557,148,0.66,149,0.498,150,0.498,151,0.498,152,0.557,153,0.557,154,0.557,155,0.741,156,0.741,157,0.498,158,0.557,159,0.444,160,0.498,161,0.557,162,0.884,163,1.268,164,1.135,165,0.828,166,0.828,167,0.557,168,0.557,169,0.498,170,0.76,171,0.741,172,0.613,173,0.498,174,0.557,175,0.557,176,0.498,177,0.864,178,0.393,179,0.498,180,0.498,181,0.557,182,0.557,183,0.498,184,0.444,185,0.498,186,0.498,187,0.498,188,1.135,189,0.557,190,0.988,191,0.557,192,1.068,193,0.557,194,0.828,195,1.484,196,0.741,197,0.741,198,0.828,199,0.828,200,0.828,201,0.828,202,0.828,203,0.828,204,0.557,205,0.828,206,0.828,207,1.259,208,0.498,209,0.393,210,0.393,211,0.346,212,0.557,213,0.698,214,0.557,215,0.393,216,0.828,217,1.074,218,0.557,219,0.557,220,0.828,221,0.557,222,0.498,223,0.557,224,0.557,225,0.557,226,0.498,227,0.557,228,0.498,229,0.557,230,0.828,231,0.971,232,0.557,233,0.498,234,0.498,235,0.393,236,0.557,237,0.498,238,0.828,239,0.557,240,0.557,241,0.498,242,0.557,243,0.557,244,0.557,245,0.557,246,0.498,247,0.828,248,1.094,249,1.094,250,1.169,251,0.741,252,0.828,253,0.988,254,0.557,255,1.169,256,1.094,257,0.828,258,0.557,259,0.825,260,0.301,261,1.03,262,0.557,263,0.557,264,0.557,265,0.772,266,0.557,267,0.988,268,0.825,269,0.557,270,0.557,271,0.557,272,0.557,273,0.557,274,0.557,275,0.557,276,0.557,277,1.094,278,0.828,279,0.557,280,1.094,281,0.828,282,0.557,283,0.557,284,0.557,285,0.557,286,0.557,287,0.698,288,0.557,289,0.988,290,0.988,291,0.988,292,0.557,293,0.988,294,0.988,295,0.557,296,0.988,297,0.828,298,0.828,299,0.828,300,0.557,301,0.828,302,0.828,303,0.557,304,0.828,305,0.828,306,0.557,307,0.557,308,0.557,309,0.988,310,0.557,311,0.557,312,0.557,313,0.557,314,0.557,315,0.557,316,0.393,317,0.585,318,0.585,319,0.557,320,0.346,321,0.393,322,1.094,323,0.557,324,0.557,325,1.094,326,1.225,327,0.828,328,0.557,329,0.557,330,0.557,331,0.557,332,0.988,333,0.557,334,0.828,335,0.557,336,0.498,337,0.498,338,0.557,339,0.557,340,0.557,341,0.557,342,0.557,343,0.557,344,0.557,345,0.557,346,0.828,347,0.557,348,0.557,349,0.557,350,0.557,351,0.557,352,0.828,353,0.557,354,0.557,355,0.557,356,0.828,357,0.557,358,0.557,359,0.557,360,0.557,361,0.557,362,0.988,363,0.557,364,0.828,365,0.557,366,0.557,367,0.557,368,0.698,369,0.557,370,0.557,371,0.393,372,0.557,373,0.557,374,0.557,375,0.557,376,0.557,377,0.557,378,0.514,379,0.557,380,0.557,381,0.557,382,0.557,383,0.557,384,0.557,385,0.557,386,0.557,387,0.557,388,0.557,389,0.557,390,0.557,391,0.557,392,0.557,393,0.557,394,0.557,395,0.557,396,0.557,397,0.393,398,0.828,399,0.557,400,0.557,401,0.557,402,0.557,403,0.557,404,1.094,405,0.988,406,0.557,407,0.557,408,0.557,409,0.92,410,0.557,411,0.557,412,0.557,413,0.557,414,0.557,415,0.557,416,0.828,417,0.557,418,0.557,419,0.557,420,0.557,421,0.557,422,0.557,423,0.828,424,1.225,425,0.828,426,0.828,427,0.557,428,0.557,429,0.828,430,0.828,431,0.828,432,0.557,433,0.988,434,0.828,435,0.557,436,1.169,437,1.094,438,1.094,439,1.225,440,0.988,441,0.988,442,0.557,443,1.169,444,0.557,445,0.828,446,0.557,447,0.557,448,0.557,449,0.557,450,0.557,451,0.557,452,0.557,453,0.988,454,0.557,455,0.828,456,0.828,457,0.557,458,0.557,459,0.828,460,0.828,461,0.557,462,0.557,463,0.557,464,0.557,465,0.557,466,0.557,467,0.557,468,0.557,469,0.557,470,0.557,471,0.557,472,0.557,473,0.828,474,0.557,475,0.498,476,0.828,477,0.557,478,0.557,479,0.557,480,0.557,481,0.557,482,0.557,483,0.557,484,0.557,485,0.557,486,0.557,487,0.557,488,0.557,489,0.557,490,0.557,491,0.557,492,0.557,493,0.557,494,0.828,495,0.828,496,0.828,497,0.828,498,0.828,499,0.828,500,0.498,501,0.828,502,0.828,503,0.557,504,0.557,505,0.557,506,0.828,507,0.741,508,0.557,509,0.557,510,0.557,511,1.094,512,0.828,513,0.557,514,0.557,515,0.557,516,0.828,517,0.557,518,0.557,519,0.828,520,0.557,521,0.557,522,0.015,523,0.022,524,0.015]],["title/interfaces/DragMoveEvent.html",[0,0.088,73,0.685]],["body/interfaces/DragMoveEvent.html",[0,0.158,1,0.978,2,0.394,3,0.302,4,0.26,5,0.26,6,0.219,7,0.329,8,0.5,11,1.298,12,1.298,13,1.061,14,0.385,15,0.043,16,0.512,17,0.269,18,0.515,19,0.515,20,0.515,21,0.761,22,0.866,23,0.761,24,0.586,25,0.829,26,0.515,27,0.829,28,0.559,29,0.829,30,0.829,31,0.515,32,0.219,33,1.097,34,0.661,35,0.886,36,0.99,37,0.829,38,0.99,39,0.347,40,0.586,41,0.559,42,0.559,43,0.559,44,0.559,45,0.394,46,1.17,47,0.699,48,0.829,49,0.559,50,0.394,51,0.559,52,0.699,53,0.394,54,1.097,55,0.559,56,1.095,57,0.5,58,0.742,59,0.385,60,0.509,61,0.347,62,0.394,63,0.394,64,0.394,65,0.761,66,0.886,67,0.768,68,0.661,69,0.5,70,1.17,71,0.5,72,1.095,73,0.742,74,0.5,75,1.095,76,0.742,77,1.259,78,0.789,79,0.394,80,0.742,81,0.882,82,0.882,83,0.67,84,1.226,85,1.304,86,0.886,87,0.829,88,0.829,89,0.5,90,0.69,91,1.17,92,0.302,93,0.445,94,0.326,95,0.445,96,0.394,97,0.559,98,0.5,99,0.559,100,0.302,101,0.586,102,0.742,103,0.829,104,0.81,105,0.5,106,0.559,107,0.5,108,0.5,109,0.742,110,0.98,111,0.559,112,0.46,113,0.886,114,0.742,115,0.5,116,0.559,117,0.68,118,0.347,119,0.394,120,0.515,121,0.586,122,0.686,123,0.886,124,0.347,125,0.559,126,0.347,127,0.5,128,0.727,129,0.5,130,0.559,131,0.515,132,0.347,133,0.559,134,0.445,135,1.226,136,0.5,137,0.445,138,0.5,139,0.559,140,0.5,141,0.559,142,0.559,143,0.559,144,0.5,145,0.559,146,0.559,147,0.559,148,0.661,149,0.5,150,0.5,151,0.5,152,0.559,153,0.559,154,0.559,155,0.742,156,0.742,157,0.5,158,0.559,159,0.445,160,0.5,161,0.559,162,0.886,163,1.269,164,1.136,165,0.829,166,0.829,167,0.559,168,0.559,169,0.5,170,0.761,171,0.742,172,0.614,173,0.5,174,0.559,175,0.559,176,0.5,177,0.865,178,0.394,179,0.5,180,0.5,181,0.559,182,0.559,183,0.5,184,0.445,185,0.5,186,0.5,187,0.5,188,1.136,189,0.559,190,0.99,191,0.559,192,1.069,193,0.559,194,0.829,195,1.484,196,0.742,197,0.742,198,0.829,199,0.829,200,0.829,201,0.829,202,0.829,203,0.829,204,0.559,205,0.829,206,0.829,207,1.259,208,0.5,209,0.394,210,0.394,211,0.347,212,0.559,213,0.699,214,0.559,215,0.394,216,0.829,217,1.075,218,0.559,219,0.559,220,0.829,221,0.559,222,0.5,223,0.559,224,0.559,225,0.559,226,0.5,227,0.559,228,0.5,229,0.559,230,0.829,231,0.971,232,0.559,233,0.5,234,0.5,235,0.394,236,0.559,237,0.5,238,0.829,239,0.559,240,0.559,241,0.5,242,0.559,243,0.559,244,0.559,245,0.559,246,0.5,247,0.829,248,1.095,249,1.095,250,1.17,251,0.742,252,0.829,253,0.99,254,0.559,255,1.17,256,1.095,257,0.829,258,0.559,259,0.826,260,0.302,261,1.03,262,0.559,263,0.559,264,0.559,265,0.773,266,0.559,267,0.99,268,0.826,269,0.559,270,0.559,271,0.559,272,0.559,273,0.559,274,0.559,275,0.559,276,0.559,277,1.095,278,0.829,279,0.559,280,1.095,281,0.829,282,0.559,283,0.559,284,0.559,285,0.559,286,0.559,287,0.699,288,0.559,289,0.99,290,0.99,291,0.99,292,0.559,293,0.99,294,0.99,295,0.559,296,0.99,297,0.829,298,0.829,299,0.829,300,0.559,301,0.829,302,0.829,303,0.559,304,0.829,305,0.829,306,0.559,307,0.559,308,0.559,309,0.99,310,0.559,311,0.559,312,0.559,313,0.559,314,0.559,315,0.559,316,0.394,317,0.586,318,0.586,319,0.559,320,0.347,321,0.394,322,1.095,323,0.559,324,0.559,325,1.095,326,1.226,327,0.829,328,0.559,329,0.559,330,0.559,331,0.559,332,0.99,333,0.559,334,0.829,335,0.559,336,0.5,337,0.5,338,0.559,339,0.559,340,0.559,341,0.559,342,0.559,343,0.559,344,0.559,345,0.559,346,0.829,347,0.559,348,0.559,349,0.559,350,0.559,351,0.559,352,0.829,353,0.559,354,0.559,355,0.559,356,0.829,357,0.559,358,0.559,359,0.559,360,0.559,361,0.559,362,0.99,363,0.559,364,0.829,365,0.559,366,0.559,367,0.559,368,0.699,369,0.559,370,0.559,371,0.394,372,0.559,373,0.559,374,0.559,375,0.559,376,0.559,377,0.559,378,0.515,379,0.559,380,0.559,381,0.559,382,0.559,383,0.559,384,0.559,385,0.559,386,0.559,387,0.559,388,0.559,389,0.559,390,0.559,391,0.559,392,0.559,393,0.559,394,0.559,395,0.559,396,0.559,397,0.394,398,0.829,399,0.559,400,0.559,401,0.559,402,0.559,403,0.559,404,1.095,405,0.99,406,0.559,407,0.559,408,0.559,409,0.921,410,0.559,411,0.559,412,0.559,413,0.559,414,0.559,415,0.559,416,0.829,417,0.559,418,0.559,419,0.559,420,0.559,421,0.559,422,0.559,423,0.829,424,1.226,425,0.829,426,0.829,427,0.559,428,0.559,429,0.829,430,0.829,431,0.829,432,0.559,433,0.99,434,0.829,435,0.559,436,1.17,437,1.095,438,1.095,439,1.226,440,0.99,441,0.99,442,0.559,443,1.17,444,0.559,445,0.829,446,0.559,447,0.559,448,0.559,449,0.559,450,0.559,451,0.559,452,0.559,453,0.99,454,0.559,455,0.829,456,0.829,457,0.559,458,0.559,459,0.829,460,0.829,461,0.559,462,0.559,463,0.559,464,0.559,465,0.559,466,0.559,467,0.559,468,0.559,469,0.559,470,0.559,471,0.559,472,0.559,473,0.829,474,0.559,475,0.5,476,0.829,477,0.559,478,0.559,479,0.559,480,0.559,481,0.559,482,0.559,483,0.559,484,0.559,485,0.559,486,0.559,487,0.559,488,0.559,489,0.559,490,0.559,491,0.559,492,0.559,493,0.559,494,0.829,495,0.829,496,0.829,497,0.829,498,0.829,499,0.829,500,0.5,501,0.829,502,0.829,503,0.559,504,0.559,505,0.559,506,0.829,507,0.742,508,0.559,509,0.559,510,0.559,511,1.095,512,0.829,513,0.559,514,0.559,515,0.559,516,0.829,517,0.559,518,0.559,519,0.829,520,0.559,521,0.559,522,0.015,523,0.022,524,0.015]],["title/interfaces/DragPointerDownEvent.html",[0,0.088,69,0.685]],["body/interfaces/DragPointerDownEvent.html",[0,0.158,1,0.978,2,0.394,3,0.302,4,0.26,5,0.26,6,0.219,7,0.329,8,0.5,11,1.298,12,1.298,13,1.061,14,0.385,15,0.043,16,0.512,17,0.269,18,0.515,19,0.515,20,0.515,21,0.761,22,0.866,23,0.761,24,0.586,25,0.829,26,0.515,27,0.829,28,0.559,29,0.829,30,0.829,31,0.515,32,0.219,33,1.097,34,0.661,35,0.886,36,0.99,37,0.829,38,0.99,39,0.347,40,0.586,41,0.559,42,0.559,43,0.559,44,0.559,45,0.394,46,1.17,47,0.699,48,0.829,49,0.559,50,0.394,51,0.559,52,0.699,53,0.394,54,1.097,55,0.559,56,1.095,57,0.5,58,0.742,59,0.385,60,0.509,61,0.347,62,0.394,63,0.394,64,0.394,65,0.761,66,0.886,67,0.768,68,0.661,69,0.742,70,1.17,71,0.5,72,1.095,73,0.5,74,0.5,75,1.095,76,0.742,77,1.259,78,0.789,79,0.394,80,0.742,81,0.882,82,0.882,83,0.67,84,1.226,85,1.304,86,0.886,87,0.829,88,0.829,89,0.5,90,0.69,91,1.17,92,0.302,93,0.445,94,0.326,95,0.445,96,0.394,97,0.559,98,0.5,99,0.559,100,0.302,101,0.586,102,0.742,103,0.829,104,0.81,105,0.5,106,0.559,107,0.5,108,0.5,109,0.742,110,0.98,111,0.559,112,0.46,113,0.886,114,0.742,115,0.5,116,0.559,117,0.68,118,0.347,119,0.394,120,0.515,121,0.586,122,0.686,123,0.886,124,0.347,125,0.559,126,0.347,127,0.5,128,0.727,129,0.5,130,0.559,131,0.515,132,0.347,133,0.559,134,0.445,135,1.226,136,0.5,137,0.445,138,0.5,139,0.559,140,0.5,141,0.559,142,0.559,143,0.559,144,0.5,145,0.559,146,0.559,147,0.559,148,0.661,149,0.5,150,0.5,151,0.5,152,0.559,153,0.559,154,0.559,155,0.742,156,0.742,157,0.5,158,0.559,159,0.445,160,0.5,161,0.559,162,0.886,163,1.269,164,1.136,165,0.829,166,0.829,167,0.559,168,0.559,169,0.5,170,0.761,171,0.742,172,0.614,173,0.5,174,0.559,175,0.559,176,0.5,177,0.865,178,0.394,179,0.5,180,0.5,181,0.559,182,0.559,183,0.5,184,0.445,185,0.5,186,0.5,187,0.5,188,1.136,189,0.559,190,0.99,191,0.559,192,1.069,193,0.559,194,0.829,195,1.484,196,0.742,197,0.742,198,0.829,199,0.829,200,0.829,201,0.829,202,0.829,203,0.829,204,0.559,205,0.829,206,0.829,207,1.259,208,0.5,209,0.394,210,0.394,211,0.347,212,0.559,213,0.699,214,0.559,215,0.394,216,0.829,217,1.075,218,0.559,219,0.559,220,0.829,221,0.559,222,0.5,223,0.559,224,0.559,225,0.559,226,0.5,227,0.559,228,0.5,229,0.559,230,0.829,231,0.971,232,0.559,233,0.5,234,0.5,235,0.394,236,0.559,237,0.5,238,0.829,239,0.559,240,0.559,241,0.5,242,0.559,243,0.559,244,0.559,245,0.559,246,0.5,247,0.829,248,1.095,249,1.095,250,1.17,251,0.742,252,0.829,253,0.99,254,0.559,255,1.17,256,1.095,257,0.829,258,0.559,259,0.826,260,0.302,261,1.03,262,0.559,263,0.559,264,0.559,265,0.773,266,0.559,267,0.99,268,0.826,269,0.559,270,0.559,271,0.559,272,0.559,273,0.559,274,0.559,275,0.559,276,0.559,277,1.095,278,0.829,279,0.559,280,1.095,281,0.829,282,0.559,283,0.559,284,0.559,285,0.559,286,0.559,287,0.699,288,0.559,289,0.99,290,0.99,291,0.99,292,0.559,293,0.99,294,0.99,295,0.559,296,0.99,297,0.829,298,0.829,299,0.829,300,0.559,301,0.829,302,0.829,303,0.559,304,0.829,305,0.829,306,0.559,307,0.559,308,0.559,309,0.99,310,0.559,311,0.559,312,0.559,313,0.559,314,0.559,315,0.559,316,0.394,317,0.586,318,0.586,319,0.559,320,0.347,321,0.394,322,1.095,323,0.559,324,0.559,325,1.095,326,1.226,327,0.829,328,0.559,329,0.559,330,0.559,331,0.559,332,0.99,333,0.559,334,0.829,335,0.559,336,0.5,337,0.5,338,0.559,339,0.559,340,0.559,341,0.559,342,0.559,343,0.559,344,0.559,345,0.559,346,0.829,347,0.559,348,0.559,349,0.559,350,0.559,351,0.559,352,0.829,353,0.559,354,0.559,355,0.559,356,0.829,357,0.559,358,0.559,359,0.559,360,0.559,361,0.559,362,0.99,363,0.559,364,0.829,365,0.559,366,0.559,367,0.559,368,0.699,369,0.559,370,0.559,371,0.394,372,0.559,373,0.559,374,0.559,375,0.559,376,0.559,377,0.559,378,0.515,379,0.559,380,0.559,381,0.559,382,0.559,383,0.559,384,0.559,385,0.559,386,0.559,387,0.559,388,0.559,389,0.559,390,0.559,391,0.559,392,0.559,393,0.559,394,0.559,395,0.559,396,0.559,397,0.394,398,0.829,399,0.559,400,0.559,401,0.559,402,0.559,403,0.559,404,1.095,405,0.99,406,0.559,407,0.559,408,0.559,409,0.921,410,0.559,411,0.559,412,0.559,413,0.559,414,0.559,415,0.559,416,0.829,417,0.559,418,0.559,419,0.559,420,0.559,421,0.559,422,0.559,423,0.829,424,1.226,425,0.829,426,0.829,427,0.559,428,0.559,429,0.829,430,0.829,431,0.829,432,0.559,433,0.99,434,0.829,435,0.559,436,1.17,437,1.095,438,1.095,439,1.226,440,0.99,441,0.99,442,0.559,443,1.17,444,0.559,445,0.829,446,0.559,447,0.559,448,0.559,449,0.559,450,0.559,451,0.559,452,0.559,453,0.99,454,0.559,455,0.829,456,0.829,457,0.559,458,0.559,459,0.829,460,0.829,461,0.559,462,0.559,463,0.559,464,0.559,465,0.559,466,0.559,467,0.559,468,0.559,469,0.559,470,0.559,471,0.559,472,0.559,473,0.829,474,0.559,475,0.5,476,0.829,477,0.559,478,0.559,479,0.559,480,0.559,481,0.559,482,0.559,483,0.559,484,0.559,485,0.559,486,0.559,487,0.559,488,0.559,489,0.559,490,0.559,491,0.559,492,0.559,493,0.559,494,0.829,495,0.829,496,0.829,497,0.829,498,0.829,499,0.829,500,0.5,501,0.829,502,0.829,503,0.559,504,0.559,505,0.559,506,0.829,507,0.742,508,0.559,509,0.559,510,0.559,511,1.095,512,0.829,513,0.559,514,0.559,515,0.559,516,0.829,517,0.559,518,0.559,519,0.829,520,0.559,521,0.559,522,0.015,523,0.022,524,0.015]],["title/interfaces/DragStartEvent.html",[0,0.088,71,0.685]],["body/interfaces/DragStartEvent.html",[0,0.158,1,0.932,2,0.394,3,0.301,4,0.259,5,0.259,6,0.219,7,0.329,8,0.499,9,0.259,10,0.828,11,1.298,12,1.298,13,1.061,14,0.459,15,0.043,16,0.512,17,0.269,18,0.514,19,0.514,20,0.514,21,0.761,22,0.865,23,0.76,24,0.585,25,0.828,26,0.514,27,0.828,28,0.557,29,0.828,30,0.828,31,0.514,32,0.219,33,1.096,34,0.66,35,0.884,36,1.169,37,0.828,38,0.988,39,0.346,40,0.585,41,0.557,42,0.557,43,0.557,44,0.557,45,0.394,46,1.169,47,0.698,48,0.828,49,0.557,50,0.394,51,0.557,52,0.698,53,0.394,54,1.096,55,0.557,56,1.094,57,0.499,58,0.741,59,0.385,60,0.508,61,0.346,62,0.394,63,0.394,64,0.394,65,0.76,66,0.884,67,0.767,68,0.66,69,0.499,70,1.094,71,0.741,72,1.268,73,0.499,74,0.499,75,1.094,76,0.741,77,1.259,78,0.788,79,0.394,80,0.741,81,0.881,82,0.881,83,0.67,84,1.225,85,1.303,86,0.884,87,0.828,88,0.828,89,0.499,90,0.689,91,1.169,92,0.301,93,0.444,94,0.325,95,0.444,96,0.394,97,0.557,98,0.499,99,0.557,100,0.301,101,0.585,102,0.741,103,0.828,104,0.809,105,0.499,106,0.557,107,0.499,108,0.499,109,0.741,110,0.979,111,0.557,112,0.459,113,0.884,114,0.741,115,0.499,116,0.557,117,0.679,118,0.346,119,0.394,120,0.514,121,0.585,122,0.686,123,0.884,124,0.346,125,0.557,126,0.346,127,0.499,128,0.726,129,0.499,130,0.557,131,0.514,132,0.346,133,0.557,134,0.444,135,1.225,136,0.499,137,0.444,138,0.499,139,0.557,140,0.499,141,0.557,142,0.557,143,0.557,144,0.499,145,0.557,146,0.557,147,0.557,148,0.66,149,0.499,150,0.499,151,0.499,152,0.557,153,0.557,154,0.557,155,0.741,156,0.741,157,0.499,158,0.557,159,0.444,160,0.499,161,0.557,162,0.884,163,1.268,164,1.135,165,0.828,166,0.828,167,0.557,168,0.557,169,0.499,170,0.761,171,0.741,172,0.614,173,0.499,174,0.557,175,0.557,176,0.499,177,0.864,178,0.394,179,0.499,180,0.499,181,0.557,182,0.557,183,0.499,184,0.444,185,0.499,186,0.499,187,0.499,188,1.135,189,0.557,190,0.988,191,0.557,192,1.068,193,0.557,194,0.828,195,1.484,196,0.741,197,0.741,198,0.828,199,0.828,200,0.828,201,0.828,202,0.828,203,0.828,204,0.557,205,0.828,206,0.828,207,1.259,208,0.499,209,0.394,210,0.394,211,0.346,212,0.557,213,0.698,214,0.557,215,0.394,216,0.828,217,1.074,218,0.557,219,0.557,220,0.828,221,0.557,222,0.499,223,0.557,224,0.557,225,0.557,226,0.499,227,0.557,228,0.499,229,0.557,230,0.828,231,0.971,232,0.557,233,0.499,234,0.499,235,0.394,236,0.557,237,0.499,238,0.828,239,0.557,240,0.557,241,0.499,242,0.557,243,0.557,244,0.557,245,0.557,246,0.499,247,0.828,248,1.094,249,1.094,250,1.169,251,0.741,252,0.828,253,0.988,254,0.557,255,1.169,256,1.094,257,0.828,258,0.557,259,0.826,260,0.301,261,1.03,262,0.557,263,0.557,264,0.557,265,0.773,266,0.557,267,0.988,268,0.826,269,0.557,270,0.557,271,0.557,272,0.557,273,0.557,274,0.557,275,0.557,276,0.557,277,1.094,278,0.828,279,0.557,280,1.094,281,0.828,282,0.557,283,0.557,284,0.557,285,0.557,286,0.557,287,0.698,288,0.557,289,0.988,290,0.988,291,0.988,292,0.557,293,0.988,294,0.988,295,0.557,296,0.988,297,0.828,298,0.828,299,0.828,300,0.557,301,0.828,302,0.828,303,0.557,304,0.828,305,0.828,306,0.557,307,0.557,308,0.557,309,0.988,310,0.557,311,0.557,312,0.557,313,0.557,314,0.557,315,0.557,316,0.394,317,0.585,318,0.585,319,0.557,320,0.346,321,0.394,322,1.094,323,0.557,324,0.557,325,1.094,326,1.225,327,0.828,328,0.557,329,0.557,330,0.557,331,0.557,332,0.988,333,0.557,334,0.828,335,0.557,336,0.499,337,0.499,338,0.557,339,0.557,340,0.557,341,0.557,342,0.557,343,0.557,344,0.557,345,0.557,346,0.828,347,0.557,348,0.557,349,0.557,350,0.557,351,0.557,352,0.828,353,0.557,354,0.557,355,0.557,356,0.828,357,0.557,358,0.557,359,0.557,360,0.557,361,0.557,362,0.988,363,0.557,364,0.828,365,0.557,366,0.557,367,0.557,368,0.698,369,0.557,370,0.557,371,0.394,372,0.557,373,0.557,374,0.557,375,0.557,376,0.557,377,0.557,378,0.514,379,0.557,380,0.557,381,0.557,382,0.557,383,0.557,384,0.557,385,0.557,386,0.557,387,0.557,388,0.557,389,0.557,390,0.557,391,0.557,392,0.557,393,0.557,394,0.557,395,0.557,396,0.557,397,0.394,398,0.828,399,0.557,400,0.557,401,0.557,402,0.557,403,0.557,404,1.094,405,0.988,406,0.557,407,0.557,408,0.557,409,0.92,410,0.557,411,0.557,412,0.557,413,0.557,414,0.557,415,0.557,416,0.828,417,0.557,418,0.557,419,0.557,420,0.557,421,0.557,422,0.557,423,0.828,424,1.225,425,0.828,426,0.828,427,0.557,428,0.557,429,0.828,430,0.828,431,0.828,432,0.557,433,0.988,434,0.828,435,0.557,436,1.169,437,1.094,438,1.094,439,1.225,440,0.988,441,0.988,442,0.557,443,1.169,444,0.557,445,0.828,446,0.557,447,0.557,448,0.557,449,0.557,450,0.557,451,0.557,452,0.557,453,0.988,454,0.557,455,0.828,456,0.828,457,0.557,458,0.557,459,0.828,460,0.828,461,0.557,462,0.557,463,0.557,464,0.557,465,0.557,466,0.557,467,0.557,468,0.557,469,0.557,470,0.557,471,0.557,472,0.557,473,0.828,474,0.557,475,0.499,476,0.828,477,0.557,478,0.557,479,0.557,480,0.557,481,0.557,482,0.557,483,0.557,484,0.557,485,0.557,486,0.557,487,0.557,488,0.557,489,0.557,490,0.557,491,0.557,492,0.557,493,0.557,494,0.828,495,0.828,496,0.828,497,0.828,498,0.828,499,0.828,500,0.499,501,0.828,502,0.828,503,0.557,504,0.557,505,0.557,506,0.828,507,0.741,508,0.557,509,0.557,510,0.557,511,1.094,512,0.828,513,0.557,514,0.557,515,0.557,516,0.828,517,0.557,518,0.557,519,0.828,520,0.557,521,0.557,522,0.015,523,0.022,524,0.015]],["title/directives/DraggableDirective.html",[17,0.249,95,0.611]],["body/directives/DraggableDirective.html",[0,0.155,1,0.898,3,0.276,4,0.238,5,0.238,6,0.565,7,0.387,8,0.458,9,0.238,11,1.295,12,1.295,13,1.051,14,0.679,15,0.043,16,0.499,17,0.252,18,0.583,19,0.482,20,0.482,21,0.736,22,0.952,23,0.747,24,0.663,25,0.938,26,0.482,27,0.776,28,0.511,29,0.938,30,0.776,31,0.482,32,0.201,33,1.061,34,0.619,35,0.84,36,0.938,37,0.776,38,0.938,39,0.317,40,0.548,41,0.511,42,0.511,43,0.511,44,0.511,45,0.361,46,1.127,47,0.663,48,0.776,49,0.511,50,0.361,51,0.511,52,0.663,53,0.361,54,1.061,55,0.511,56,1.186,57,0.458,58,0.695,59,0.361,60,0.523,61,0.317,62,0.361,63,0.361,64,0.361,65,0.747,66,1.061,67,0.768,68,0.748,69,0.458,70,1.048,71,0.458,72,1.048,73,0.458,74,0.458,75,1.048,76,0.695,77,1.237,78,0.946,79,0.361,80,0.695,81,0.867,82,0.867,83,0.669,84,1.186,85,1.27,86,0.84,87,0.776,88,0.776,89,0.458,90,0.711,91,1.186,92,0.42,93,0.619,94,0.369,95,0.619,96,0.548,97,0.776,98,0.695,99,0.776,100,0.42,101,0.74,102,0.938,103,1.048,104,0.848,105,0.695,106,0.776,107,0.695,108,0.84,109,0.938,110,1.136,111,0.776,112,0.551,113,1.061,114,1.008,115,0.695,116,0.938,117,0.699,118,0.482,119,0.548,120,0.583,121,0.663,122,0.755,123,0.938,124,0.482,125,0.776,126,0.482,127,0.84,128,0.765,129,0.695,130,0.776,131,0.651,132,0.583,133,0.776,134,1.012,135,1.232,136,0.84,137,0.619,138,0.695,139,0.776,140,0.695,141,0.776,142,0.776,143,0.776,144,0.84,145,0.776,146,0.776,147,0.776,148,0.835,149,0.695,150,0.695,151,0.695,152,0.776,153,0.776,154,0.938,155,0.695,156,0.695,157,0.458,158,0.511,159,0.408,160,0.458,161,0.511,162,0.938,163,1.232,164,1.103,165,0.776,166,0.776,167,0.511,168,0.511,169,0.695,170,0.848,171,0.938,172,0.699,173,0.695,174,0.776,175,0.776,176,0.84,177,0.848,178,0.548,179,0.695,180,0.695,181,0.776,182,0.776,183,0.695,184,0.748,185,0.695,186,0.84,187,0.84,188,1.103,189,0.511,190,0.938,191,0.511,192,1.059,193,0.511,194,0.776,195,1.468,196,0.695,197,0.695,198,0.776,199,0.776,200,0.776,201,0.776,202,0.776,203,0.776,204,0.511,205,0.776,206,0.776,207,1.237,208,0.458,209,0.361,210,0.361,211,0.317,212,0.511,213,0.663,214,0.511,215,0.361,216,0.776,217,1.066,218,0.511,219,0.511,220,0.776,221,0.511,222,0.458,223,0.511,224,0.511,225,0.511,226,0.458,227,0.511,228,0.458,229,0.511,230,0.776,231,0.952,232,0.511,233,0.458,234,0.458,235,0.361,236,0.511,237,0.458,238,0.776,239,0.511,240,0.511,241,0.458,242,0.511,243,0.511,244,0.511,245,0.511,246,0.458,247,0.776,248,1.048,249,1.048,250,1.127,251,0.695,252,0.776,253,0.938,254,0.511,255,1.127,256,1.048,257,0.776,258,0.511,259,0.796,260,0.276,261,1.016,262,0.511,263,0.511,264,0.511,265,0.74,266,0.511,267,0.938,268,0.796,269,0.511,270,0.511,271,0.511,272,0.511,273,0.511,274,0.511,275,0.511,276,0.511,277,1.048,278,0.776,279,0.511,280,1.048,281,0.776,282,0.511,283,0.511,284,0.511,285,0.511,286,0.511,287,0.663,288,0.511,289,0.938,290,0.938,291,0.938,292,0.511,293,0.938,294,0.938,295,0.511,296,0.938,297,0.776,298,0.776,299,0.776,300,0.511,301,0.776,302,0.776,303,0.511,304,0.776,305,0.776,306,0.511,307,0.511,308,0.511,309,0.938,310,0.511,311,0.511,312,0.511,313,0.511,314,0.511,315,0.511,316,0.361,317,0.548,318,0.548,319,0.511,320,0.317,321,0.361,322,1.048,323,0.511,324,0.511,325,1.048,326,1.186,327,0.776,328,0.511,329,0.511,330,0.511,331,0.511,332,0.938,333,0.511,334,0.776,335,0.511,336,0.458,337,0.458,338,0.511,339,0.511,340,0.511,341,0.511,342,0.511,343,0.511,344,0.511,345,0.511,346,0.776,347,0.511,348,0.511,349,0.511,350,0.511,351,0.511,352,0.776,353,0.511,354,0.511,355,0.511,356,0.776,357,0.511,358,0.511,359,0.511,360,0.511,361,0.511,362,0.938,363,0.511,364,0.776,365,0.511,366,0.511,367,0.511,368,0.663,369,0.511,370,0.511,371,0.361,372,0.511,373,0.511,374,0.511,375,0.511,376,0.511,377,0.511,378,0.788,379,0.511,380,0.511,381,0.511,382,0.511,383,0.511,384,0.511,385,0.511,386,0.511,387,0.511,388,0.511,389,0.511,390,0.511,391,0.511,392,0.511,393,0.511,394,0.511,395,0.511,396,0.511,397,0.361,398,0.776,399,0.511,400,0.511,401,0.511,402,0.511,403,0.511,404,1.048,405,0.938,406,0.511,407,0.511,408,0.511,409,0.897,410,0.511,411,0.511,412,0.511,413,0.511,414,0.511,415,0.511,416,0.776,417,0.511,418,0.511,419,0.511,420,0.511,421,0.511,422,0.511,423,0.776,424,1.186,425,0.776,426,0.776,427,0.511,428,0.511,429,0.776,430,0.776,431,0.776,432,0.511,433,0.938,434,0.776,435,0.511,436,1.127,437,1.048,438,1.048,439,1.186,440,0.938,441,0.938,442,0.511,443,1.127,444,0.511,445,0.776,446,0.511,447,0.511,448,0.511,449,0.511,450,0.511,451,0.511,452,0.511,453,0.938,454,0.511,455,0.776,456,0.776,457,0.511,458,0.511,459,0.776,460,0.776,461,0.511,462,0.511,463,0.511,464,0.511,465,0.511,466,0.511,467,0.511,468,0.511,469,0.511,470,0.511,471,0.511,472,0.511,473,0.776,474,0.511,475,0.458,476,0.776,477,0.511,478,0.511,479,0.511,480,0.511,481,0.511,482,0.511,483,0.511,484,0.511,485,0.511,486,0.511,487,0.511,488,0.511,489,0.511,490,0.511,491,0.511,492,0.511,493,0.511,494,0.776,495,0.776,496,0.776,497,0.776,498,0.776,499,0.776,500,0.458,501,0.776,502,0.776,503,0.511,504,0.511,505,0.511,506,0.776,507,0.695,508,0.511,509,0.511,510,0.511,511,1.048,512,0.776,513,0.511,514,0.511,515,0.511,516,0.776,517,0.511,518,0.511,519,0.776,520,0.511,521,0.511,522,0.014,523,0.021,524,0.014,536,1.225,537,1.4,538,2.126,539,2.126,540,2.482,541,3.916,542,1.992,543,1.992,544,1.992,545,1.992,546,1.992,547,1.992,548,1.992,549,1.992,550,1.992,551,1.992,552,1.992,553,1.992,554,1.992,555,1.992,556,1.992,557,1.992,558,1.992]],["title/directives/DraggableScrollContainerDirective.html",[17,0.249,59,0.356]],["body/directives/DraggableScrollContainerDirective.html",[3,0.594,4,0.511,5,0.511,6,0.548,7,0.382,9,0.511,14,0.511,15,0.042,16,0.432,17,0.424,18,0.682,19,0.866,20,0.682,23,0.754,26,0.682,32,0.432,59,0.607,60,0.648,65,0.594,67,0.706,90,0.607,92,0.706,93,1.042,94,0.432,104,0.811,112,0.607,117,0.811,124,0.811,134,1.042,148,1.192,150,1.169,156,1.338,184,1.151,188,0.984,251,1.169,260,0.706,378,0.811,500,1.248,507,1.291,522,0.029,523,0.035,524,0.029,536,2.632,537,3.009,538,3.578,541,3.578,559,5.432,560,4.281,561,4.281,562,5.09,563,4.094,564,5.09,565,3.951,566,3.578,567,3.578,568,5.09,569,4.178,570,4.459,571,4.281,572,5.09,573,4.781,574,5.621,575,4.614,576,4.281,577,5.09,578,5.09,579,4.281,580,5.09,581,4.178,582,5.09,583,5.09,584,5.09,585,4.281]],["title/interfaces/DropEvent.html",[0,0.088,586,2.449]],["body/interfaces/DropEvent.html",[0,0.107,2,0.656,3,0.502,4,0.432,5,0.432,6,0.365,7,0.383,9,0.432,10,1.179,13,0.962,14,0.548,15,0.043,16,0.564,17,0.382,18,0.732,19,0.732,20,0.732,21,0.891,22,0.992,23,0.736,24,0.832,26,0.732,31,0.732,32,0.365,39,0.732,40,0.832,45,0.832,47,0.656,50,0.656,52,0.914,53,0.656,59,0.548,60,0.548,61,0.577,62,0.656,63,0.656,64,0.656,65,0.7,67,0.736,79,0.656,81,0.925,82,0.916,83,0.548,90,0.711,92,0.502,94,0.365,96,0.656,100,0.736,101,1.06,104,0.804,112,0.432,117,0.732,118,0.577,119,0.656,120,0.577,121,0.656,122,0.637,126,0.732,128,0.732,131,0.577,132,0.577,170,0.845,172,0.732,177,0.845,192,0.992,209,0.656,210,0.656,211,0.577,213,0.656,215,0.656,217,1.014,231,0.832,259,0.656,260,0.502,261,0.914,265,0.656,268,0.962,287,0.962,316,0.832,317,0.992,318,0.832,320,0.732,321,0.656,368,0.832,371,0.914,378,0.732,397,0.656,409,0.656,522,0.025,523,0.031,524,0.025,531,1.971,586,2.971,587,1.971,588,3.544,589,3.227,590,2.544,591,1.971,592,3.1,593,3.847,594,2.544,595,2.544,596,2.823,597,3.227,598,3.544,599,2.544,600,2.746,601,2.225,602,2.823,603,2.225,604,2.544,605,2.823,606,2.544,607,3.227,608,2.544,609,2.544,610,2.544,611,2.544,612,2.544,613,2.544,614,2.544,615,2.544,616,2.225,617,2.544,618,3.227,619,2.544,620,2.544,621,3.227,622,2.544,623,3.227,624,3.544,625,3.931,626,2.544,627,2.544,628,3.227,629,3.544,630,2.544,631,3.544,632,3.544,633,3.227,634,3.544,635,2.544,636,3.728,637,2.544,638,2.225,639,2.544,640,2.225,641,2.544,642,2.544,643,2.544,644,3.544,645,3.544,646,2.544,647,2.544,648,2.544,649,2.544,650,2.544,651,2.544,652,2.544,653,2.544,654,2.225,655,2.544,656,2.544]],["title/directives/DroppableDirective.html",[17,0.249,531,1.625]],["body/directives/DroppableDirective.html",[0,0.099,3,0.468,4,0.402,5,0.402,6,0.583,7,0.402,9,0.402,10,1.127,13,0.937,14,0.689,15,0.043,16,0.554,17,0.366,18,0.777,19,0.823,20,0.823,21,0.875,22,1.039,23,0.717,24,0.884,26,0.823,31,0.777,32,0.34,39,0.7,40,0.796,45,0.796,47,0.612,50,0.612,52,1.013,53,0.612,59,0.616,60,0.524,61,0.538,62,0.612,63,0.612,64,0.612,65,0.677,67,0.717,79,0.612,81,0.913,82,0.903,83,0.524,90,0.726,92,0.609,94,0.34,96,0.796,100,0.762,101,1.013,104,0.777,112,0.402,117,0.7,118,0.7,119,0.796,120,0.7,121,0.796,122,0.717,126,0.823,128,0.823,131,0.7,132,0.777,170,0.903,172,0.7,177,0.823,192,0.971,209,0.796,210,0.884,211,0.777,213,0.884,215,0.612,217,0.995,231,0.796,259,0.612,260,0.468,261,0.884,265,0.612,268,0.937,287,0.937,316,0.796,317,0.971,318,0.796,320,0.7,321,0.612,368,0.796,371,0.884,378,0.7,397,0.612,409,0.612,522,0.023,523,0.03,524,0.023,531,2.39,536,2.074,537,2.372,538,3.085,539,3.085,541,4.027,587,1.837,588,2.372,589,3.429,590,2.372,591,1.837,592,2.999,593,3.764,594,2.372,595,2.372,596,2.698,597,3.085,598,3.429,599,2.372,600,2.989,601,2.698,602,3.176,603,2.999,604,3.085,605,3.176,606,3.085,607,3.631,608,3.429,609,3.085,610,3.429,611,3.085,612,3.429,613,2.372,614,2.372,615,2.372,616,2.074,617,3.429,618,3.085,619,2.372,620,2.372,621,3.085,622,2.372,623,3.085,624,3.429,625,3.859,626,2.372,627,2.372,628,3.085,629,3.429,630,2.372,631,3.429,632,3.429,633,3.085,634,3.429,635,2.372,636,3.631,637,2.372,638,2.074,639,2.372,640,2.074,641,2.372,642,2.372,643,2.372,644,3.429,645,3.429,646,2.372,647,2.372,648,2.372,649,2.372,650,2.372,651,2.372,652,2.372,653,2.372,654,2.074,655,2.372,656,2.372,657,3.374,658,4.388,659,2.769,660,2.769,661,3.374,662,3.374,663,3.374,664,3.374,665,3.374,666,3.374,667,3.374]],["title/interfaces/GhostElementCreatedEvent.html",[0,0.088,89,0.685]],["body/interfaces/GhostElementCreatedEvent.html",[0,0.158,1,0.93,2,0.392,3,0.3,4,0.258,5,0.258,6,0.218,7,0.329,8,0.497,9,0.258,10,0.825,11,1.297,12,1.297,13,1.07,14,0.542,15,0.043,16,0.511,17,0.268,18,0.513,19,0.513,20,0.513,21,0.759,22,0.864,23,0.76,24,0.583,25,0.825,26,0.513,27,0.825,28,0.555,29,0.825,30,0.825,31,0.513,32,0.218,33,1.095,34,0.658,35,0.882,36,0.986,37,0.825,38,0.986,39,0.345,40,0.583,41,0.555,42,0.555,43,0.555,44,0.555,45,0.392,46,1.167,47,0.696,48,0.825,49,0.555,50,0.392,51,0.555,52,0.696,53,0.392,54,1.095,55,0.555,56,1.092,57,0.497,58,0.739,59,0.384,60,0.507,61,0.345,62,0.392,63,0.392,64,0.392,65,0.76,66,0.882,67,0.767,68,0.658,69,0.497,70,1.092,71,0.497,72,1.092,73,0.497,74,0.497,75,1.092,76,0.739,77,1.258,78,0.786,79,0.392,80,0.739,81,0.9,82,0.9,83,0.669,84,1.223,85,1.301,86,0.882,87,0.825,88,0.825,89,0.739,90,0.696,91,1.267,92,0.3,93,0.442,94,0.324,95,0.442,96,0.392,97,0.555,98,0.497,99,0.555,100,0.3,101,0.583,102,0.739,103,0.825,104,0.808,105,0.497,106,0.555,107,0.497,108,0.497,109,0.739,110,0.977,111,0.555,112,0.458,113,0.882,114,0.739,115,0.497,116,0.555,117,0.678,118,0.345,119,0.392,120,0.513,121,0.583,122,0.685,123,0.882,124,0.345,125,0.555,126,0.345,127,0.497,128,0.725,129,0.497,130,0.555,131,0.513,132,0.345,133,0.555,134,0.442,135,1.223,136,0.497,137,0.442,138,0.497,139,0.555,140,0.497,141,0.555,142,0.555,143,0.555,144,0.497,145,0.555,146,0.555,147,0.555,148,0.658,149,0.497,150,0.497,151,0.497,152,0.555,153,0.555,154,0.555,155,0.739,156,0.739,157,0.497,158,0.555,159,0.442,160,0.497,161,0.555,162,0.882,163,1.267,164,1.134,165,0.825,166,0.825,167,0.555,168,0.555,169,0.497,170,0.759,171,0.739,172,0.612,173,0.497,174,0.555,175,0.555,176,0.497,177,0.863,178,0.392,179,0.497,180,0.497,181,0.555,182,0.555,183,0.497,184,0.442,185,0.497,186,0.497,187,0.497,188,1.134,189,0.555,190,0.986,191,0.555,192,1.068,193,0.555,194,0.825,195,1.483,196,0.739,197,0.739,198,0.825,199,0.825,200,0.825,201,0.825,202,0.825,203,0.825,204,0.555,205,0.825,206,0.825,207,1.258,208,0.497,209,0.392,210,0.392,211,0.345,212,0.555,213,0.696,214,0.555,215,0.392,216,0.825,217,1.074,218,0.555,219,0.555,220,0.825,221,0.555,222,0.497,223,0.555,224,0.555,225,0.555,226,0.497,227,0.555,228,0.497,229,0.555,230,0.825,231,0.97,232,0.555,233,0.497,234,0.497,235,0.392,236,0.555,237,0.497,238,0.825,239,0.555,240,0.555,241,0.497,242,0.555,243,0.555,244,0.555,245,0.555,246,0.497,247,0.825,248,1.092,249,1.092,250,1.167,251,0.739,252,0.825,253,0.986,254,0.555,255,1.167,256,1.092,257,0.825,258,0.555,259,0.824,260,0.3,261,1.029,262,0.555,263,0.555,264,0.555,265,0.771,266,0.555,267,0.986,268,0.824,269,0.555,270,0.555,271,0.555,272,0.555,273,0.555,274,0.555,275,0.555,276,0.555,277,1.092,278,0.825,279,0.555,280,1.092,281,0.825,282,0.555,283,0.555,284,0.555,285,0.555,286,0.555,287,0.696,288,0.555,289,0.986,290,0.986,291,0.986,292,0.555,293,0.986,294,0.986,295,0.555,296,0.986,297,0.825,298,0.825,299,0.825,300,0.555,301,0.825,302,0.825,303,0.555,304,0.825,305,0.825,306,0.555,307,0.555,308,0.555,309,0.986,310,0.555,311,0.555,312,0.555,313,0.555,314,0.555,315,0.555,316,0.392,317,0.583,318,0.583,319,0.555,320,0.345,321,0.392,322,1.092,323,0.555,324,0.555,325,1.092,326,1.223,327,0.825,328,0.555,329,0.555,330,0.555,331,0.555,332,0.986,333,0.555,334,0.825,335,0.555,336,0.497,337,0.497,338,0.555,339,0.555,340,0.555,341,0.555,342,0.555,343,0.555,344,0.555,345,0.555,346,0.825,347,0.555,348,0.555,349,0.555,350,0.555,351,0.555,352,0.825,353,0.555,354,0.555,355,0.555,356,0.825,357,0.555,358,0.555,359,0.555,360,0.555,361,0.555,362,0.986,363,0.555,364,0.825,365,0.555,366,0.555,367,0.555,368,0.696,369,0.555,370,0.555,371,0.392,372,0.555,373,0.555,374,0.555,375,0.555,376,0.555,377,0.555,378,0.513,379,0.555,380,0.555,381,0.555,382,0.555,383,0.555,384,0.555,385,0.555,386,0.555,387,0.555,388,0.555,389,0.555,390,0.555,391,0.555,392,0.555,393,0.555,394,0.555,395,0.555,396,0.555,397,0.392,398,0.825,399,0.555,400,0.555,401,0.555,402,0.555,403,0.555,404,1.092,405,0.986,406,0.555,407,0.555,408,0.555,409,0.919,410,0.555,411,0.555,412,0.555,413,0.555,414,0.555,415,0.555,416,0.825,417,0.555,418,0.555,419,0.555,420,0.555,421,0.555,422,0.555,423,0.825,424,1.223,425,0.825,426,0.825,427,0.555,428,0.555,429,0.825,430,0.825,431,0.825,432,0.555,433,0.986,434,0.825,435,0.555,436,1.167,437,1.092,438,1.092,439,1.223,440,0.986,441,0.986,442,0.555,443,1.167,444,0.555,445,0.825,446,0.555,447,0.555,448,0.555,449,0.555,450,0.555,451,0.555,452,0.555,453,0.986,454,0.555,455,0.825,456,0.825,457,0.555,458,0.555,459,0.825,460,0.825,461,0.555,462,0.555,463,0.555,464,0.555,465,0.555,466,0.555,467,0.555,468,0.555,469,0.555,470,0.555,471,0.555,472,0.555,473,0.825,474,0.555,475,0.497,476,0.825,477,0.555,478,0.555,479,0.555,480,0.555,481,0.555,482,0.555,483,0.555,484,0.555,485,0.555,486,0.555,487,0.555,488,0.555,489,0.555,490,0.555,491,0.555,492,0.555,493,0.555,494,0.825,495,0.825,496,0.825,497,0.825,498,0.825,499,0.825,500,0.497,501,0.825,502,0.825,503,0.555,504,0.555,505,0.555,506,0.825,507,0.739,508,0.555,509,0.555,510,0.555,511,1.092,512,0.825,513,0.555,514,0.555,515,0.555,516,0.825,517,0.555,518,0.555,519,0.825,520,0.555,521,0.555,522,0.015,523,0.022,524,0.015]],["title/interfaces/PointerEvent.html",[0,0.088,80,0.685]],["body/interfaces/PointerEvent.html",[0,0.158,1,0.93,2,0.391,3,0.3,4,0.258,5,0.258,6,0.218,7,0.329,8,0.496,9,0.258,10,0.825,11,1.296,12,1.296,13,1.07,14,0.542,15,0.043,16,0.511,17,0.268,18,0.512,19,0.512,20,0.512,21,0.759,22,0.863,23,0.76,24,0.582,25,0.825,26,0.512,27,0.825,28,0.554,29,0.825,30,0.825,31,0.512,32,0.218,33,1.094,34,0.658,35,0.881,36,0.985,37,0.825,38,0.985,39,0.344,40,0.582,41,0.554,42,0.554,43,0.554,44,0.554,45,0.391,46,1.166,47,0.696,48,0.825,49,0.554,50,0.391,51,0.554,52,0.696,53,0.391,54,1.094,55,0.554,56,1.091,57,0.496,58,0.738,59,0.383,60,0.507,61,0.344,62,0.391,63,0.391,64,0.391,65,0.76,66,0.881,67,0.767,68,0.658,69,0.496,70,1.091,71,0.496,72,1.091,73,0.496,74,0.496,75,1.091,76,0.738,77,1.257,78,0.785,79,0.391,80,0.881,81,0.899,82,0.899,83,0.68,84,1.301,85,1.353,86,0.881,87,0.825,88,0.825,89,0.496,90,0.689,91,1.166,92,0.3,93,0.442,94,0.324,95,0.442,96,0.391,97,0.554,98,0.496,99,0.554,100,0.3,101,0.582,102,0.738,103,0.825,104,0.808,105,0.496,106,0.554,107,0.496,108,0.496,109,0.738,110,0.976,111,0.554,112,0.458,113,0.881,114,0.738,115,0.496,116,0.554,117,0.677,118,0.344,119,0.391,120,0.512,121,0.582,122,0.684,123,0.881,124,0.344,125,0.554,126,0.344,127,0.496,128,0.724,129,0.496,130,0.554,131,0.512,132,0.344,133,0.554,134,0.442,135,1.223,136,0.496,137,0.442,138,0.496,139,0.554,140,0.496,141,0.554,142,0.554,143,0.554,144,0.496,145,0.554,146,0.554,147,0.554,148,0.658,149,0.496,150,0.496,151,0.496,152,0.554,153,0.554,154,0.554,155,0.738,156,0.738,157,0.496,158,0.554,159,0.442,160,0.496,161,0.554,162,0.881,163,1.266,164,1.133,165,0.825,166,0.825,167,0.554,168,0.554,169,0.496,170,0.759,171,0.738,172,0.612,173,0.496,174,0.554,175,0.554,176,0.496,177,0.863,178,0.391,179,0.496,180,0.496,181,0.554,182,0.554,183,0.496,184,0.442,185,0.496,186,0.496,187,0.496,188,1.133,189,0.554,190,0.985,191,0.554,192,1.068,193,0.554,194,0.825,195,1.483,196,0.738,197,0.738,198,0.825,199,0.825,200,0.825,201,0.825,202,0.825,203,0.825,204,0.554,205,0.825,206,0.825,207,1.257,208,0.496,209,0.391,210,0.391,211,0.344,212,0.554,213,0.696,214,0.554,215,0.391,216,0.825,217,1.074,218,0.554,219,0.554,220,0.825,221,0.554,222,0.496,223,0.554,224,0.554,225,0.554,226,0.496,227,0.554,228,0.496,229,0.554,230,0.825,231,0.97,232,0.554,233,0.496,234,0.496,235,0.391,236,0.554,237,0.496,238,0.825,239,0.554,240,0.554,241,0.496,242,0.554,243,0.554,244,0.554,245,0.554,246,0.496,247,0.825,248,1.091,249,1.091,250,1.166,251,0.738,252,0.825,253,0.985,254,0.554,255,1.166,256,1.091,257,0.825,258,0.554,259,0.824,260,0.3,261,1.029,262,0.554,263,0.554,264,0.554,265,0.771,266,0.554,267,0.985,268,0.824,269,0.554,270,0.554,271,0.554,272,0.554,273,0.554,274,0.554,275,0.554,276,0.554,277,1.091,278,0.825,279,0.554,280,1.091,281,0.825,282,0.554,283,0.554,284,0.554,285,0.554,286,0.554,287,0.696,288,0.554,289,0.985,290,0.985,291,0.985,292,0.554,293,0.985,294,0.985,295,0.554,296,0.985,297,0.825,298,0.825,299,0.825,300,0.554,301,0.825,302,0.825,303,0.554,304,0.825,305,0.825,306,0.554,307,0.554,308,0.554,309,0.985,310,0.554,311,0.554,312,0.554,313,0.554,314,0.554,315,0.554,316,0.391,317,0.582,318,0.582,319,0.554,320,0.344,321,0.391,322,1.091,323,0.554,324,0.554,325,1.091,326,1.223,327,0.825,328,0.554,329,0.554,330,0.554,331,0.554,332,0.985,333,0.554,334,0.825,335,0.554,336,0.496,337,0.496,338,0.554,339,0.554,340,0.554,341,0.554,342,0.554,343,0.554,344,0.554,345,0.554,346,0.825,347,0.554,348,0.554,349,0.554,350,0.554,351,0.554,352,0.825,353,0.554,354,0.554,355,0.554,356,0.825,357,0.554,358,0.554,359,0.554,360,0.554,361,0.554,362,0.985,363,0.554,364,0.825,365,0.554,366,0.554,367,0.554,368,0.696,369,0.554,370,0.554,371,0.391,372,0.554,373,0.554,374,0.554,375,0.554,376,0.554,377,0.554,378,0.512,379,0.554,380,0.554,381,0.554,382,0.554,383,0.554,384,0.554,385,0.554,386,0.554,387,0.554,388,0.554,389,0.554,390,0.554,391,0.554,392,0.554,393,0.554,394,0.554,395,0.554,396,0.554,397,0.391,398,0.825,399,0.554,400,0.554,401,0.554,402,0.554,403,0.554,404,1.091,405,0.985,406,0.554,407,0.554,408,0.554,409,0.919,410,0.554,411,0.554,412,0.554,413,0.554,414,0.554,415,0.554,416,0.825,417,0.554,418,0.554,419,0.554,420,0.554,421,0.554,422,0.554,423,0.825,424,1.223,425,0.825,426,0.825,427,0.554,428,0.554,429,0.825,430,0.825,431,0.825,432,0.554,433,0.985,434,0.825,435,0.554,436,1.166,437,1.091,438,1.091,439,1.223,440,0.985,441,0.985,442,0.554,443,1.166,444,0.554,445,0.825,446,0.554,447,0.554,448,0.554,449,0.554,450,0.554,451,0.554,452,0.554,453,0.985,454,0.554,455,0.825,456,0.825,457,0.554,458,0.554,459,0.825,460,0.825,461,0.554,462,0.554,463,0.554,464,0.554,465,0.554,466,0.554,467,0.554,468,0.554,469,0.554,470,0.554,471,0.554,472,0.554,473,0.825,474,0.554,475,0.496,476,0.825,477,0.554,478,0.554,479,0.554,480,0.554,481,0.554,482,0.554,483,0.554,484,0.554,485,0.554,486,0.554,487,0.554,488,0.554,489,0.554,490,0.554,491,0.554,492,0.554,493,0.554,494,0.825,495,0.825,496,0.825,497,0.825,498,0.825,499,0.825,500,0.496,501,0.825,502,0.825,503,0.554,504,0.554,505,0.554,506,0.825,507,0.738,508,0.554,509,0.554,510,0.554,511,1.091,512,0.825,513,0.554,514,0.554,515,0.554,516,0.825,517,0.554,518,0.554,519,0.825,520,0.554,521,0.554,522,0.015,523,0.022,524,0.015]],["title/interfaces/SnapGrid.html",[0,0.088,68,0.611]],["body/interfaces/SnapGrid.html",[0,0.158,1,0.931,2,0.392,3,0.3,4,0.258,5,0.258,6,0.218,7,0.329,8,0.497,9,0.258,10,0.826,11,1.317,12,1.317,13,1.07,14,0.507,15,0.043,16,0.511,17,0.268,18,0.513,19,0.513,20,0.513,21,0.76,22,0.864,23,0.76,24,0.583,25,0.826,26,0.513,27,0.826,28,0.555,29,0.826,30,0.826,31,0.76,32,0.218,33,1.095,34,0.659,35,0.883,36,0.986,37,0.826,38,0.986,39,0.345,40,0.583,41,0.555,42,0.555,43,0.555,44,0.555,45,0.392,46,1.167,47,0.697,48,0.826,49,0.555,50,0.392,51,0.555,52,0.697,53,0.392,54,1.095,55,0.555,56,1.092,57,0.497,58,0.739,59,0.384,60,0.507,61,0.345,62,0.392,63,0.392,64,0.392,65,0.76,66,0.883,67,0.767,68,0.786,69,0.497,70,1.092,71,0.497,72,1.092,73,0.497,74,0.497,75,1.092,76,0.739,77,1.258,78,0.786,79,0.392,80,0.739,81,0.881,82,0.881,83,0.669,84,1.224,85,1.302,86,0.883,87,0.826,88,0.826,89,0.497,90,0.689,91,1.167,92,0.3,93,0.443,94,0.324,95,0.443,96,0.392,97,0.555,98,0.497,99,0.555,100,0.3,101,0.583,102,0.739,103,0.826,104,0.808,105,0.497,106,0.555,107,0.497,108,0.497,109,0.739,110,0.977,111,0.555,112,0.458,113,0.883,114,0.739,115,0.497,116,0.555,117,0.678,118,0.345,119,0.392,120,0.513,121,0.583,122,0.685,123,0.883,124,0.345,125,0.555,126,0.345,127,0.497,128,0.725,129,0.497,130,0.555,131,0.513,132,0.345,133,0.555,134,0.443,135,1.224,136,0.497,137,0.443,138,0.497,139,0.555,140,0.497,141,0.555,142,0.555,143,0.555,144,0.497,145,0.555,146,0.555,147,0.555,148,0.659,149,0.497,150,0.497,151,0.497,152,0.555,153,0.555,154,0.555,155,0.739,156,0.739,157,0.497,158,0.555,159,0.443,160,0.497,161,0.555,162,0.883,163,1.267,164,1.134,165,0.826,166,0.826,167,0.555,168,0.555,169,0.497,170,0.76,171,0.739,172,0.612,173,0.497,174,0.555,175,0.555,176,0.497,177,0.864,178,0.392,179,0.497,180,0.497,181,0.555,182,0.555,183,0.497,184,0.443,185,0.497,186,0.497,187,0.497,188,1.134,189,0.555,190,0.986,191,0.555,192,1.068,193,0.555,194,0.826,195,1.483,196,0.739,197,0.739,198,0.826,199,0.826,200,0.826,201,0.826,202,0.826,203,0.826,204,0.555,205,0.826,206,0.826,207,1.258,208,0.497,209,0.392,210,0.392,211,0.345,212,0.555,213,0.697,214,0.555,215,0.392,216,0.826,217,1.074,218,0.555,219,0.555,220,0.826,221,0.555,222,0.497,223,0.555,224,0.555,225,0.555,226,0.497,227,0.555,228,0.497,229,0.555,230,0.826,231,0.97,232,0.555,233,0.497,234,0.497,235,0.392,236,0.555,237,0.497,238,0.826,239,0.555,240,0.555,241,0.497,242,0.555,243,0.555,244,0.555,245,0.555,246,0.497,247,0.826,248,1.092,249,1.092,250,1.167,251,0.739,252,0.826,253,0.986,254,0.555,255,1.167,256,1.092,257,0.826,258,0.555,259,0.824,260,0.3,261,1.029,262,0.555,263,0.555,264,0.555,265,0.771,266,0.555,267,0.986,268,0.824,269,0.555,270,0.555,271,0.555,272,0.555,273,0.555,274,0.555,275,0.555,276,0.555,277,1.092,278,0.826,279,0.555,280,1.092,281,0.826,282,0.555,283,0.555,284,0.555,285,0.555,286,0.555,287,0.697,288,0.555,289,0.986,290,0.986,291,0.986,292,0.555,293,0.986,294,0.986,295,0.555,296,0.986,297,0.826,298,0.826,299,0.826,300,0.555,301,0.826,302,0.826,303,0.555,304,0.826,305,0.826,306,0.555,307,0.555,308,0.555,309,0.986,310,0.555,311,0.555,312,0.555,313,0.555,314,0.555,315,0.555,316,0.392,317,0.583,318,0.583,319,0.555,320,0.345,321,0.392,322,1.092,323,0.555,324,0.555,325,1.092,326,1.224,327,0.826,328,0.555,329,0.555,330,0.555,331,0.555,332,0.986,333,0.555,334,0.826,335,0.555,336,0.497,337,0.497,338,0.555,339,0.555,340,0.555,341,0.555,342,0.555,343,0.555,344,0.555,345,0.555,346,0.826,347,0.555,348,0.555,349,0.555,350,0.555,351,0.555,352,0.826,353,0.555,354,0.555,355,0.555,356,0.826,357,0.555,358,0.555,359,0.555,360,0.555,361,0.555,362,0.986,363,0.555,364,0.826,365,0.555,366,0.555,367,0.555,368,0.697,369,0.555,370,0.555,371,0.392,372,0.555,373,0.555,374,0.555,375,0.555,376,0.555,377,0.555,378,0.513,379,0.555,380,0.555,381,0.555,382,0.555,383,0.555,384,0.555,385,0.555,386,0.555,387,0.555,388,0.555,389,0.555,390,0.555,391,0.555,392,0.555,393,0.555,394,0.555,395,0.555,396,0.555,397,0.392,398,0.826,399,0.555,400,0.555,401,0.555,402,0.555,403,0.555,404,1.092,405,0.986,406,0.555,407,0.555,408,0.555,409,0.919,410,0.555,411,0.555,412,0.555,413,0.555,414,0.555,415,0.555,416,0.826,417,0.555,418,0.555,419,0.555,420,0.555,421,0.555,422,0.555,423,0.826,424,1.224,425,0.826,426,0.826,427,0.555,428,0.555,429,0.826,430,0.826,431,0.826,432,0.555,433,0.986,434,0.826,435,0.555,436,1.167,437,1.092,438,1.092,439,1.224,440,0.986,441,0.986,442,0.555,443,1.167,444,0.555,445,0.826,446,0.555,447,0.555,448,0.555,449,0.555,450,0.555,451,0.555,452,0.555,453,0.986,454,0.555,455,0.826,456,0.826,457,0.555,458,0.555,459,0.826,460,0.826,461,0.555,462,0.555,463,0.555,464,0.555,465,0.555,466,0.555,467,0.555,468,0.555,469,0.555,470,0.555,471,0.555,472,0.555,473,0.826,474,0.555,475,0.497,476,0.826,477,0.555,478,0.555,479,0.555,480,0.555,481,0.555,482,0.555,483,0.555,484,0.555,485,0.555,486,0.555,487,0.555,488,0.555,489,0.555,490,0.555,491,0.555,492,0.555,493,0.555,494,0.826,495,0.826,496,0.826,497,0.826,498,0.826,499,0.826,500,0.497,501,0.826,502,0.826,503,0.555,504,0.555,505,0.555,506,0.826,507,0.739,508,0.555,509,0.555,510,0.555,511,1.092,512,0.826,513,0.555,514,0.555,515,0.555,516,0.826,517,0.555,518,0.555,519,0.826,520,0.555,521,0.555,522,0.015,523,0.022,524,0.015]],["title/interfaces/TimeLongPress.html",[0,0.088,86,0.685]],["body/interfaces/TimeLongPress.html",[0,0.158,1,0.931,2,0.393,3,0.301,4,0.258,5,0.258,6,0.218,7,0.329,8,0.498,9,0.258,10,0.827,11,1.297,12,1.297,13,1.07,14,0.508,15,0.043,16,0.512,17,0.268,18,0.513,19,0.513,20,0.513,21,0.76,22,0.865,23,0.76,24,0.584,25,0.827,26,0.513,27,0.827,28,0.556,29,0.827,30,0.827,31,0.513,32,0.218,33,1.095,34,0.659,35,0.883,36,0.987,37,0.827,38,0.987,39,0.345,40,0.584,41,0.556,42,0.556,43,0.556,44,0.556,45,0.393,46,1.168,47,0.697,48,0.827,49,0.556,50,0.393,51,0.556,52,0.697,53,0.393,54,1.095,55,0.556,56,1.093,57,0.498,58,0.74,59,0.384,60,0.508,61,0.345,62,0.393,63,0.393,64,0.393,65,0.76,66,0.883,67,0.767,68,0.659,69,0.498,70,1.093,71,0.498,72,1.093,73,0.498,74,0.498,75,1.093,76,0.74,77,1.258,78,0.787,79,0.393,80,0.74,81,0.881,82,0.881,83,0.669,84,1.224,85,1.302,86,0.978,87,1.168,88,1.168,89,0.498,90,0.689,91,1.168,92,0.301,93,0.443,94,0.325,95,0.443,96,0.393,97,0.556,98,0.498,99,0.556,100,0.301,101,0.584,102,0.74,103,0.827,104,0.809,105,0.498,106,0.556,107,0.498,108,0.498,109,0.74,110,0.978,111,0.556,112,0.459,113,0.883,114,0.74,115,0.498,116,0.556,117,0.679,118,0.345,119,0.393,120,0.513,121,0.584,122,0.685,123,0.883,124,0.345,125,0.556,126,0.345,127,0.498,128,0.725,129,0.498,130,0.556,131,0.513,132,0.345,133,0.556,134,0.443,135,1.224,136,0.498,137,0.443,138,0.498,139,0.556,140,0.498,141,0.556,142,0.556,143,0.556,144,0.498,145,0.556,146,0.556,147,0.556,148,0.659,149,0.498,150,0.498,151,0.498,152,0.556,153,0.556,154,0.556,155,0.74,156,0.74,157,0.498,158,0.556,159,0.443,160,0.498,161,0.556,162,0.883,163,1.268,164,1.134,165,0.827,166,0.827,167,0.556,168,0.556,169,0.498,170,0.76,171,0.74,172,0.613,173,0.498,174,0.556,175,0.556,176,0.498,177,0.864,178,0.393,179,0.498,180,0.498,181,0.556,182,0.556,183,0.498,184,0.443,185,0.498,186,0.498,187,0.498,188,1.134,189,0.556,190,0.987,191,0.556,192,1.068,193,0.556,194,0.827,195,1.483,196,0.74,197,0.74,198,0.827,199,0.827,200,0.827,201,0.827,202,0.827,203,0.827,204,0.556,205,0.827,206,0.827,207,1.258,208,0.498,209,0.393,210,0.393,211,0.345,212,0.556,213,0.697,214,0.556,215,0.393,216,0.827,217,1.074,218,0.556,219,0.556,220,0.827,221,0.556,222,0.498,223,0.556,224,0.556,225,0.556,226,0.498,227,0.556,228,0.498,229,0.556,230,0.827,231,0.971,232,0.556,233,0.498,234,0.498,235,0.393,236,0.556,237,0.498,238,0.827,239,0.556,240,0.556,241,0.498,242,0.556,243,0.556,244,0.556,245,0.556,246,0.498,247,0.827,248,1.093,249,1.093,250,1.168,251,0.74,252,0.827,253,0.987,254,0.556,255,1.168,256,1.093,257,0.827,258,0.556,259,0.825,260,0.301,261,1.029,262,0.556,263,0.556,264,0.556,265,0.772,266,0.556,267,0.987,268,0.825,269,0.556,270,0.556,271,0.556,272,0.556,273,0.556,274,0.556,275,0.556,276,0.556,277,1.093,278,0.827,279,0.556,280,1.093,281,0.827,282,0.556,283,0.556,284,0.556,285,0.556,286,0.556,287,0.697,288,0.556,289,0.987,290,0.987,291,0.987,292,0.556,293,0.987,294,0.987,295,0.556,296,0.987,297,0.827,298,0.827,299,0.827,300,0.556,301,0.827,302,0.827,303,0.556,304,0.827,305,0.827,306,0.556,307,0.556,308,0.556,309,0.987,310,0.556,311,0.556,312,0.556,313,0.556,314,0.556,315,0.556,316,0.393,317,0.584,318,0.584,319,0.556,320,0.345,321,0.393,322,1.093,323,0.556,324,0.556,325,1.093,326,1.224,327,0.827,328,0.556,329,0.556,330,0.556,331,0.556,332,0.987,333,0.556,334,0.827,335,0.556,336,0.498,337,0.498,338,0.556,339,0.556,340,0.556,341,0.556,342,0.556,343,0.556,344,0.556,345,0.556,346,0.827,347,0.556,348,0.556,349,0.556,350,0.556,351,0.556,352,0.827,353,0.556,354,0.556,355,0.556,356,0.827,357,0.556,358,0.556,359,0.556,360,0.556,361,0.556,362,0.987,363,0.556,364,0.827,365,0.556,366,0.556,367,0.556,368,0.697,369,0.556,370,0.556,371,0.393,372,0.556,373,0.556,374,0.556,375,0.556,376,0.556,377,0.556,378,0.513,379,0.556,380,0.556,381,0.556,382,0.556,383,0.556,384,0.556,385,0.556,386,0.556,387,0.556,388,0.556,389,0.556,390,0.556,391,0.556,392,0.556,393,0.556,394,0.556,395,0.556,396,0.556,397,0.393,398,0.827,399,0.556,400,0.556,401,0.556,402,0.556,403,0.556,404,1.093,405,0.987,406,0.556,407,0.556,408,0.556,409,0.92,410,0.556,411,0.556,412,0.556,413,0.556,414,0.556,415,0.556,416,0.827,417,0.556,418,0.556,419,0.556,420,0.556,421,0.556,422,0.556,423,0.827,424,1.224,425,0.827,426,0.827,427,0.556,428,0.556,429,0.827,430,0.827,431,0.827,432,0.556,433,0.987,434,0.827,435,0.556,436,1.168,437,1.093,438,1.093,439,1.224,440,0.987,441,0.987,442,0.556,443,1.168,444,0.556,445,0.827,446,0.556,447,0.556,448,0.556,449,0.556,450,0.556,451,0.556,452,0.556,453,0.987,454,0.556,455,0.827,456,0.827,457,0.556,458,0.556,459,0.827,460,0.827,461,0.556,462,0.556,463,0.556,464,0.556,465,0.556,466,0.556,467,0.556,468,0.556,469,0.556,470,0.556,471,0.556,472,0.556,473,0.827,474,0.556,475,0.498,476,0.827,477,0.556,478,0.556,479,0.556,480,0.556,481,0.556,482,0.556,483,0.556,484,0.556,485,0.556,486,0.556,487,0.556,488,0.556,489,0.556,490,0.556,491,0.556,492,0.556,493,0.556,494,0.827,495,0.827,496,0.827,497,0.827,498,0.827,499,0.827,500,0.498,501,0.827,502,0.827,503,0.556,504,0.556,505,0.556,506,0.827,507,0.74,508,0.556,509,0.556,510,0.556,511,1.093,512,0.827,513,0.556,514,0.556,515,0.556,516,0.827,517,0.556,518,0.556,519,0.827,520,0.556,521,0.556,522,0.015,523,0.022,524,0.015]],["title/interfaces/ValidateDragParams.html",[0,0.088,76,0.685]],["body/interfaces/ValidateDragParams.html",[0,0.158,1,0.976,2,0.393,3,0.301,4,0.259,5,0.259,6,0.219,7,0.329,8,0.498,9,0.259,10,0.827,11,1.297,12,1.297,13,1.061,14,0.543,15,0.043,16,0.512,17,0.268,18,0.514,19,0.514,20,0.514,21,0.76,22,0.865,23,0.76,24,0.584,25,0.827,26,0.514,27,0.827,28,0.557,29,0.827,30,0.827,31,0.514,32,0.219,33,1.096,34,0.66,35,0.884,36,0.987,37,0.827,38,0.987,39,0.346,40,0.584,41,0.557,42,0.557,43,0.557,44,0.557,45,0.393,46,1.168,47,0.697,48,0.827,49,0.557,50,0.393,51,0.557,52,0.697,53,0.393,54,1.096,55,0.557,56,1.093,57,0.498,58,0.74,59,0.384,60,0.508,61,0.346,62,0.393,63,0.393,64,0.393,65,0.76,66,0.884,67,0.767,68,0.66,69,0.498,70,1.168,71,0.498,72,1.093,73,0.498,74,0.498,75,1.093,76,0.884,77,1.289,78,0.787,79,0.393,80,0.74,81,0.881,82,0.881,83,0.669,84,1.224,85,1.303,86,0.884,87,0.827,88,0.827,89,0.498,90,0.689,91,1.168,92,0.301,93,0.444,94,0.325,95,0.444,96,0.393,97,0.557,98,0.498,99,0.557,100,0.301,101,0.584,102,0.74,103,0.827,104,0.809,105,0.498,106,0.557,107,0.498,108,0.498,109,0.74,110,0.978,111,0.557,112,0.459,113,0.884,114,0.74,115,0.498,116,0.557,117,0.679,118,0.346,119,0.393,120,0.514,121,0.584,122,0.685,123,0.884,124,0.346,125,0.557,126,0.346,127,0.498,128,0.725,129,0.498,130,0.557,131,0.514,132,0.346,133,0.557,134,0.444,135,1.224,136,0.498,137,0.444,138,0.498,139,0.557,140,0.498,141,0.557,142,0.557,143,0.557,144,0.498,145,0.557,146,0.557,147,0.557,148,0.66,149,0.498,150,0.498,151,0.498,152,0.557,153,0.557,154,0.557,155,0.74,156,0.74,157,0.498,158,0.557,159,0.444,160,0.498,161,0.557,162,0.884,163,1.268,164,1.135,165,0.827,166,0.827,167,0.557,168,0.557,169,0.498,170,0.76,171,0.74,172,0.613,173,0.498,174,0.557,175,0.557,176,0.498,177,0.864,178,0.393,179,0.498,180,0.498,181,0.557,182,0.557,183,0.498,184,0.444,185,0.498,186,0.498,187,0.498,188,1.135,189,0.557,190,0.987,191,0.557,192,1.068,193,0.557,194,0.827,195,1.483,196,0.74,197,0.74,198,0.827,199,0.827,200,0.827,201,0.827,202,0.827,203,0.827,204,0.557,205,0.827,206,0.827,207,1.258,208,0.498,209,0.393,210,0.393,211,0.346,212,0.557,213,0.697,214,0.557,215,0.393,216,0.827,217,1.074,218,0.557,219,0.557,220,0.827,221,0.557,222,0.498,223,0.557,224,0.557,225,0.557,226,0.498,227,0.557,228,0.498,229,0.557,230,0.827,231,0.971,232,0.557,233,0.498,234,0.498,235,0.393,236,0.557,237,0.498,238,0.827,239,0.557,240,0.557,241,0.498,242,0.557,243,0.557,244,0.557,245,0.557,246,0.498,247,0.827,248,1.093,249,1.093,250,1.168,251,0.74,252,0.827,253,0.987,254,0.557,255,1.168,256,1.093,257,0.827,258,0.557,259,0.825,260,0.301,261,1.03,262,0.557,263,0.557,264,0.557,265,0.772,266,0.557,267,0.987,268,0.825,269,0.557,270,0.557,271,0.557,272,0.557,273,0.557,274,0.557,275,0.557,276,0.557,277,1.093,278,0.827,279,0.557,280,1.093,281,0.827,282,0.557,283,0.557,284,0.557,285,0.557,286,0.557,287,0.697,288,0.557,289,0.987,290,0.987,291,0.987,292,0.557,293,0.987,294,0.987,295,0.557,296,0.987,297,0.827,298,0.827,299,0.827,300,0.557,301,0.827,302,0.827,303,0.557,304,0.827,305,0.827,306,0.557,307,0.557,308,0.557,309,0.987,310,0.557,311,0.557,312,0.557,313,0.557,314,0.557,315,0.557,316,0.393,317,0.584,318,0.584,319,0.557,320,0.346,321,0.393,322,1.093,323,0.557,324,0.557,325,1.093,326,1.224,327,0.827,328,0.557,329,0.557,330,0.557,331,0.557,332,0.987,333,0.557,334,0.827,335,0.557,336,0.498,337,0.498,338,0.557,339,0.557,340,0.557,341,0.557,342,0.557,343,0.557,344,0.557,345,0.557,346,0.827,347,0.557,348,0.557,349,0.557,350,0.557,351,0.557,352,0.827,353,0.557,354,0.557,355,0.557,356,0.827,357,0.557,358,0.557,359,0.557,360,0.557,361,0.557,362,0.987,363,0.557,364,0.827,365,0.557,366,0.557,367,0.557,368,0.697,369,0.557,370,0.557,371,0.393,372,0.557,373,0.557,374,0.557,375,0.557,376,0.557,377,0.557,378,0.514,379,0.557,380,0.557,381,0.557,382,0.557,383,0.557,384,0.557,385,0.557,386,0.557,387,0.557,388,0.557,389,0.557,390,0.557,391,0.557,392,0.557,393,0.557,394,0.557,395,0.557,396,0.557,397,0.393,398,0.827,399,0.557,400,0.557,401,0.557,402,0.557,403,0.557,404,1.093,405,0.987,406,0.557,407,0.557,408,0.557,409,0.92,410,0.557,411,0.557,412,0.557,413,0.557,414,0.557,415,0.557,416,0.827,417,0.557,418,0.557,419,0.557,420,0.557,421,0.557,422,0.557,423,0.827,424,1.224,425,0.827,426,0.827,427,0.557,428,0.557,429,0.827,430,0.827,431,0.827,432,0.557,433,0.987,434,0.827,435,0.557,436,1.168,437,1.093,438,1.093,439,1.224,440,0.987,441,0.987,442,0.557,443,1.168,444,0.557,445,0.827,446,0.557,447,0.557,448,0.557,449,0.557,450,0.557,451,0.557,452,0.557,453,0.987,454,0.557,455,0.827,456,0.827,457,0.557,458,0.557,459,0.827,460,0.827,461,0.557,462,0.557,463,0.557,464,0.557,465,0.557,466,0.557,467,0.557,468,0.557,469,0.557,470,0.557,471,0.557,472,0.557,473,0.827,474,0.557,475,0.498,476,0.827,477,0.557,478,0.557,479,0.557,480,0.557,481,0.557,482,0.557,483,0.557,484,0.557,485,0.557,486,0.557,487,0.557,488,0.557,489,0.557,490,0.557,491,0.557,492,0.557,493,0.557,494,0.827,495,0.827,496,0.827,497,0.827,498,0.827,499,0.827,500,0.498,501,0.827,502,0.827,503,0.557,504,0.557,505,0.557,506,0.827,507,0.74,508,0.557,509,0.557,510,0.557,511,1.093,512,0.827,513,0.557,514,0.557,515,0.557,516,0.827,517,0.557,518,0.557,519,0.827,520,0.557,521,0.557,522,0.015,523,0.022,524,0.015,540,2.645]],["title/interfaces/ValidateDropParams.html",[0,0.088,596,1.834]],["body/interfaces/ValidateDropParams.html",[0,0.105,2,0.647,3,0.495,4,0.425,5,0.425,6,0.36,7,0.382,9,0.425,10,1.168,13,1.039,14,0.629,15,0.043,16,0.562,17,0.379,18,0.725,19,0.725,20,0.725,21,0.888,22,0.988,23,0.732,24,0.825,26,0.725,31,0.725,32,0.36,39,0.725,40,0.825,45,0.825,47,0.647,50,0.647,52,0.908,53,0.647,59,0.543,60,0.543,61,0.568,62,0.647,63,0.647,64,0.647,65,0.695,67,0.732,79,0.647,81,0.945,82,0.941,83,0.597,90,0.71,92,0.495,94,0.36,96,0.647,100,0.786,101,1.027,104,0.798,112,0.425,117,0.725,118,0.568,119,0.647,120,0.568,121,0.647,122,0.631,126,0.725,128,0.725,131,0.568,132,0.568,170,0.841,172,0.841,177,0.841,192,0.988,209,0.647,210,0.647,211,0.568,213,0.647,215,0.647,217,1.01,231,0.825,259,0.647,260,0.495,261,0.908,265,0.647,268,0.956,287,1.039,316,0.825,317,0.988,318,0.825,320,0.725,321,0.647,368,0.825,371,0.908,378,0.841,397,0.647,409,0.647,522,0.024,523,0.031,524,0.024,531,1.942,587,1.942,588,2.507,589,3.197,590,2.507,591,1.942,592,3.079,593,3.83,594,2.507,595,2.507,596,3.079,597,3.707,598,3.916,599,3.52,600,2.727,601,2.193,602,2.796,603,2.193,604,2.507,605,2.796,606,2.507,607,3.197,608,2.507,609,2.507,610,2.507,611,2.507,612,2.507,613,2.507,614,2.507,615,2.507,616,2.193,617,2.507,618,3.197,619,2.507,620,2.507,621,3.197,622,2.507,623,3.197,624,3.52,625,3.916,626,2.507,627,2.507,628,3.197,629,3.52,630,2.507,631,3.52,632,3.52,633,3.197,634,3.52,635,2.507,636,3.707,637,2.507,638,2.193,639,2.507,640,2.193,641,2.507,642,2.507,643,2.507,644,3.52,645,3.52,646,2.507,647,2.507,648,2.507,649,2.507,650,2.507,651,2.507,652,2.507,653,2.507,654,2.193,655,2.507,656,2.507]],["title/changelog.html",[178,0.454,235,0.454,668,2.056]],["body/changelog.html",[1,0.539,2,0.477,5,0.314,7,0.401,9,0.442,11,0.605,12,0.605,14,0.314,15,0.029,16,0.374,17,0.388,21,0.684,23,0.647,34,0.539,39,0.743,54,0.605,60,0.638,68,0.954,77,0.605,78,0.954,83,0.625,90,0.713,93,0.539,94,0.433,100,0.596,102,0.605,105,0.852,108,0.852,109,0.605,110,1.281,112,0.7,113,1.36,114,0.605,115,0.986,118,0.932,120,0.743,122,0.787,123,1.204,124,0.867,126,0.591,127,0.852,129,1.071,131,0.813,132,0.684,134,0.954,136,0.605,137,0.539,140,0.605,144,0.605,148,0.879,149,0.986,151,0.605,155,0.852,157,0.605,159,0.954,160,0.852,162,0.605,164,0.605,169,0.852,170,0.591,172,0.684,173,0.986,176,0.605,177,0.591,179,1.204,180,0.605,184,0.759,185,0.986,186,0.605,187,0.986,196,0.605,197,0.605,207,0.605,208,0.605,211,0.419,222,0.605,226,1.293,228,0.605,233,1.071,234,1.071,237,0.852,241,0.605,246,0.605,260,0.596,336,0.852,337,0.605,475,0.852,522,0.018,523,0.025,524,0.018,525,2.607,526,2.538,539,1.85,563,2.607,565,3.018,566,3.683,567,3.277,570,2.16,573,2.16,575,2.16,581,3.525,591,1.433,600,1.433,601,2.28,602,2.28,603,1.618,616,1.618,638,1.618,640,1.618,654,1.618,668,2.16,669,2.631,670,5.35,671,2.631,672,2.631,673,3.708,674,2.631,675,2.631,676,2.631,677,5.827,678,5.745,679,3.708,680,5.803,681,4.656,682,2.631,683,2.631,684,2.631,685,5.626,686,4.293,687,6.049,688,6.049,689,2.631,690,4.293,691,2.631,692,2.631,693,2.631,694,2.631,695,2.631,696,2.16,697,2.631,698,2.631,699,5.439,700,4.914,701,2.631,702,3.044,703,2.631,704,2.631,705,2.631,706,2.631,707,4.293,708,2.631,709,2.631,710,5.099,711,4.662,712,2.631,713,4.662,714,2.631,715,2.631,716,2.631,717,4.914,718,4.293,719,4.293,720,2.631,721,2.631,722,2.631,723,2.631,724,2.631,725,4.716,726,2.16,727,5.099,728,2.631,729,2.631,730,5.574,731,4.293,732,4.914,733,2.631,734,2.631,735,3.708,736,2.631,737,2.631,738,2.631,739,2.631,740,2.631,741,5.512,742,2.631,743,2.631,744,2.631,745,5.099,746,3.708,747,3.525,748,2.631,749,2.631,750,2.631,751,2.631,752,3.044,753,2.16,754,3.708,755,2.631,756,2.631,757,2.631,758,2.631,759,3.708,760,2.631,761,3.708,762,2.631,763,2.631,764,2.631,765,2.631,766,5.35,767,4.662,768,2.631,769,2.631,770,2.631,771,2.631,772,2.631,773,5.574,774,2.631,775,4.914,776,3.708,777,4.293,778,2.631,779,2.631,780,2.631,781,2.631,782,4.293,783,2.631,784,4.662,785,4.293,786,3.708,787,2.631,788,5.919,789,2.631,790,2.631,791,3.708,792,3.827,793,4.662,794,2.631,795,2.631,796,3.708,797,2.631,798,2.631,799,2.631,800,2.631,801,2.631,802,2.631,803,4.662,804,4.662,805,2.631,806,3.708,807,2.631,808,2.631,809,2.631,810,2.631,811,2.631,812,2.631,813,2.631,814,2.631,815,3.708,816,2.631,817,2.631,818,2.631,819,2.631,820,2.631,821,4.034,822,2.631,823,2.631,824,2.631,825,2.16,826,2.631,827,2.631,828,2.631,829,2.631,830,2.631,831,2.631,832,3.708,833,3.708,834,2.16,835,2.631,836,2.631,837,2.631,838,2.631,839,2.631,840,2.631,841,2.631,842,2.631,843,2.631,844,2.631,845,3.708,846,2.631,847,3.525,848,4.662,849,4.392,850,1.85,851,2.16,852,2.631,853,2.631,854,2.631,855,2.631,856,4.293,857,2.631,858,2.631,859,2.631,860,2.631,861,3.708,862,2.631,863,2.631,864,3.708,865,3.708,866,3.708,867,3.708,868,2.631,869,2.631,870,3.708,871,2.631,872,2.631,873,2.631,874,4.914,875,2.631,876,2.631,877,2.631,878,2.631,879,2.631,880,3.708,881,3.708,882,2.631,883,2.631,884,2.631,885,2.631,886,2.631,887,2.631,888,2.631,889,2.631,890,5.239,891,2.631,892,2.631,893,2.631,894,2.631,895,3.708,896,2.631,897,3.708,898,2.631,899,2.631,900,2.16,901,2.631,902,2.631,903,3.708,904,4.662,905,2.631,906,4.293,907,4.293,908,2.631,909,3.708,910,3.525,911,2.631,912,2.631,913,2.631,914,2.631,915,2.631,916,2.631,917,2.631,918,5.239,919,4.293,920,2.631,921,5.35,922,4.662,923,2.631,924,2.631,925,2.631,926,2.631,927,2.631,928,2.631,929,2.631,930,2.631,931,3.708,932,2.631,933,2.631,934,2.631,935,2.631,936,3.708,937,3.708,938,2.631,939,2.631,940,2.631,941,2.631,942,2.631,943,2.631,944,2.631,945,2.631,946,2.631,947,4.662,948,4.662,949,3.525,950,2.631,951,5.574,952,3.708,953,2.631,954,4.662,955,2.631,956,2.631,957,3.708,958,2.631,959,2.631,960,2.631,961,2.631,962,2.631,963,2.631,964,2.631,965,2.631,966,2.631,967,2.631,968,2.631,969,2.631,970,2.631,971,3.708,972,2.631,973,2.631,974,2.631,975,2.631,976,2.631,977,2.631,978,2.631,979,2.631,980,2.631,981,2.631,982,2.631,983,2.631,984,2.631,985,2.631,986,2.631,987,2.631,988,2.631,989,2.631,990,3.708,991,4.293,992,2.631,993,2.631,994,2.631,995,2.631,996,3.708,997,3.708,998,2.631,999,2.631,1000,3.708,1001,3.708,1002,3.708,1003,2.631,1004,2.631,1005,1.618,1006,2.16,1007,2.631,1008,2.631,1009,2.631,1010,2.631,1011,2.631,1012,2.16,1013,2.631,1014,2.631,1015,2.631,1016,2.631,1017,2.631,1018,2.631,1019,2.631,1020,5.512,1021,3.708,1022,2.631,1023,2.631,1024,4.293,1025,2.631,1026,2.631,1027,2.631,1028,2.631,1029,2.631,1030,2.631,1031,2.631,1032,2.631,1033,2.631,1034,2.631,1035,2.631,1036,2.631,1037,2.631,1038,2.631,1039,2.631,1040,3.708,1041,2.631,1042,2.631,1043,2.631,1044,2.631,1045,2.631,1046,2.631,1047,2.631,1048,2.631,1049,2.631,1050,2.631,1051,2.631,1052,2.631,1053,2.631,1054,2.631,1055,2.631,1056,2.631,1057,2.631,1058,2.631,1059,2.631,1060,2.631,1061,2.631,1062,2.631,1063,2.631,1064,2.631,1065,2.631,1066,2.631,1067,2.631,1068,2.631,1069,2.631,1070,2.631,1071,2.631,1072,2.631,1073,2.631,1074,2.631,1075,2.16,1076,2.631,1077,2.631,1078,2.631,1079,2.631,1080,2.631,1081,2.631,1082,2.631,1083,2.631,1084,2.631,1085,2.631,1086,2.16,1087,2.631,1088,2.631,1089,2.16,1090,2.631,1091,2.631]],["title/dependencies.html",[949,2.056,1005,2.202]],["body/dependencies.html",[15,0.04,32,0.482,57,1.097,58,1.097,522,0.033,523,0.037,524,0.033,792,3.921,1005,3.335,1092,4.777,1093,4.777]],["title/miscellaneous/functions.html",[1094,1.54,1095,2.939]],["body/miscellaneous/functions.html",[6,0.478,7,0.316,9,0.565,15,0.04,31,0.755,67,0.658,81,0.755,82,0.861,320,0.861,522,0.032,523,0.037,524,0.032,587,2.581,592,3.321,659,3.891,660,3.891,1094,2.914,1095,3.891,1096,3.891,1097,4.739,1098,4.739]],["title/index.html",[9,0.299,178,0.454,235,0.454]],["body/index.html",[4,0.607,7,0.382,15,0.042,16,0.513,32,0.431,34,0.875,83,0.51,90,0.51,92,0.593,94,0.513,98,0.982,100,0.816,107,0.982,112,0.702,122,0.593,124,0.681,128,0.681,137,0.875,138,0.982,159,1.041,171,0.982,183,0.982,522,0.029,523,0.035,524,0.029,526,2.769,530,3.508,533,4.174,563,3.574,565,3.004,566,3.004,567,3.004,569,3.508,605,2.628,681,3.508,696,3.508,702,3.508,725,4.779,747,4.174,752,4.174,753,4.174,825,4.867,834,3.508,847,3.508,849,4.174,850,3.004,851,3.508,900,3.508,910,3.508,1005,2.628,1006,3.508,1012,4.779,1075,4.174,1099,5.084,1100,5.428,1101,5.084,1102,4.273,1103,5.084,1104,4.456,1105,5.618,1106,3.004,1107,4.273,1108,5.738,1109,4.273,1110,4.273,1111,4.273,1112,5.084,1113,5.428,1114,4.273,1115,4.273,1116,4.273,1117,5.428,1118,5.084,1119,4.273,1120,4.273,1121,4.273,1122,4.273,1123,4.273,1124,4.273,1125,4.273,1126,4.273,1127,4.273,1128,4.273,1129,4.273,1130,4.273,1131,4.273,1132,4.273,1133,4.273,1134,4.273,1135,4.273,1136,4.273,1137,4.273,1138,4.273,1139,4.273,1140,4.273,1141,4.273,1142,4.273,1143,4.273,1144,4.273,1145,4.273,1146,4.273,1147,4.273,1148,4.273,1149,5.428,1150,4.273,1151,4.273,1152,4.273,1153,4.273,1154,4.273,1155,4.273,1156,3.508]],["title/license.html",[178,0.454,235,0.454,1106,1.761]],["body/license.html",[15,0.036,33,1.04,35,1.04,83,0.54,124,0.838,522,0.031,523,0.036,524,0.031,726,3.716,821,3.716,850,3.182,1104,3.716,1106,3.182,1156,4.318,1157,5.56,1158,4.526,1159,4.526,1160,4.526,1161,5.259,1162,4.526,1163,4.526,1164,4.526,1165,4.526,1166,4.526,1167,4.526,1168,5.259,1169,6.017,1170,4.526,1171,4.526,1172,4.526,1173,5.56,1174,4.526,1175,5.259,1176,4.526,1177,4.526,1178,4.526,1179,4.526,1180,4.526,1181,4.526,1182,4.526,1183,4.526,1184,5.259,1185,4.526,1186,4.526,1187,4.526,1188,4.526,1189,4.526,1190,5.259,1191,5.259,1192,4.526,1193,4.526,1194,4.526,1195,4.526,1196,4.526,1197,4.526,1198,4.526,1199,4.526,1200,4.526,1201,4.526,1202,4.526,1203,4.526,1204,4.526,1205,4.526,1206,4.526,1207,4.526,1208,4.526,1209,4.526,1210,4.526,1211,4.526,1212,4.526,1213,4.526,1214,4.526,1215,4.526,1216,4.526,1217,4.526,1218,4.526,1219,4.526,1220,4.526]],["title/modules.html",[527,2.843]],["body/modules.html",[15,0.037,522,0.033,523,0.037,524,0.033,526,2.613,527,3.373,1221,4.799]],["title/overview.html",[1222,3.32]],["body/overview.html",[2,0.868,15,0.037,522,0.033,523,0.037,524,0.033,525,3.365,536,2.943,1086,3.929,1089,3.929,1222,3.929,1223,4.786]],["title/miscellaneous/typealiases.html",[1094,1.54,1224,3.581]],["body/miscellaneous/typealiases.html",[6,0.545,7,0.36,8,1.092,9,0.567,14,0.567,15,0.037,78,1.107,522,0.032,523,0.037,524,0.032,587,2.587,591,2.945,600,2.945,1094,2.922,1096,3.901,1225,4.752,1226,4.752]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["0.1.0",{"_index":1071,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":1069,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":1045,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":1039,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":1037,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":1033,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":1031,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":1028,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":1023,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":1019,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1016,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":1008,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":1004,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":999,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":995,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":1022,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["0a30e09",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["0px",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["1",{"_index":1086,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":988,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":983,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":981,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":979,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":977,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["111",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":978,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":1223,"title":{},"body":{"overview.html":{}}}],["14",{"_index":984,"title":{},"body":{"changelog.html":{}}}],["1661d72",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":1091,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":1007,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1083,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":950,"title":{},"body":{"changelog.html":{}}}],["2.4.2",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["2016",{"_index":1020,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":951,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":821,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":1050,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":898,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":989,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":1030,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":1072,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["2aff5f0",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1089,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["3.0.0",{"_index":944,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":939,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":575,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["300",{"_index":574,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["30cfca3",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":946,"title":{},"body":{"changelog.html":{}}}],["32f4ce3",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":942,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":1048,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":1082,"title":{},"body":{"changelog.html":{}}}],["3c5c5b9",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":1003,"title":{},"body":{"changelog.html":{}}}],["3f079fe",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":991,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":993,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["4.2.0",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["4.3.0",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["4.3.1",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["4.3.10",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["4.3.11",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["4.3.12",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["4.3.2",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["4.3.3",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["4.3.4",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["4.3.5",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["4.3.6",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["4.3.7",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["4.3.8",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["4.3.9",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["4.4.0",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["4.4.2",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["4.4.3",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["4.4.4",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["4.4.5",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["4.4.6",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["4.5.0",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["4.5.1",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["4.5.2",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["4.5.3",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["4.5.4",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["4.5.5",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["4.5.6",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["4.6.0",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":955,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":992,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["44ea67e",{"_index":1018,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":953,"title":{},"body":{"changelog.html":{}}}],["46892ac",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":963,"title":{},"body":{"changelog.html":{}}}],["4a6bdbb",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":954,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":975,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":1058,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":1038,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":961,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":1025,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":905,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":1099,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":1085,"title":{},"body":{"changelog.html":{}}}],["60844ec",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":1055,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["700fef1",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":1088,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":1077,"title":{},"body":{"changelog.html":{}}}],["7276cab",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":1053,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":982,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":1044,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":1036,"title":{},"body":{"changelog.html":{}}}],["78bdeb5",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["7c96113",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":987,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":911,"title":{},"body":{"changelog.html":{}}}],["7fbaa2a",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":1147,"title":{},"body":{"index.html":{}}}],["81",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["8850ddf",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["897b3fe",{"_index":980,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["97",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["9831d36",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":1061,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":958,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":1060,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":726,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["account",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":1214,"title":{},"body":{"license.html":{}}}],["activating",{"_index":578,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["active",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["activelongpressdrag",{"_index":570,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["actually",{"_index":952,"title":{},"body":{"changelog.html":{}}}],["ad50f0e",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":681,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addclass",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["addclass(this.renderer",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["added",{"_index":602,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["aliases",{"_index":1225,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["along",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["alternatives",{"_index":1128,"title":{},"body":{"index.html":{}}}],["always",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["and/or",{"_index":1182,"title":{},"body":{"license.html":{}}}],["angular",{"_index":725,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["angular/core",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"dependencies.html":{},"index.html":{}}}],["angulars",{"_index":1014,"title":{},"body":{"changelog.html":{}}}],["any).eventlistenersubscriptions[type",{"_index":473,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["api",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":1112,"title":{},"body":{"index.html":{}}}],["append",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["applied",{"_index":936,"title":{},"body":{"changelog.html":{}}}],["apply",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["apps",{"_index":929,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":1218,"title":{},"body":{"license.html":{}}}],["assignment",{"_index":940,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":1170,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":1122,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1207,"title":{},"body":{"license.html":{}}}],["auto",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["automatic",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["automatically",{"_index":935,"title":{},"body":{"changelog.html":{}}}],["autoscroll",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["autoscroller",{"_index":58,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"dependencies.html":{}}}],["awesome",{"_index":1135,"title":{},"body":{"index.html":{}}}],["axis",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["back",{"_index":1034,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":1010,"title":{},"body":{"changelog.html":{}}}],["bebd925",{"_index":1011,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["behaviour",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["being",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["boolean",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":1115,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["bounding",{"_index":913,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":928,"title":{},"body":{"changelog.html":{}}}],["breaking",{"_index":918,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1221,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["building",{"_index":960,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":1158,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":902,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":1084,"title":{},"body":{"changelog.html":{}}}],["c9b28a5",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["ca83a33",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["called",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["calledcount",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancel",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.complete",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.pipe",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancelled",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["candrag",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cases",{"_index":931,"title":{},"body":{"changelog.html":{}}}],["caused",{"_index":1041,"title":{},"body":{"changelog.html":{}}}],["cb7cf2e",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":1137,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["change",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":965,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":668,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["changes.dragaxis",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["changing",{"_index":899,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":1165,"title":{},"body":{"license.html":{}}}],["checkeventlisteners",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["checking",{"_index":1134,"title":{},"body":{"index.html":{}}}],["child",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["claim",{"_index":1210,"title":{},"body":{"license.html":{}}}],["class",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["classes",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["click",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["clicked",{"_index":1017,"title":{},"body":{"changelog.html":{}}}],["clicking",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["clientrect",{"_index":593,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["clientx",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["clienty",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.appendchild(node",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.innerhtml",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.parentelement!.removechild(clone",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cloned",{"_index":926,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":925,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["come",{"_index":1142,"title":{},"body":{"index.html":{}}}],["commit",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["commonjs",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["compatibility",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":654,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["completely",{"_index":1046,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":1075,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["conditions",{"_index":1189,"title":{},"body":{"license.html":{}}}],["config",{"_index":973,"title":{},"body":{"changelog.html":{}}}],["configuration",{"_index":577,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["configured",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":1219,"title":{},"body":{"license.html":{}}}],["console.log('element",{"_index":1120,"title":{},"body":{"index.html":{}}}],["const",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["constructor(element",{"_index":657,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["constructor(public",{"_index":585,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container",{"_index":565,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["container.directive",{"_index":61,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["container.directive.ts",{"_index":560,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container.directive.ts:26",{"_index":571,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container.directive.ts:34",{"_index":576,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["containerhashorizontalscroll",{"_index":516,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["containerhasverticalscroll",{"_index":519,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contents",{"_index":900,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contextmenu",{"_index":446,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener",{"_index":444,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["contextmenulistener.unsubscribe",{"_index":457,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["continually",{"_index":1153,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1215,"title":{},"body":{"license.html":{}}}],["control",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["coordinates",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["copies",{"_index":1184,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1168,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1157,"title":{},"body":{"license.html":{}}}],["correct",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["create",{"_index":1001,"title":{},"body":{"changelog.html":{}}}],["created",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["css",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["current",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["currentdrag",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.complete",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.next",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdata",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdropdata",{"_index":625,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["currentdragsubscription",{"_index":617,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["cursor",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["custom",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["customised",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":943,"title":{},"body":{"changelog.html":{}}}],["d044523",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["d233788",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":1079,"title":{},"body":{"changelog.html":{}}}],["d3eecde",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":915,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":1015,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":945,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1211,"title":{},"body":{"license.html":{}}}],["data",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["date.now",{"_index":441,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dc0f863",{"_index":998,"title":{},"body":{"changelog.html":{}}}],["dd3e89e",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1172,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1220,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":530,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["defined",{"_index":541,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["delay",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["delete",{"_index":433,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["delta",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll",{"_index":491,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.left",{"_index":496,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.top",{"_index":498,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltatotal",{"_index":499,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltax",{"_index":494,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltay",{"_index":497,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["demo",{"_index":1100,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":1113,"title":{},"body":{"index.html":{}}}],["demomodule",{"_index":1116,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":1005,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["deprecated",{"_index":580,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["deregister",{"_index":908,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllistener",{"_index":623,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["description",{"_index":561,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["destroy",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["destroyed",{"_index":1076,"title":{},"body":{"changelog.html":{}}}],["destroying",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":1006,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["development",{"_index":1105,"title":{},"body":{"index.html":{}}}],["device",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["devices",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["didn't",{"_index":1026,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":651,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dimensions",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["directive",{"_index":17,"title":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["directives",{"_index":536,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{},"overview.html":{}}}],["directly",{"_index":920,"title":{},"body":{"changelog.html":{}}}],["directory",{"_index":1144,"title":{},"body":{"index.html":{}}}],["disable",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["disabled",{"_index":1051,"title":{},"body":{"changelog.html":{}}}],["disablescroll",{"_index":513,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dispose",{"_index":1073,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchanged",{"_index":590,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["distribute",{"_index":1180,"title":{},"body":{"license.html":{}}}],["document",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["documentation",{"_index":1104,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["doing",{"_index":641,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dom",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":847,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["drag$.pipe",{"_index":627,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["drag$.subscribe",{"_index":653,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragactiveclass",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["draganddropmodule",{"_index":526,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":903,"title":{},"body":{"changelog.html":{}}}],["dragaxis",{"_index":66,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragaxix",{"_index":1080,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["dragcancelled",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcomplete",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcontainer",{"_index":1024,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragcursor=\"move",{"_index":938,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragend(event",{"_index":1119,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended$.subscribe",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragendevent",{"_index":74,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragenter",{"_index":608,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggable",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.directive",{"_index":534,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirective",{"_index":95,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["draggablehelper",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["draggablescrollcontainerdirective",{"_index":59,"title":{"directives/DraggableScrollContainerDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragged",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["dragging",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragleave",{"_index":610,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragmoveevent",{"_index":73,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragover",{"_index":612,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoveractive",{"_index":636,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["dragoverclass",{"_index":603,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragpointerdownevent",{"_index":69,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drags",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragsnapgrid",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstart",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstarted",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstarted$.subscribe",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstartevent",{"_index":71,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drop",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.ts",{"_index":529,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["dropevent",{"_index":586,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DropEvent.html":{}}}],["droppable",{"_index":849,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.directive",{"_index":535,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.js",{"_index":967,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.js",{"_index":969,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":968,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":966,"title":{},"body":{"changelog.html":{}}}],["droppable/docs",{"_index":1127,"title":{},"body":{"index.html":{}}}],["droppable/issues/61",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["droppable/src/lib/drag",{"_index":528,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable",{"_index":559,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:104",{"_index":547,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:109",{"_index":544,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:114",{"_index":546,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:119",{"_index":548,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:124",{"_index":551,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:129",{"_index":553,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:134",{"_index":545,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:139",{"_index":543,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:144",{"_index":549,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:149",{"_index":550,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:154",{"_index":552,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:159",{"_index":542,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:174",{"_index":556,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:181",{"_index":557,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:186",{"_index":558,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:191",{"_index":555,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:196",{"_index":554,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts",{"_index":587,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/droppable.directive.ts:60",{"_index":662,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:65",{"_index":661,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:70",{"_index":663,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:75",{"_index":664,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:80",{"_index":665,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:85",{"_index":666,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:90",{"_index":667,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:92",{"_index":658,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirective",{"_index":531,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement",{"_index":620,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.rect",{"_index":628,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":629,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppableelement.updatecache",{"_index":624,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["droppablethen",{"_index":1111,"title":{},"body":{"index.html":{}}}],["dropped",{"_index":605,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["droppeddata",{"_index":1118,"title":{},"body":{"index.html":{}}}],["dropping",{"_index":1054,"title":{},"body":{"changelog.html":{}}}],["duplicate",{"_index":1040,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":507,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e.g",{"_index":568,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["e.preventdefault",{"_index":448,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e0128e5",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":901,"title":{},"body":{"changelog.html":{}}}],["edge",{"_index":930,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["ee94dc5",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1087,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["elementref",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["elements",{"_index":566,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["emit",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["emitted",{"_index":1052,"title":{},"body":{"changelog.html":{}}}],["enable",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["enablescroll",{"_index":510,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["end",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":1062,"title":{},"body":{"changelog.html":{}}}],["environment",{"_index":1140,"title":{},"body":{"index.html":{}}}],["error",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["errors",{"_index":1043,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.button",{"_index":423,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.canceldrag$.emit",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clientx",{"_index":463,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clienty",{"_index":464,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clientx",{"_index":430,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clienty",{"_index":431,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clientx",{"_index":459,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clienty",{"_index":460,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.x",{"_index":932,"title":{},"body":{"changelog.html":{}}}],["event.y",{"_index":933,"title":{},"body":{"changelog.html":{}}}],["eventemitter",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["eventlistenersubscriptions",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["events",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["events:none",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["eventtarget",{"_index":599,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["export",{"_index":65,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["exported",{"_index":923,"title":{},"body":{"changelog.html":{}}}],["exports",{"_index":532,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["expose",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1198,"title":{},"body":{"license.html":{}}}],["extends",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["f110c8e",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["f29b424",{"_index":1070,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["f6a5cde",{"_index":917,"title":{},"body":{"changelog.html":{}}}],["f936805",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["f98f586",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["fb75711",{"_index":1032,"title":{},"body":{"changelog.html":{}}}],["fe9bd5e",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":1132,"title":{},"body":{"index.html":{}}}],["features",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["files",{"_index":1171,"title":{},"body":{"license.html":{}}}],["filter",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([didoverlap",{"_index":650,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["filter(([previous",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["filter((node",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["find",{"_index":1123,"title":{},"body":{"index.html":{}}}],["fire",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":986,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":1203,"title":{},"body":{"license.html":{}}}],["fix",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixed",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["fixes",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":1188,"title":{},"body":{"license.html":{}}}],["foreach((node",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["forroot",{"_index":1021,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":1164,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["function",{"_index":591,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1095,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1187,"title":{},"body":{"license.html":{}}}],["generated",{"_index":1125,"title":{},"body":{"index.html":{}}}],["getscrollelement",{"_index":480,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getscrollposition",{"_index":482,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getting",{"_index":235,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghost",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostdragenabled",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelement",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementappendto",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreated",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreatedevent",{"_index":89,"title":{"interfaces/GhostElementCreatedEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementtemplate",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["glitch",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["globaldragstyle",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["granted",{"_index":1163,"title":{},"body":{"license.html":{}}}],["grid",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["grids",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hacks",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["hascontainerscrollbar",{"_index":437,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["haseventlisteners",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hasscrollbar",{"_index":514,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["height",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["helper",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["helper.provider",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["here",{"_index":1117,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1162,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["higher",{"_index":947,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["highlighted",{"_index":985,"title":{},"body":{"changelog.html":{}}}],["holders",{"_index":1208,"title":{},"body":{"license.html":{}}}],["hover",{"_index":1057,"title":{},"body":{"changelog.html":{}}}],["hovering",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["html",{"_index":579,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["htmlelement",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["htmlstyleelement",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":1101,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/dom",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["icon",{"_index":1056,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":941,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":502,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["immediately",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1090,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1027,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["implied",{"_index":1199,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"index.html":{}}}],["imports",{"_index":1114,"title":{},"body":{"index.html":{}}}],["improvements",{"_index":907,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1192,"title":{},"body":{"license.html":{}}}],["including",{"_index":1175,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["inject",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject(document",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["input",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["inputs",{"_index":538,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["inserted",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inside",{"_index":567,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["insider",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":1108,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1103,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["instead",{"_index":584,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["interaction",{"_index":1078,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"overview.html":{}}}],["ios",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["iscoordinatewithinrectangle",{"_index":592,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":1097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdragactivated",{"_index":436,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["isdropallowed",{"_index":632,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["isn't",{"_index":562,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["istanbul",{"_index":501,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["iswithinelement",{"_index":631,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["item",{"_index":696,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["key",{"_index":476,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["kind",{"_index":1197,"title":{},"body":{"license.html":{}}}],["lazily",{"_index":1000,"title":{},"body":{"changelog.html":{}}}],["leave",{"_index":1063,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["lettable",{"_index":956,"title":{},"body":{"changelog.html":{}}}],["lewis",{"_index":1160,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1212,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1209,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1136,"title":{},"body":{"index.html":{}}}],["library",{"_index":702,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licence",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1106,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":1176,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1200,"title":{},"body":{"license.html":{}}}],["line",{"_index":614,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["listener",{"_index":909,"title":{},"body":{"changelog.html":{}}}],["listeners",{"_index":1002,"title":{},"body":{"changelog.html":{}}}],["literal",{"_index":540,"title":{},"body":{"directives/DraggableDirective.html":{},"interfaces/ValidateDragParams.html":{}}}],["local",{"_index":1143,"title":{},"body":{"index.html":{}}}],["location",{"_index":597,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["locked",{"_index":1081,"title":{},"body":{"changelog.html":{}}}],["long",{"_index":573,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["longer",{"_index":922,"title":{},"body":{"changelog.html":{}}}],["longpressconfig",{"_index":500,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["longpressconfig.delay",{"_index":508,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["longpressconfig.delta",{"_index":505,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["loosen",{"_index":1009,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":996,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["map(([pointermoveevent",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(([previous",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((calledcount",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((movedata",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map((value",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["margin",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["matching",{"_index":523,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.abs",{"_index":495,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.left",{"_index":493,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.top",{"_index":492,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformx",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformy",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["matt",{"_index":1159,"title":{},"body":{"license.html":{}}}],["mattlewis92/dom",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"dependencies.html":{}}}],["maxspeed",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["merchantability",{"_index":1202,"title":{},"body":{"license.html":{}}}],["merge",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["merge(dragcomplete",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((dragenddata",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((pointerdownevent",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["metadata",{"_index":537,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":904,"title":{},"body":{"changelog.html":{}}}],["migrate",{"_index":919,"title":{},"body":{"changelog.html":{}}}],["milliseconds",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mimic",{"_index":1065,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":1094,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":1156,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":1178,"title":{},"body":{"license.html":{}}}],["module",{"_index":525,"title":{"modules/DragAndDropModule.html":{}},"body":{"changelog.html":{},"overview.html":{}}}],["modules",{"_index":527,"title":{"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"modules.html":{}}}],["mouse",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["mousedown",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mouseenter",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseevent",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseleave",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemove",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent",{"_index":425,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clientx",{"_index":427,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clienty",{"_index":428,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseup",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["move",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["moved",{"_index":611,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["movedata",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrollleft",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrolltop",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformx",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformy",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movescrollposition",{"_index":490,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["moz",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ms",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["multiple",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["mwldraggable",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mwldraggablescrollcontainer",{"_index":569,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"index.html":{}}}],["mwldroppable",{"_index":601,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["name",{"_index":660,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":615,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["native",{"_index":1066,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":752,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["needed",{"_index":1130,"title":{},"body":{"index.html":{}}}],["never",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["next",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.x",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.y",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ng",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":990,"title":{},"body":{"changelog.html":{}}}],["ngmodule",{"_index":533,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngondestroy",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngoninit",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["ngzone",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["node",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["node.js",{"_index":1141,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["none",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["noninfringement",{"_index":1206,"title":{},"body":{"license.html":{}}}],["notable",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":1121,"title":{},"body":{"index.html":{}}}],["notice",{"_index":1190,"title":{},"body":{"license.html":{}}}],["now",{"_index":921,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":825,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["o",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(styles).foreach((key",{"_index":477,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach((type",{"_index":472,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observable",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["observable((observer",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observables",{"_index":1074,"title":{},"body":{"changelog.html":{}}}],["observer.next(e",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["obtaining",{"_index":1167,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":598,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["old",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":910,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchanges",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ondestroy",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["one",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["oninit",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["onmousedown(event",{"_index":422,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseenter",{"_index":465,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseleave",{"_index":467,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseup(event",{"_index":432,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchend(event",{"_index":461,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchstart(event",{"_index":435,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["operators",{"_index":957,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["original",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["otherwise",{"_index":1217,"title":{},"body":{"license.html":{}}}],["out",{"_index":850,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["outputs",{"_index":539,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["outside",{"_index":1013,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["overflow",{"_index":511,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["overlapping",{"_index":607,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps",{"_index":626,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(distinctuntilchanged",{"_index":635,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlaps$.pipe(filter((overlapsnow",{"_index":647,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapschanged",{"_index":634,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow",{"_index":644,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overlapsnow)).subscribe",{"_index":648,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["overview",{"_index":1222,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["package",{"_index":949,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":959,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pairwise",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parameters",{"_index":659,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["parent",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["part",{"_index":924,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":1204,"title":{},"body":{"license.html":{}}}],["pass",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["passive",{"_index":450,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["path",{"_index":964,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":792,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["performance",{"_index":906,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":1161,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1185,"title":{},"body":{"license.html":{}}}],["person",{"_index":1166,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1186,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(filter((overlapsnow",{"_index":643,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["pipe(share",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pipe(take(1",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["place",{"_index":564,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["pointer",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["pointerdown",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clientx",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clienty",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.event.stoppropagation",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe(pairwise",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevent",{"_index":80,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerevents",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(take(1",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pipe(takelast(1",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clientx",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clienty",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.event.target",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerup",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["port",{"_index":1146,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1194,"title":{},"body":{"license.html":{}}}],["position",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["positioned",{"_index":927,"title":{},"body":{"changelog.html":{}}}],["positioning",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["positions",{"_index":1035,"title":{},"body":{"changelog.html":{}}}],["powered",{"_index":1107,"title":{},"body":{"index.html":{}}}],["prepare",{"_index":1139,"title":{},"body":{"index.html":{}}}],["preserve",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["pressed",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["prevent",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["previous",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.x",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.y",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["private",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["project",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.ts",{"_index":1226,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.ts",{"_index":1096,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propagating",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["prototype",{"_index":974,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1195,"title":{},"body":{"license.html":{}}}],["provider",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["public",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":1179,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1205,"title":{},"body":{"license.html":{}}}],["readme",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["recalculate",{"_index":912,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":1133,"title":{},"body":{"index.html":{}}}],["recompute",{"_index":916,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.left",{"_index":594,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.left}px",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.top",{"_index":595,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["rect.top}px",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.width}px",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rectangle",{"_index":914,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":976,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":1154,"title":{},"body":{"index.html":{}}}],["releaselicense",{"_index":1155,"title":{},"body":{"index.html":{}}}],["reload",{"_index":1148,"title":{},"body":{"index.html":{}}}],["remove",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["removeclass",{"_index":63,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removeclass(this.renderer",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["removed",{"_index":581,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["rename",{"_index":1059,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":1068,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["renderer2",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["rendering",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["repliate",{"_index":962,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":1145,"title":{},"body":{"index.html":{}}}],["requestanimationframe",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["required",{"_index":948,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":1029,"title":{},"body":{"changelog.html":{}}}],["restore",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":1174,"title":{},"body":{"license.html":{}}}],["result",{"_index":522,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":524,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["returns",{"_index":1098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["revert",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rights",{"_index":1177,"title":{},"body":{"license.html":{}}}],["round",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1012,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["rxjs/operators",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["safari",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["same",{"_index":1049,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1110,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":60,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["scroll.left",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scroll.top",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollable",{"_index":563,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["scrollcontainer",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainer.clientheight",{"_index":521,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.clientwidth",{"_index":518,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollheight",{"_index":520,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainer.scrollwidth",{"_index":517,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainerrect",{"_index":622,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["scrollcontainerscroll",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolled",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["scroller",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrolling",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scrollleft",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolltop",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollwhenoutside",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollx",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolly",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["seamless",{"_index":994,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":638,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["select",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selected",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selection",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sell",{"_index":1183,"title":{},"body":{"license.html":{}}}],["server",{"_index":753,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["set",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["setcursor(value",{"_index":469,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setelementstyles",{"_index":474,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setting",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1191,"title":{},"body":{"license.html":{}}}],["share",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shouldbegindrag",{"_index":489,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["show",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["showoriginalelementwhiledragging",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shows",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["side",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["simplechanges",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["skyhook",{"_index":1138,"title":{},"body":{"index.html":{}}}],["snap",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapgrid",{"_index":68,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["snapping",{"_index":1131,"title":{},"body":{"index.html":{}}}],["software",{"_index":1169,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["sourcemaps",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["stackblitz",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":616,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["start",{"_index":747,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["started",{"_index":178,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["starting",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["starts",{"_index":606,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["startscrollposition",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.left",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.top",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith(startscrollposition",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stop",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stops",{"_index":609,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["string",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"index.html":{}}}],["style",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["styled",{"_index":1047,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":475,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["styles[key",{"_index":479,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subject",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["sublicense",{"_index":1181,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["subscribe((e",{"_index":447,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscribe((touchmoveevent",{"_index":451,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscription",{"_index":589,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["substantial",{"_index":1193,"title":{},"body":{"license.html":{}}}],["support",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["system.js",{"_index":970,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":588,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["table",{"_index":1102,"title":{},"body":{"index.html":{}}}],["take",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["take(1",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takelast",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil(dragcomplete",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["target",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["template",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["templateref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["test",{"_index":1151,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":1152,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1150,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1149,"title":{},"body":{"index.html":{}}}],["text",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["text/css",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["there's",{"_index":639,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.autoscroll",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.candrag",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.checkeventlisteners",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.currentdragsubscription",{"_index":618,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.currentdragsubscription.unsubscribe",{"_index":656,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.destroy",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.destroy$.next",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.disablescroll",{"_index":509,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document",{"_index":445,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body",{"_index":481,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.body.style.cursor",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.defaultview",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrollleft",{"_index":488,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.documentelement.scrolltop",{"_index":486,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.appendchild(globaldragstyle",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.removechild(globaldragstyle",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragactiveclass",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragaxis.x",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragaxis.y",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragcursor",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.next",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragenter.next",{"_index":646,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.draggablehelper.currentdrag.subscribe",{"_index":619,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragging.next",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragleave.next",{"_index":652,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragover.next",{"_index":649,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragoverclass",{"_index":645,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dragpointerdown.next",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.x",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.y",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.next",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.drop.next",{"_index":655,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.dropdata",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.clonenode",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.element.nativeelement.nextsibling",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.parentnode!.insertbefore",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.enablescroll",{"_index":462,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":408,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseenter",{"_index":418,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseleave",{"_index":420,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousemove",{"_index":424,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":411,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":417,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":415,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchmove",{"_index":443,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":413,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollelement",{"_index":515,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollposition",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostdragenabled",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelement",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto.appendchild(clone",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.emit",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementtemplate",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.hasscrollbar",{"_index":442,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmousedown(event",{"_index":410,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseenter",{"_index":419,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseleave",{"_index":421,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseup(event",{"_index":412,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchend(event",{"_index":416,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchstart(event",{"_index":414,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.complete",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.next",{"_index":429,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.pipe",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.complete",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.next",{"_index":426,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.complete",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.next",{"_index":434,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.appendchild",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createelement",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createtext",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.listen",{"_index":409,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.renderer.listen(scrollcontainer",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setattribute(globaldragstyle",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(element",{"_index":478,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.document.body",{"_index":512,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.element.nativeelement",{"_index":470,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.activelongpressdrag",{"_index":438,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":630,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":484,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":483,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.longpressconfig.delta",{"_index":503,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.longpressconfig.duration",{"_index":504,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller.destroy",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor",{"_index":468,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor(this.dragcursor",{"_index":466,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(clone",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(this.ghostelement",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.shouldbegindrag",{"_index":452,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.showoriginalelementwhiledragging",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerbegin",{"_index":440,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerend",{"_index":506,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.touchstartlongpress",{"_index":439,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.unsubscribeeventlisteners",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrag",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrop",{"_index":633,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.vcr.createembeddedview",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.zone.run",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["this.zone.runoutsideangular",{"_index":407,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["through",{"_index":1109,"title":{},"body":{"index.html":{}}}],["throw",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":604,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["timelongpress",{"_index":86,"title":{"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerbegin",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerend",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["todo",{"_index":637,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["top",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tort",{"_index":1216,"title":{},"body":{"license.html":{}}}],["touch",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["touchcancel",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchend",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchevent",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touching",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmove",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent",{"_index":453,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.preventdefault",{"_index":454,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":455,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clienty",{"_index":456,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener",{"_index":449,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmovelistener.unsubscribe",{"_index":458,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstart",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstartlongpress]=\"{delay",{"_index":583,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["transform",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["transformx",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy}px",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["translate3d(${transformx}px",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["trigger",{"_index":572,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["true",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["tslint:disable",{"_index":613,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1224,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["universal",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["unless",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisteners",{"_index":471,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["until",{"_index":1064,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["update",{"_index":972,"title":{},"body":{"changelog.html":{}}}],["updatecache",{"_index":621,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["upgrade",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["useful",{"_index":1124,"title":{},"body":{"index.html":{}}}],["user",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["users",{"_index":971,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["util",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["v5",{"_index":582,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["validate",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":78,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedragparams",{"_index":76,"title":{"interfaces/ValidateDragParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["validatedrop",{"_index":600,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedropparams",{"_index":596,"title":{"interfaces/ValidateDropParams.html":{}},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["value",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{}}}],["values",{"_index":934,"title":{},"body":{"changelog.html":{}}}],["vcr",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["version",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":642,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{}}}],["view",{"_index":851,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewed",{"_index":1126,"title":{},"body":{"index.html":{}}}],["viewref",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewref.rootnodes",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["visibility",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["void",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["wait",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["warnings",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":1201,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1196,"title":{},"body":{"license.html":{}}}],["way",{"_index":640,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["webkit",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["whether",{"_index":1213,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":834,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["willchange",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":487,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window.pageyoffset",{"_index":485,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["without",{"_index":1173,"title":{},"body":{"license.html":{}}}],["work",{"_index":997,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":1067,"title":{},"body":{"changelog.html":{}}}],["worse",{"_index":1042,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":1129,"title":{},"body":{"index.html":{}}}],["x",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["y",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["yourself",{"_index":937,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"interfaces/ValidateDropParams.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n    Modules\n    DragAndDropModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DraggableDirective\n                        \n                        \n                            DraggableScrollContainerDirective\n                        \n                        \n                            DroppableDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective,\n  ],\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dragCancelled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                    \n                                \n                                \n                                    \n                                        dragCancelled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancelDrag$\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnChanges\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoScroll\n                            \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                touchStartLongPress\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoScroll\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    margin: 20,\n  }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:159\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:139\n                            \n                        \n                \n                    \n                        The css class to apply when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                \n                \n                    \n                        Type :         DragAxis\n\n                    \n                \n                \n                    \n                        Default value : { x: true, y: true }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:109\n                            \n                        \n                \n                    \n                        The axis along which the element is draggable\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:134\n                            \n                        \n                \n                    \n                        The cursor to use when hovering over a draggable element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                \n                \n                    \n                        Type :         SnapGrid\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:114\n                            \n                        \n                \n                    \n                        Snap all drags to an x / y grid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:104\n                            \n                        \n                \n                    \n                        an object of data you can pass to the drop event\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:119\n                            \n                        \n                \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:144\n                            \n                        \n                \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:149\n                            \n                        \n                \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:124\n                            \n                        \n                \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        touchStartLongPress\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:154\n                            \n                        \n                \n                    \n                        Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                \n                \n                    \n                        Type :         ValidateDrag\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:129\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:196\n                            \n                        \n                \n                    \n                        Called after the element is dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:191\n                            \n                        \n                \n                    \n                        Called when the element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:174\n                            \n                        \n                \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:181\n                            \n                        \n                \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:186\n                            \n                        \n                \n                    \n                        Called after the ghost element has been created\n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableScrollContainerDirective.html":{"url":"directives/DraggableScrollContainerDirective.html","title":"directive - DraggableScrollContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableScrollContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts\n        \n\n            \n                Description\n            \n            \n                If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n  \n    Drag me!\n  \n            \n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggableScrollContainer]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                activeLongPressDrag\n                            \n                            \n                                longPressConfig\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        activeLongPressDrag\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts:26\n                            \n                        \n                \n                    \n                        Trigger the DragStart after a long touch in scrollable container when true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longPressConfig\n                    \n                \n                \n                    \n                        Default value : { duration: 300, delta: 30 }\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts:34\n                            \n                        \n                \n                    \n                        Configuration of a long touch\nDuration in ms of a long touch before activating DragStart\nDelta of the\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\n\n/**\n * If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n * ```html\n  \n    Drag me!\n  \n  ```\n */\n@Directive({\n  selector: '[mwlDraggableScrollContainer]',\n})\nexport class DraggableScrollContainerDirective {\n  /**\n   * Trigger the DragStart after a long touch in scrollable container when true\n   * @deprecated will be removed in v5 (use [touchStartLongPress]=\"{delay: 300, delta: 30}\" on the mwlDraggable element instead)\n   */\n  @Input() activeLongPressDrag: boolean = false;\n\n  /**\n   * Configuration of a long touch\n   * Duration in ms of a long touch before activating DragStart\n   * Delta of the\n   * @deprecated will be removed in v5 (use [touchStartLongPress]=\"{delay: 300, delta: 30}\" on the mwlDraggable element instead)\n   */\n  @Input() longPressConfig = { duration: 300, delta: 30 };\n\n  /**\n   * @hidden\n   */\n  constructor(public elementRef: ElementRef) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\nexport interface ValidateDropParams {\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData,\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData,\n                });\n              });\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                            OnInit\n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                            \n                                validateDrop\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                    DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:65\n                            \n                        \n                \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:60\n                            \n                        \n                \n                    \n                        Added to the element when an element is dragged over it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrop\n                    \n                \n                \n                    \n                        Type :         ValidateDrop\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:70\n                            \n                        \n                \n                    \n                        Allow custom behaviour to control when the element is dropped\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n                \n                    \n                        Called when a draggable element starts overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:80\n                            \n                        \n                \n                    \n                        Called when a draggable element stops overlapping the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:85\n                            \n                        \n                \n                    \n                        Called when a draggable element is moved over the element\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:90\n                            \n                        \n                \n                    \n                        Called when a draggable element is dropped on this element\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:92\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\nexport interface ValidateDropParams {\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData,\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData,\n                });\n              });\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GhostElementCreatedEvent.html":{"url":"interfaces/GhostElementCreatedEvent.html","title":"interface - GhostElementCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GhostElementCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        element\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeLongPress.html":{"url":"interfaces/TimeLongPress.html","title":"interface - TimeLongPress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimeLongPress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        timerBegin\n                                \n                                \n                                        timerEnd\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        timerBegin\n                                    \n                                \n                                \n                                    \n                                        timerBegin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerEnd\n                                    \n                                \n                                \n                                    \n                                        timerEnd:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDragParams.html":{"url":"interfaces/ValidateDragParams.html","title":"interface - ValidateDragParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidateDragParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        transform\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                    \n                                \n                                \n                                    \n                                        transform:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional,\n} from '@angular/core';\nimport {\n  Subject,\n  Observable,\n  merge,\n  ReplaySubject,\n  combineLatest,\n  fromEvent,\n} from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith,\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from '@mattlewis92/dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]',\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input() showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when hovering over a draggable element\n   */\n  @Input() dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input() ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input() ghostElementTemplate: TemplateRef;\n\n  /**\n   * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n   */\n  @Input() touchStartLongPress: { delay: number; delta: number };\n\n  /*\n   * Options used to control the behaviour of auto scrolling: https://www.npmjs.com/package/dom-autoscroller\n   */\n  @Input() autoScroll: {\n    margin:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    maxSpeed?:\n      | number\n      | { top?: number; left?: number; right?: number; bottom?: number };\n    scrollWhenOutside?: boolean;\n  } = {\n    margin: 20,\n  };\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output() ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        requestAnimationFrame(() => {\n          this.document.head.appendChild(globalDragStyle);\n        });\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable((observer) => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', (e) =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest([\n          this.pointerMove$,\n          scrollContainerScroll$,\n        ]).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top,\n              target: pointerMoveEvent.event.target,\n            };\n          }),\n          map((moveData) => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map((moveData) => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY,\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY },\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(take(1), share());\n        const dragEnded$ = pointerMove.pipe(takeLast(1), share());\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView,\n            ],\n            {\n              ...this.autoScroll,\n              autoScroll() {\n                return true;\n              },\n            }\n          );\n          addClass(this.renderer, this.element, this.dragActiveClass);\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.document.body.style.cursor = this.dragCursor;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0',\n              willChange: 'transform',\n              pointerEvents: 'none',\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter((node) => node instanceof Node)\n                .forEach((node) => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone,\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap((dragEndData) => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map((calledCount) => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0,\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            requestAnimationFrame(() => {\n              this.document.head.removeChild(globalDragStyle);\n            });\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map((value) => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({\n          x,\n          y,\n          currentDrag$,\n          clientX,\n          clientY,\n          transformX,\n          transformY,\n          target,\n        }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          requestAnimationFrame(() => {\n            if (this.ghostElement) {\n              const transform = `translate3d(${transformX}px, ${transformY}px, 0px)`;\n              this.setElementStyles(this.ghostElement, {\n                transform,\n                '-webkit-transform': transform,\n                '-ms-transform': transform,\n                '-moz-transform': transform,\n                '-o-transform': transform,\n              });\n            }\n          });\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData,\n            target,\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (!this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n          'document',\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.pointerMove$.next({\n              event: mouseMoveEvent,\n              clientX: mouseMoveEvent.clientX,\n              clientY: mouseMoveEvent.clientY,\n            });\n          }\n        );\n      }\n      this.pointerDown$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button === 0) {\n      if (this.eventListenerSubscriptions.mousemove) {\n        this.eventListenerSubscriptions.mousemove();\n        delete this.eventListenerSubscriptions.mousemove;\n      }\n      this.pointerUp$.next({\n        event,\n        clientX: event.clientX,\n        clientY: event.clientY,\n      });\n    }\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    let hasContainerScrollbar: boolean;\n    if (\n      (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n      this.touchStartLongPress\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n\n    if (!this.eventListenerSubscriptions.touchmove) {\n      const contextMenuListener = fromEvent(\n        this.document,\n        'contextmenu'\n      ).subscribe((e) => {\n        e.preventDefault();\n      });\n\n      const touchMoveListener = fromEvent(\n        this.document,\n        'touchmove',\n        {\n          passive: false,\n        }\n      ).subscribe((touchMoveEvent) => {\n        if (\n          ((this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n            this.touchStartLongPress) &&\n          !isDragActivated &&\n          hasContainerScrollbar\n        ) {\n          isDragActivated = this.shouldBeginDrag(\n            event,\n            touchMoveEvent,\n            startScrollPosition\n          );\n        }\n        if (\n          ((!this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag) &&\n            !this.touchStartLongPress) ||\n          !hasContainerScrollbar ||\n          isDragActivated\n        ) {\n          touchMoveEvent.preventDefault();\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY,\n          });\n        }\n      });\n\n      this.eventListenerSubscriptions.touchmove = () => {\n        contextMenuListener.unsubscribe();\n        touchMoveListener.unsubscribe();\n      };\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY,\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n\n      if (\n        (this.scrollContainer && this.scrollContainer.activeLongPressDrag) ||\n        this.touchStartLongPress\n      ) {\n        this.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY,\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    }\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach((type) => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach((key) => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollElement() {\n    if (this.scrollContainer) {\n      return this.scrollContainer.elementRef.nativeElement;\n    } else {\n      return this.document.body;\n    }\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft,\n      };\n    } else {\n      return {\n        top: window.pageYOffset || this.document.documentElement.scrollTop,\n        left: window.pageXOffset || this.document.documentElement.scrollLeft,\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: { top: number; left: number }\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left),\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    const longPressConfig = this.touchStartLongPress\n      ? this.touchStartLongPress\n      : /* istanbul ignore next */\n        {\n          delta: this.scrollContainer.longPressConfig.delta,\n          delay: this.scrollContainer.longPressConfig.duration,\n        };\n    if (\n      deltaTotal > longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= longPressConfig.delay) {\n      this.disableScroll();\n      return true;\n    }\n    return false;\n  }\n\n  private enableScroll() {\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        ''\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', '');\n  }\n\n  private disableScroll() {\n    /* istanbul ignore next */\n    if (this.scrollContainer) {\n      this.renderer.setStyle(\n        this.scrollContainer.elementRef.nativeElement,\n        'overflow',\n        'hidden'\n      );\n    }\n    this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n  }\n\n  private hasScrollbar(): boolean {\n    const scrollContainer = this.getScrollElement();\n    const containerHasHorizontalScroll =\n      scrollContainer.scrollWidth > scrollContainer.clientWidth;\n    const containerHasVerticalScroll =\n      scrollContainer.scrollHeight > scrollContainer.clientHeight;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDropParams.html":{"url":"interfaces/ValidateDropParams.html","title":"interface - ValidateDropParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidateDropParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        target\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientX value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ClientY value of the mouse location where the drop occurred\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:     EventTarget\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventTarget\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The target of the event where the drop occurred\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nimport { addClass, removeClass } from './util';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\nexport interface ValidateDropParams {\n  /**\n   * ClientX value of the mouse location where the drop occurred\n   */\n  clientX: number;\n  /**\n   * ClientY value of the mouse location where the drop occurred\n   */\n  clientY: number;\n  /**\n   * The target of the event where the drop occurred\n   */\n  target: EventTarget;\n}\n\nexport type ValidateDrop = (params: ValidateDropParams) => boolean;\n\n@Directive({\n  selector: '[mwlDroppable]',\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input() dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input() dragActiveClass: string;\n\n  /**\n   * Allow custom behaviour to control when the element is dropped\n   */\n  @Input() validateDrop: ValidateDrop;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag$) => {\n        addClass(this.renderer, this.element, this.dragActiveClass);\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true,\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData, target }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n\n            const isDropAllowed =\n              !this.validateDrop ||\n              this.validateDrop({ clientX, clientY, target });\n\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isDropAllowed &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement && isDropAllowed;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter((overlapsNow) => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            addClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData,\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            removeClass(this.renderer, this.element, this.dragOverClass);\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData,\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            removeClass(this.renderer, this.element, this.dragActiveClass);\n            if (dragOverActive) {\n              removeClass(this.renderer, this.element, this.dragOverClass);\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData,\n                });\n              });\n            }\n          },\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n4.6.0 (2020-12-28)\nFeatures\n\nadd validateDrop to mwlDroppable directive (#111) (8850ddf)\n\n4.5.6 (2020-10-22)\nBug Fixes\n\nprevent error on drag end (4a6bdbb)\n\n4.5.5 (2020-10-20)\nBug Fixes\n\nensure dragging output is never called unless dragging an item (1661d72)\n\n4.5.4 (2020-09-12)\nBug Fixes\n\nupgrade dom auto scroller library to prevent commonjs warnings (3f079fe)\n\n4.5.3 (2020-07-09)\n4.5.2 (2020-07-09)\n4.5.1 (2020-06-19)\n4.5.0 (2020-06-17)\nFeatures\n\nallow auto scroll options to be configured (46892ac)\n\n4.4.6 (2020-05-29)\nBug Fixes\n\numd: use correct sourcemaps in umd bundle (30cfca3)\n\n4.4.5 (2020-05-22)\nBug Fixes\n\nallow any angular version above 6 (2aff5f0)\n\n4.4.4 (2020-04-19)\nBug Fixes\n\nalways disable document scroll when dragging (7276cab)\n\n4.4.3 (2020-04-19)\nBug Fixes\n\ndisable text selection in safari (d044523)\n\n4.4.2 (2020-04-19)\nBug Fixes\n\nonly enable long press drag delay if inside a scrollable element (0a30e09)\nremove scroll glitch on touch devices when dragging (fe9bd5e)\n\n4.4.0 (2020-04-18)\nFeatures\n\nallow setting drag start delay on touch devices (c9b28a5)\n\nBug Fixes\n\ndisable text selection when dragging on ios safari (ca83a33)\n\n4.3.12 (2020-04-12)\nBug Fixes\n\nremove need for server side rendering hacks (7c96113)\n\n4.3.11 (2020-04-12)\nBug Fixes\n\nallow multiple dragActiveClass (60844ec)\nsupport multiple drag over and drag active classes (ad50f0e)\n\n4.3.10 (2020-03-01)\n4.3.9 (2020-03-01)\nBug Fixes\n\nonly allow dragging when using a left click (d3eecde)\n\n4.3.8 (2019-10-18)\n4.3.7 (2019-10-11)\nBug Fixes\n\nrevert change to ghost element positioning (e0128e5)\n\n4.3.6 (2019-10-11)\n4.3.5 (2019-10-08)\n4.3.4 (2019-10-08)\nBug Fixes\n\nrestore compatibility with angular 6 and 7 (f110c8e), closes #97\n\n4.3.3 (2019-10-07)\nBug Fixes\n\nallow angular 9 peer dependency (cb7cf2e)\n\n\n4.3.2 (2019-06-26)\nBug Fixes\n\nrestore compatibility with stackblitz (ee94dc5)\n\n\n4.3.1 (2019-06-05)\nBug Fixes\n\nrestore compatibility with angular universal (7fbaa2a)\n\n\n4.3.0 (2019-04-21)\nBug Fixes\n\nexpose ValidateDrag type (32f4ce3)\n\nFeatures\n\nexpose css transform on validate drag function (3c5c5b9)\nsupport auto scrolling when dragging (78bdeb5)\n\n\n4.2.0 (2019-03-17)\nFeatures\n\nexpose ghost element and starting mouse position on ghost element created event (d233788), closes #81 #85\n\n\n4.1.0 (2019-02-17)\nBug Fixes\n\nallow angular 8 peer dependency (f936805)\n\nFeatures\n\ndraggable-scroll-container: Added input activeLongPressDrag (#79) (f98f586), closes #78\n\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @mattlewis92/dom-autoscroller : ^2.4.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isCoordinateWithinRectangle\n                        \n                        \n                    \n                \n            \n            \n                \nisCoordinateWithinRectangle(clientX, clientY, rect)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientX\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientY\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rect\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp],\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `,\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}Note: if draggable elements are inside a scrollable element then you will need to add mwlDraggableScrollContainer as an attribute to the scrollable container.\nYou may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                        \n                            ValidateDrop   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrag\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ValidateDrop\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
