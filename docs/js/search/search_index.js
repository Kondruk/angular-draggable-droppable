var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.091,1,0.571]],["body/interfaces/Coordinates.html",[0,0.166,1,0.914,2,0.319,3,0.274,4,0.231,5,0.231,6,0.318,7,0.473,8,0.274,9,0.884,10,1.24,11,1.24,12,1.073,13,0.535,14,0.044,15,0.523,16,0.226,17,0.544,18,0.544,19,0.544,20,0.802,21,0.914,22,0.782,23,0.62,24,0.789,25,0.544,26,0.789,27,0.532,28,0.789,29,0.789,30,0.473,31,0.231,32,1.034,33,0.62,34,0.836,35,0.941,36,0.532,37,0.367,38,0.62,39,0.532,40,0.532,41,0.532,42,0.532,43,0.418,44,1.111,45,0.739,46,0.789,47,0.532,48,0.418,49,0.532,50,0.739,51,0.418,52,0.831,53,0.532,54,0.925,55,0.473,56,0.406,57,0.484,58,0.367,59,0.686,60,0.836,61,0.91,62,0.62,63,0.473,64,1.04,65,0.473,66,1.04,67,0.473,68,0.473,69,0.925,70,0.702,71,1.173,72,0.739,73,0.532,74,0.702,75,0.928,76,0.928,77,0.597,78,1.163,79,1.123,80,0.836,81,0.789,82,0.789,83,0.473,84,0.718,85,1.111,86,0.319,87,0.473,88,0.343,89,0.418,90,0.319,91,0.532,92,0.473,93,0.532,94,0.319,95,0.62,96,0.702,97,0.789,98,0.853,99,0.418,100,0.692,101,0.418,102,0.473,103,0.836,104,0.925,105,0.702,106,0.473,107,0.532,108,0.649,109,0.473,110,0.532,111,0.473,112,0.532,113,0.836,114,0.367,115,0.473,116,0.766,117,0.473,118,0.473,119,0.544,120,0.367,121,0.473,122,0.418,123,1.04,124,0.473,125,0.418,126,0.473,127,0.532,128,0.473,129,0.532,130,0.532,131,0.941,132,0.473,133,0.831,134,0.702,135,0.836,136,0.473,137,0.473,138,0.532,139,0.473,140,0.91,141,0.191,142,0.418,143,0.367,144,0.532,145,0.473,146,0.473,147,0.62,148,0.473,149,0.473,150,0.925,151,0.987,152,0.532,153,0.941,154,0.532,155,0.979,156,0.532,157,0.789,158,1.25,159,0.702,160,0.702,161,0.789,162,0.789,163,0.789,164,0.702,165,0.789,166,0.789,167,0.532,168,0.789,169,0.702,170,1.025,171,0.532,172,0.367,173,0.367,174,0.319,175,0.532,176,0.62,177,0.532,178,0.367,179,0.789,180,0.981,181,0.532,182,0.532,183,0.789,184,0.532,185,0.702,186,0.532,187,0.532,188,0.418,189,0.532,190,0.473,191,0.532,192,0.789,193,0.993,194,0.532,195,0.473,196,0.473,197,0.367,198,1.111,199,0.532,200,0.789,201,0.532,202,0.532,203,0.702,204,0.532,205,0.532,206,0.532,207,0.532,208,0.473,209,0.789,210,0.925,211,1.04,212,0.702,213,0.789,214,0.532,215,1.111,216,1.04,217,0.532,218,0.532,219,0.62,220,0.319,221,0.935,222,0.532,223,0.789,224,0.532,225,0.739,226,0.532,227,0.941,228,0.873,229,0.532,230,0.532,231,0.532,232,0.532,233,0.532,234,0.532,235,0.532,236,0.532,237,0.532,238,1.04,239,0.789,240,0.532,241,1.04,242,0.789,243,0.532,244,0.532,245,0.532,246,0.532,247,0.532,248,0.941,249,0.941,250,0.941,251,0.532,252,0.941,253,0.941,254,0.532,255,0.941,256,0.789,257,0.789,258,0.789,259,0.532,260,0.789,261,0.789,262,0.532,263,0.789,264,0.789,265,0.532,266,0.789,267,0.941,268,0.532,269,0.532,270,0.532,271,0.532,272,0.532,273,0.702,274,0.473,275,0.418,276,0.972,277,0.62,278,0.532,279,0.367,280,0.418,281,0.925,282,0.532,283,0.532,284,0.789,285,0.789,286,0.532,287,0.532,288,0.532,289,0.532,290,0.941,291,0.532,292,0.473,293,1.04,294,0.532,295,1.04,296,0.532,297,0.532,298,0.532,299,0.532,300,0.532,301,0.532,302,0.789,303,0.532,304,0.532,305,0.532,306,0.532,307,0.532,308,0.532,309,0.532,310,0.532,311,0.789,312,0.532,313,0.532,314,0.532,315,0.532,316,0.532,317,0.941,318,0.532,319,0.532,320,0.532,321,0.532,322,0.739,323,0.532,324,0.532,325,0.418,326,0.532,327,0.532,328,0.532,329,0.532,330,0.532,331,0.532,332,0.62,333,0.532,334,0.532,335,0.532,336,0.532,337,0.532,338,0.532,339,0.532,340,0.532,341,0.532,342,0.532,343,0.532,344,0.532,345,0.532,346,0.532,347,0.532,348,0.532,349,0.532,350,0.418,351,0.789,352,0.532,353,0.532,354,0.532,355,0.532,356,0.532,357,1.04,358,0.941,359,0.532,360,0.473,361,0.532,362,0.871,363,0.532,364,0.532,365,0.532,366,0.532,367,0.532,368,0.532,369,0.789,370,0.532,371,0.532,372,0.532,373,0.532,374,0.532,375,0.532,376,1.111,377,0.789,378,0.789,379,0.532,380,0.532,381,0.789,382,0.789,383,0.789,384,0.532,385,0.941,386,0.789,387,0.532,388,0.532,389,0.473,390,0.532,391,1.04,392,1.111,393,1.04,394,0.941,395,0.941,396,0.532,397,1.111,398,1.04,399,0.532,400,0.789,401,0.789,402,0.789,403,0.789,404,0.532,405,0.532,406,0.532,407,0.532,408,0.532,409,0.532,410,0.532,411,0.532,412,0.532,413,0.532,414,0.532,415,0.532,416,0.789,417,0.532,418,0.789,419,0.532,420,0.532,421,0.532,422,0.532,423,0.532,424,0.532,425,0.532,426,0.532,427,0.532,428,0.532,429,0.532,430,0.532,431,0.532,432,0.532,433,0.532,434,0.789,435,0.789,436,0.789,437,0.789,438,0.789,439,0.789,440,0.532,441,0.789,442,0.702,443,0.532,444,0.532,445,0.023,446,0.023]],["title/modules/DragAndDropModule.html",[447,1.411,448,1.586]],["body/modules/DragAndDropModule.html",[2,0.672,3,0.576,4,0.487,5,0.487,6,0.37,14,0.043,15,0.608,31,0.487,56,0.732,57,0.576,58,0.773,59,0.7,88,0.487,89,1.118,445,0.038,446,0.038,447,2.177,448,2.822,449,4.547,450,4.547,451,4.291,452,3.518,453,4.291,454,4.547,455,4.547]],["title/interfaces/DragAxis.html",[0,0.091,60,0.646]],["body/interfaces/DragAxis.html",[0,0.166,1,0.873,2,0.319,3,0.274,4,0.231,5,0.231,6,0.318,7,0.473,8,0.274,9,0.884,10,1.24,11,1.24,12,1.037,13,0.535,14,0.044,15,0.523,16,0.226,17,0.544,18,0.544,19,0.544,20,0.802,21,0.914,22,0.782,23,0.62,24,0.789,25,0.544,26,0.789,27,0.532,28,0.789,29,0.789,30,0.473,31,0.231,32,1.034,33,0.62,34,0.836,35,0.941,36,0.532,37,0.367,38,0.62,39,0.532,40,0.532,41,0.532,42,0.532,43,0.418,44,1.111,45,0.739,46,0.789,47,0.532,48,0.418,49,0.532,50,0.739,51,0.418,52,0.831,53,0.532,54,0.925,55,0.473,56,0.406,57,0.484,58,0.367,59,0.686,60,0.925,61,0.942,62,0.62,63,0.473,64,1.04,65,0.473,66,1.04,67,0.473,68,0.473,69,0.925,70,0.702,71,1.173,72,0.739,73,0.532,74,0.702,75,0.928,76,0.928,77,0.597,78,1.163,79,1.123,80,0.836,81,0.789,82,0.789,83,0.473,84,0.718,85,1.111,86,0.319,87,0.473,88,0.343,89,0.418,90,0.319,91,0.532,92,0.473,93,0.532,94,0.319,95,0.62,96,0.702,97,0.789,98,0.853,99,0.418,100,0.692,101,0.418,102,0.473,103,0.836,104,0.925,105,0.702,106,0.473,107,0.532,108,0.649,109,0.473,110,0.532,111,0.473,112,0.532,113,0.836,114,0.367,115,0.473,116,0.766,117,0.473,118,0.473,119,0.544,120,0.367,121,0.473,122,0.418,123,1.04,124,0.473,125,0.418,126,0.473,127,0.532,128,0.473,129,0.532,130,0.532,131,0.941,132,0.473,133,0.831,134,0.702,135,0.836,136,0.473,137,0.473,138,0.532,139,0.473,140,0.91,141,0.191,142,0.418,143,0.367,144,0.532,145,0.473,146,0.473,147,0.62,148,0.473,149,0.473,150,0.925,151,0.987,152,0.532,153,0.941,154,0.532,155,0.979,156,0.532,157,0.789,158,1.25,159,0.702,160,0.702,161,0.789,162,0.789,163,0.789,164,0.702,165,0.789,166,0.789,167,0.532,168,0.789,169,0.702,170,1.025,171,0.532,172,0.367,173,0.367,174,0.319,175,0.532,176,0.62,177,0.532,178,0.367,179,0.789,180,0.981,181,0.532,182,0.532,183,0.789,184,0.532,185,0.702,186,0.532,187,0.532,188,0.418,189,0.532,190,0.473,191,0.532,192,0.789,193,0.993,194,0.532,195,0.473,196,0.473,197,0.367,198,1.111,199,0.532,200,0.789,201,0.532,202,0.532,203,0.702,204,0.532,205,0.532,206,0.532,207,0.532,208,0.473,209,0.789,210,0.925,211,1.04,212,0.702,213,0.789,214,0.532,215,1.111,216,1.04,217,0.532,218,0.532,219,0.62,220,0.319,221,0.935,222,0.532,223,0.789,224,0.532,225,0.739,226,0.532,227,0.941,228,0.873,229,0.532,230,0.532,231,0.532,232,0.532,233,0.532,234,0.532,235,0.532,236,0.532,237,0.532,238,1.04,239,0.789,240,0.532,241,1.04,242,0.789,243,0.532,244,0.532,245,0.532,246,0.532,247,0.532,248,0.941,249,0.941,250,0.941,251,0.532,252,0.941,253,0.941,254,0.532,255,0.941,256,0.789,257,0.789,258,0.789,259,0.532,260,0.789,261,0.789,262,0.532,263,0.789,264,0.789,265,0.532,266,0.789,267,0.941,268,0.532,269,0.532,270,0.532,271,0.532,272,0.532,273,0.702,274,0.473,275,0.418,276,0.972,277,0.62,278,0.532,279,0.367,280,0.418,281,0.925,282,0.532,283,0.532,284,0.789,285,0.789,286,0.532,287,0.532,288,0.532,289,0.532,290,0.941,291,0.532,292,0.473,293,1.04,294,0.532,295,1.04,296,0.532,297,0.532,298,0.532,299,0.532,300,0.532,301,0.532,302,0.789,303,0.532,304,0.532,305,0.532,306,0.532,307,0.532,308,0.532,309,0.532,310,0.532,311,0.789,312,0.532,313,0.532,314,0.532,315,0.532,316,0.532,317,0.941,318,0.532,319,0.532,320,0.532,321,0.532,322,0.739,323,0.532,324,0.532,325,0.418,326,0.532,327,0.532,328,0.532,329,0.532,330,0.532,331,0.532,332,0.62,333,0.532,334,0.532,335,0.532,336,0.532,337,0.532,338,0.532,339,0.532,340,0.532,341,0.532,342,0.532,343,0.532,344,0.532,345,0.532,346,0.532,347,0.532,348,0.532,349,0.532,350,0.418,351,0.789,352,0.532,353,0.532,354,0.532,355,0.532,356,0.532,357,1.04,358,0.941,359,0.532,360,0.473,361,0.532,362,0.871,363,0.532,364,0.532,365,0.532,366,0.532,367,0.532,368,0.532,369,0.789,370,0.532,371,0.532,372,0.532,373,0.532,374,0.532,375,0.532,376,1.111,377,0.789,378,0.789,379,0.532,380,0.532,381,0.789,382,0.789,383,0.789,384,0.532,385,0.941,386,0.789,387,0.532,388,0.532,389,0.473,390,0.532,391,1.04,392,1.111,393,1.04,394,0.941,395,0.941,396,0.532,397,1.111,398,1.04,399,0.532,400,0.789,401,0.789,402,0.789,403,0.789,404,0.532,405,0.532,406,0.532,407,0.532,408,0.532,409,0.532,410,0.532,411,0.532,412,0.532,413,0.532,414,0.532,415,0.532,416,0.789,417,0.532,418,0.789,419,0.532,420,0.532,421,0.532,422,0.532,423,0.532,424,0.532,425,0.532,426,0.532,427,0.532,428,0.532,429,0.532,430,0.532,431,0.532,432,0.532,433,0.532,434,0.789,435,0.789,436,0.789,437,0.789,438,0.789,439,0.789,440,0.532,441,0.789,442,0.702,443,0.532,444,0.532,445,0.023,446,0.023]],["title/interfaces/DragEndEvent.html",[0,0.091,68,0.646]],["body/interfaces/DragEndEvent.html",[0,0.166,1,0.915,2,0.32,3,0.274,4,0.232,5,0.232,6,0.318,7,0.474,8,0.274,9,0.885,10,1.222,11,1.222,12,1.038,13,0.484,14,0.044,15,0.523,16,0.226,17,0.545,18,0.545,19,0.545,20,0.803,21,0.915,22,0.782,23,0.621,24,0.79,25,0.545,26,0.79,27,0.533,28,0.79,29,0.79,30,0.474,31,0.232,32,1.035,33,0.621,34,0.837,35,0.941,36,0.533,37,0.368,38,0.621,39,0.533,40,0.533,41,0.533,42,0.533,43,0.419,44,1.112,45,0.74,46,0.79,47,0.533,48,0.419,49,0.533,50,0.74,51,0.419,52,0.831,53,0.533,54,0.925,55,0.474,56,0.407,57,0.484,58,0.368,59,0.687,60,0.837,61,0.928,62,0.621,63,0.474,64,1.112,65,0.474,66,1.041,67,0.474,68,0.703,69,1.071,70,0.703,71,1.174,72,0.74,73,0.533,74,0.703,75,0.928,76,0.928,77,0.597,78,1.164,79,1.124,80,0.837,81,0.79,82,0.79,83,0.474,84,0.718,85,1.112,86,0.32,87,0.474,88,0.343,89,0.419,90,0.32,91,0.533,92,0.474,93,0.533,94,0.32,95,0.621,96,0.703,97,0.79,98,0.853,99,0.419,100,0.693,101,0.419,102,0.474,103,0.837,104,0.925,105,0.703,106,0.474,107,0.533,108,0.649,109,0.474,110,0.533,111,0.474,112,0.533,113,0.837,114,0.368,115,0.474,116,0.767,117,0.474,118,0.474,119,0.545,120,0.368,121,0.474,122,0.419,123,1.041,124,0.474,125,0.419,126,0.474,127,0.533,128,0.474,129,0.533,130,0.533,131,0.941,132,0.474,133,0.831,134,0.703,135,0.837,136,0.474,137,0.474,138,0.533,139,0.474,140,0.911,141,0.191,142,0.419,143,0.368,144,0.533,145,0.474,146,0.474,147,0.621,148,0.474,149,0.474,150,0.925,151,0.988,152,0.533,153,0.941,154,0.533,155,0.979,156,0.533,157,0.79,158,1.25,159,0.703,160,0.703,161,0.79,162,0.79,163,0.79,164,0.703,165,0.79,166,0.79,167,0.533,168,0.79,169,0.703,170,1.025,171,0.533,172,0.368,173,0.368,174,0.32,175,0.533,176,0.621,177,0.533,178,0.368,179,0.79,180,0.981,181,0.533,182,0.533,183,0.79,184,0.533,185,0.703,186,0.533,187,0.533,188,0.419,189,0.533,190,0.474,191,0.533,192,0.79,193,0.993,194,0.533,195,0.474,196,0.474,197,0.368,198,1.112,199,0.533,200,0.79,201,0.533,202,0.533,203,0.703,204,0.533,205,0.533,206,0.533,207,0.533,208,0.474,209,0.79,210,0.925,211,1.041,212,0.703,213,0.79,214,0.533,215,1.112,216,1.041,217,0.533,218,0.533,219,0.621,220,0.32,221,0.936,222,0.533,223,0.79,224,0.533,225,0.74,226,0.533,227,0.941,228,0.874,229,0.533,230,0.533,231,0.533,232,0.533,233,0.533,234,0.533,235,0.533,236,0.533,237,0.533,238,1.041,239,0.79,240,0.533,241,1.041,242,0.79,243,0.533,244,0.533,245,0.533,246,0.533,247,0.533,248,0.941,249,0.941,250,0.941,251,0.533,252,0.941,253,0.941,254,0.533,255,0.941,256,0.79,257,0.79,258,0.79,259,0.533,260,0.79,261,0.79,262,0.533,263,0.79,264,0.79,265,0.533,266,0.79,267,0.941,268,0.533,269,0.533,270,0.533,271,0.533,272,0.533,273,0.703,274,0.474,275,0.419,276,0.972,277,0.621,278,0.533,279,0.368,280,0.419,281,0.925,282,0.533,283,0.533,284,0.79,285,0.79,286,0.533,287,0.533,288,0.533,289,0.533,290,0.941,291,0.533,292,0.474,293,1.041,294,0.533,295,1.041,296,0.533,297,0.533,298,0.533,299,0.533,300,0.533,301,0.533,302,0.79,303,0.533,304,0.533,305,0.533,306,0.533,307,0.533,308,0.533,309,0.533,310,0.533,311,0.79,312,0.533,313,0.533,314,0.533,315,0.533,316,0.533,317,0.941,318,0.533,319,0.533,320,0.533,321,0.533,322,0.74,323,0.533,324,0.533,325,0.419,326,0.533,327,0.533,328,0.533,329,0.533,330,0.533,331,0.533,332,0.621,333,0.533,334,0.533,335,0.533,336,0.533,337,0.533,338,0.533,339,0.533,340,0.533,341,0.533,342,0.533,343,0.533,344,0.533,345,0.533,346,0.533,347,0.533,348,0.533,349,0.533,350,0.419,351,0.79,352,0.533,353,0.533,354,0.533,355,0.533,356,0.533,357,1.041,358,0.941,359,0.533,360,0.474,361,0.533,362,0.872,363,0.533,364,0.533,365,0.533,366,0.533,367,0.533,368,0.533,369,0.79,370,0.533,371,0.533,372,0.533,373,0.533,374,0.533,375,0.533,376,1.112,377,0.79,378,0.79,379,0.533,380,0.533,381,0.79,382,0.79,383,0.79,384,0.533,385,0.941,386,0.79,387,0.533,388,0.533,389,0.474,390,0.533,391,1.041,392,1.112,393,1.041,394,0.941,395,0.941,396,0.533,397,1.112,398,1.041,399,0.533,400,0.79,401,0.79,402,0.79,403,0.79,404,0.533,405,0.533,406,0.533,407,0.533,408,0.533,409,0.533,410,0.533,411,0.533,412,0.533,413,0.533,414,0.533,415,0.533,416,0.79,417,0.533,418,0.79,419,0.533,420,0.533,421,0.533,422,0.533,423,0.533,424,0.533,425,0.533,426,0.533,427,0.533,428,0.533,429,0.533,430,0.533,431,0.533,432,0.533,433,0.533,434,0.79,435,0.79,436,0.79,437,0.79,438,0.79,439,0.79,440,0.533,441,0.79,442,0.703,443,0.533,444,0.533,445,0.023,446,0.023]],["title/interfaces/DragMoveEvent.html",[0,0.091,67,0.646]],["body/interfaces/DragMoveEvent.html",[0,0.166,1,0.916,2,0.321,3,0.275,4,0.232,5,0.232,6,0.319,7,0.476,10,1.223,11,1.223,12,1.038,13,0.408,14,0.044,15,0.524,16,0.227,17,0.546,18,0.546,19,0.546,20,0.804,21,0.916,22,0.783,23,0.623,24,0.792,25,0.546,26,0.792,27,0.535,28,0.792,29,0.792,30,0.475,31,0.232,32,1.036,33,0.623,34,0.839,35,0.943,36,0.535,37,0.369,38,0.623,39,0.535,40,0.535,41,0.535,42,0.535,43,0.421,44,1.113,45,0.741,46,0.792,47,0.535,48,0.421,49,0.535,50,0.741,51,0.421,52,0.832,53,0.535,54,0.927,55,0.476,56,0.408,57,0.485,58,0.369,59,0.687,60,0.839,61,0.911,62,0.623,63,0.476,64,1.113,65,0.476,66,1.043,67,0.704,68,0.476,69,0.927,70,0.704,71,1.175,72,0.741,73,0.535,74,0.704,75,0.929,76,0.929,77,0.597,78,1.166,79,1.125,80,0.839,81,0.792,82,0.792,83,0.476,84,0.718,85,1.113,86,0.321,87,0.476,88,0.344,89,0.421,90,0.321,91,0.535,92,0.476,93,0.535,94,0.321,95,0.623,96,0.704,97,0.792,98,0.854,99,0.421,100,0.693,101,0.421,102,0.476,103,0.839,104,0.927,105,0.704,106,0.476,107,0.535,108,0.651,109,0.476,110,0.535,111,0.476,112,0.535,113,0.839,114,0.369,115,0.476,116,0.768,117,0.476,118,0.476,119,0.546,120,0.369,121,0.476,122,0.421,123,1.043,124,0.476,125,0.421,126,0.476,127,0.535,128,0.476,129,0.535,130,0.535,131,0.943,132,0.476,133,0.832,134,0.704,135,0.839,136,0.476,137,0.476,138,0.535,139,0.476,140,0.911,141,0.192,142,0.421,143,0.369,144,0.535,145,0.476,146,0.476,147,0.623,148,0.476,149,0.476,150,0.927,151,0.99,152,0.535,153,0.943,154,0.535,155,0.979,156,0.535,157,0.792,158,1.25,159,0.704,160,0.704,161,0.792,162,0.792,163,0.792,164,0.704,165,0.792,166,0.792,167,0.535,168,0.792,169,0.704,170,1.026,171,0.535,172,0.369,173,0.369,174,0.321,175,0.535,176,0.623,177,0.535,178,0.369,179,0.792,180,0.982,181,0.535,182,0.535,183,0.792,184,0.535,185,0.704,186,0.535,187,0.535,188,0.421,189,0.535,190,0.476,191,0.535,192,0.792,193,0.994,194,0.535,195,0.476,196,0.476,197,0.369,198,1.113,199,0.535,200,0.792,201,0.535,202,0.535,203,0.704,204,0.535,205,0.535,206,0.535,207,0.535,208,0.476,209,0.792,210,0.927,211,1.043,212,0.704,213,0.792,214,0.535,215,1.113,216,1.043,217,0.535,218,0.535,219,0.623,220,0.321,221,0.936,222,0.535,223,0.792,224,0.535,225,0.741,226,0.535,227,0.943,228,0.875,229,0.535,230,0.535,231,0.535,232,0.535,233,0.535,234,0.535,235,0.535,236,0.535,237,0.535,238,1.043,239,0.792,240,0.535,241,1.043,242,0.792,243,0.535,244,0.535,245,0.535,246,0.535,247,0.535,248,0.943,249,0.943,250,0.943,251,0.535,252,0.943,253,0.943,254,0.535,255,0.943,256,0.792,257,0.792,258,0.792,259,0.535,260,0.792,261,0.792,262,0.535,263,0.792,264,0.792,265,0.535,266,0.792,267,0.943,268,0.535,269,0.535,270,0.535,271,0.535,272,0.535,273,0.704,274,0.476,275,0.421,276,0.973,277,0.623,278,0.535,279,0.369,280,0.421,281,0.927,282,0.535,283,0.535,284,0.792,285,0.792,286,0.535,287,0.535,288,0.535,289,0.535,290,0.943,291,0.535,292,0.476,293,1.043,294,0.535,295,1.043,296,0.535,297,0.535,298,0.535,299,0.535,300,0.535,301,0.535,302,0.792,303,0.535,304,0.535,305,0.535,306,0.535,307,0.535,308,0.535,309,0.535,310,0.535,311,0.792,312,0.535,313,0.535,314,0.535,315,0.535,316,0.535,317,0.943,318,0.535,319,0.535,320,0.535,321,0.535,322,0.741,323,0.535,324,0.535,325,0.421,326,0.535,327,0.535,328,0.535,329,0.535,330,0.535,331,0.535,332,0.623,333,0.535,334,0.535,335,0.535,336,0.535,337,0.535,338,0.535,339,0.535,340,0.535,341,0.535,342,0.535,343,0.535,344,0.535,345,0.535,346,0.535,347,0.535,348,0.535,349,0.535,350,0.421,351,0.792,352,0.535,353,0.535,354,0.535,355,0.535,356,0.535,357,1.043,358,0.943,359,0.535,360,0.476,361,0.535,362,0.872,363,0.535,364,0.535,365,0.535,366,0.535,367,0.535,368,0.535,369,0.792,370,0.535,371,0.535,372,0.535,373,0.535,374,0.535,375,0.535,376,1.113,377,0.792,378,0.792,379,0.535,380,0.535,381,0.792,382,0.792,383,0.792,384,0.535,385,0.943,386,0.792,387,0.535,388,0.535,389,0.476,390,0.535,391,1.043,392,1.113,393,1.043,394,0.943,395,0.943,396,0.535,397,1.113,398,1.043,399,0.535,400,0.792,401,0.792,402,0.792,403,0.792,404,0.535,405,0.535,406,0.535,407,0.535,408,0.535,409,0.535,410,0.535,411,0.535,412,0.535,413,0.535,414,0.535,415,0.535,416,0.792,417,0.535,418,0.792,419,0.535,420,0.535,421,0.535,422,0.535,423,0.535,424,0.535,425,0.535,426,0.535,427,0.535,428,0.535,429,0.535,430,0.535,431,0.535,432,0.535,433,0.535,434,0.792,435,0.792,436,0.792,437,0.792,438,0.792,439,0.792,440,0.535,441,0.792,442,0.704,443,0.535,444,0.535,445,0.023,446,0.023]],["title/interfaces/DragPointerDownEvent.html",[0,0.091,63,0.646]],["body/interfaces/DragPointerDownEvent.html",[0,0.166,1,0.916,2,0.321,3,0.275,4,0.232,5,0.232,6,0.319,7,0.476,10,1.223,11,1.223,12,1.038,13,0.408,14,0.044,15,0.524,16,0.227,17,0.546,18,0.546,19,0.546,20,0.804,21,0.916,22,0.783,23,0.623,24,0.792,25,0.546,26,0.792,27,0.535,28,0.792,29,0.792,30,0.475,31,0.232,32,1.036,33,0.623,34,0.839,35,0.943,36,0.535,37,0.369,38,0.623,39,0.535,40,0.535,41,0.535,42,0.535,43,0.421,44,1.113,45,0.741,46,0.792,47,0.535,48,0.421,49,0.535,50,0.741,51,0.421,52,0.832,53,0.535,54,0.927,55,0.476,56,0.408,57,0.485,58,0.369,59,0.687,60,0.839,61,0.911,62,0.623,63,0.704,64,1.113,65,0.476,66,1.043,67,0.476,68,0.476,69,0.927,70,0.704,71,1.175,72,0.741,73,0.535,74,0.704,75,0.929,76,0.929,77,0.597,78,1.166,79,1.125,80,0.839,81,0.792,82,0.792,83,0.476,84,0.718,85,1.113,86,0.321,87,0.476,88,0.344,89,0.421,90,0.321,91,0.535,92,0.476,93,0.535,94,0.321,95,0.623,96,0.704,97,0.792,98,0.854,99,0.421,100,0.693,101,0.421,102,0.476,103,0.839,104,0.927,105,0.704,106,0.476,107,0.535,108,0.651,109,0.476,110,0.535,111,0.476,112,0.535,113,0.839,114,0.369,115,0.476,116,0.768,117,0.476,118,0.476,119,0.546,120,0.369,121,0.476,122,0.421,123,1.043,124,0.476,125,0.421,126,0.476,127,0.535,128,0.476,129,0.535,130,0.535,131,0.943,132,0.476,133,0.832,134,0.704,135,0.839,136,0.476,137,0.476,138,0.535,139,0.476,140,0.911,141,0.192,142,0.421,143,0.369,144,0.535,145,0.476,146,0.476,147,0.623,148,0.476,149,0.476,150,0.927,151,0.99,152,0.535,153,0.943,154,0.535,155,0.979,156,0.535,157,0.792,158,1.25,159,0.704,160,0.704,161,0.792,162,0.792,163,0.792,164,0.704,165,0.792,166,0.792,167,0.535,168,0.792,169,0.704,170,1.026,171,0.535,172,0.369,173,0.369,174,0.321,175,0.535,176,0.623,177,0.535,178,0.369,179,0.792,180,0.982,181,0.535,182,0.535,183,0.792,184,0.535,185,0.704,186,0.535,187,0.535,188,0.421,189,0.535,190,0.476,191,0.535,192,0.792,193,0.994,194,0.535,195,0.476,196,0.476,197,0.369,198,1.113,199,0.535,200,0.792,201,0.535,202,0.535,203,0.704,204,0.535,205,0.535,206,0.535,207,0.535,208,0.476,209,0.792,210,0.927,211,1.043,212,0.704,213,0.792,214,0.535,215,1.113,216,1.043,217,0.535,218,0.535,219,0.623,220,0.321,221,0.936,222,0.535,223,0.792,224,0.535,225,0.741,226,0.535,227,0.943,228,0.875,229,0.535,230,0.535,231,0.535,232,0.535,233,0.535,234,0.535,235,0.535,236,0.535,237,0.535,238,1.043,239,0.792,240,0.535,241,1.043,242,0.792,243,0.535,244,0.535,245,0.535,246,0.535,247,0.535,248,0.943,249,0.943,250,0.943,251,0.535,252,0.943,253,0.943,254,0.535,255,0.943,256,0.792,257,0.792,258,0.792,259,0.535,260,0.792,261,0.792,262,0.535,263,0.792,264,0.792,265,0.535,266,0.792,267,0.943,268,0.535,269,0.535,270,0.535,271,0.535,272,0.535,273,0.704,274,0.476,275,0.421,276,0.973,277,0.623,278,0.535,279,0.369,280,0.421,281,0.927,282,0.535,283,0.535,284,0.792,285,0.792,286,0.535,287,0.535,288,0.535,289,0.535,290,0.943,291,0.535,292,0.476,293,1.043,294,0.535,295,1.043,296,0.535,297,0.535,298,0.535,299,0.535,300,0.535,301,0.535,302,0.792,303,0.535,304,0.535,305,0.535,306,0.535,307,0.535,308,0.535,309,0.535,310,0.535,311,0.792,312,0.535,313,0.535,314,0.535,315,0.535,316,0.535,317,0.943,318,0.535,319,0.535,320,0.535,321,0.535,322,0.741,323,0.535,324,0.535,325,0.421,326,0.535,327,0.535,328,0.535,329,0.535,330,0.535,331,0.535,332,0.623,333,0.535,334,0.535,335,0.535,336,0.535,337,0.535,338,0.535,339,0.535,340,0.535,341,0.535,342,0.535,343,0.535,344,0.535,345,0.535,346,0.535,347,0.535,348,0.535,349,0.535,350,0.421,351,0.792,352,0.535,353,0.535,354,0.535,355,0.535,356,0.535,357,1.043,358,0.943,359,0.535,360,0.476,361,0.535,362,0.872,363,0.535,364,0.535,365,0.535,366,0.535,367,0.535,368,0.535,369,0.792,370,0.535,371,0.535,372,0.535,373,0.535,374,0.535,375,0.535,376,1.113,377,0.792,378,0.792,379,0.535,380,0.535,381,0.792,382,0.792,383,0.792,384,0.535,385,0.943,386,0.792,387,0.535,388,0.535,389,0.476,390,0.535,391,1.043,392,1.113,393,1.043,394,0.943,395,0.943,396,0.535,397,1.113,398,1.043,399,0.535,400,0.792,401,0.792,402,0.792,403,0.792,404,0.535,405,0.535,406,0.535,407,0.535,408,0.535,409,0.535,410,0.535,411,0.535,412,0.535,413,0.535,414,0.535,415,0.535,416,0.792,417,0.535,418,0.792,419,0.535,420,0.535,421,0.535,422,0.535,423,0.535,424,0.535,425,0.535,426,0.535,427,0.535,428,0.535,429,0.535,430,0.535,431,0.535,432,0.535,433,0.535,434,0.792,435,0.792,436,0.792,437,0.792,438,0.792,439,0.792,440,0.535,441,0.792,442,0.704,443,0.535,444,0.535,445,0.023,446,0.023]],["title/interfaces/DragStartEvent.html",[0,0.091,65,0.646]],["body/interfaces/DragStartEvent.html",[0,0.166,1,0.874,2,0.32,3,0.275,4,0.232,5,0.232,6,0.318,7,0.474,8,0.275,9,0.886,10,1.222,11,1.222,12,1.038,13,0.485,14,0.044,15,0.524,16,0.226,17,0.545,18,0.545,19,0.545,20,0.803,21,0.915,22,0.782,23,0.621,24,0.791,25,0.545,26,0.791,27,0.534,28,0.791,29,0.791,30,0.474,31,0.232,32,1.035,33,0.621,34,0.837,35,1.112,36,0.534,37,0.368,38,0.621,39,0.534,40,0.534,41,0.534,42,0.534,43,0.419,44,1.112,45,0.74,46,0.791,47,0.534,48,0.419,49,0.534,50,0.74,51,0.419,52,0.831,53,0.534,54,0.926,55,0.474,56,0.407,57,0.485,58,0.368,59,0.687,60,0.837,61,0.911,62,0.621,63,0.474,64,1.041,65,0.703,66,1.205,67,0.474,68,0.474,69,0.926,70,0.703,71,1.174,72,0.74,73,0.534,74,0.703,75,0.929,76,0.929,77,0.597,78,1.164,79,1.124,80,0.837,81,0.791,82,0.791,83,0.474,84,0.718,85,1.112,86,0.32,87,0.474,88,0.343,89,0.419,90,0.32,91,0.534,92,0.474,93,0.534,94,0.32,95,0.621,96,0.703,97,0.791,98,0.854,99,0.419,100,0.693,101,0.419,102,0.474,103,0.837,104,0.926,105,0.703,106,0.474,107,0.534,108,0.65,109,0.474,110,0.534,111,0.474,112,0.534,113,0.837,114,0.368,115,0.474,116,0.767,117,0.474,118,0.474,119,0.545,120,0.368,121,0.474,122,0.419,123,1.041,124,0.474,125,0.419,126,0.474,127,0.534,128,0.474,129,0.534,130,0.534,131,0.942,132,0.474,133,0.831,134,0.703,135,0.837,136,0.474,137,0.474,138,0.534,139,0.474,140,0.911,141,0.191,142,0.419,143,0.368,144,0.534,145,0.474,146,0.474,147,0.621,148,0.474,149,0.474,150,0.926,151,0.988,152,0.534,153,0.942,154,0.534,155,0.979,156,0.534,157,0.791,158,1.25,159,0.703,160,0.703,161,0.791,162,0.791,163,0.791,164,0.703,165,0.791,166,0.791,167,0.534,168,0.791,169,0.703,170,1.025,171,0.534,172,0.368,173,0.368,174,0.32,175,0.534,176,0.621,177,0.534,178,0.368,179,0.791,180,0.982,181,0.534,182,0.534,183,0.791,184,0.534,185,0.703,186,0.534,187,0.534,188,0.419,189,0.534,190,0.474,191,0.534,192,0.791,193,0.993,194,0.534,195,0.474,196,0.474,197,0.368,198,1.112,199,0.534,200,0.791,201,0.534,202,0.534,203,0.703,204,0.534,205,0.534,206,0.534,207,0.534,208,0.474,209,0.791,210,0.926,211,1.041,212,0.703,213,0.791,214,0.534,215,1.112,216,1.041,217,0.534,218,0.534,219,0.621,220,0.32,221,0.936,222,0.534,223,0.791,224,0.534,225,0.74,226,0.534,227,0.942,228,0.874,229,0.534,230,0.534,231,0.534,232,0.534,233,0.534,234,0.534,235,0.534,236,0.534,237,0.534,238,1.041,239,0.791,240,0.534,241,1.041,242,0.791,243,0.534,244,0.534,245,0.534,246,0.534,247,0.534,248,0.942,249,0.942,250,0.942,251,0.534,252,0.942,253,0.942,254,0.534,255,0.942,256,0.791,257,0.791,258,0.791,259,0.534,260,0.791,261,0.791,262,0.534,263,0.791,264,0.791,265,0.534,266,0.791,267,0.942,268,0.534,269,0.534,270,0.534,271,0.534,272,0.534,273,0.703,274,0.474,275,0.419,276,0.973,277,0.621,278,0.534,279,0.368,280,0.419,281,0.926,282,0.534,283,0.534,284,0.791,285,0.791,286,0.534,287,0.534,288,0.534,289,0.534,290,0.942,291,0.534,292,0.474,293,1.041,294,0.534,295,1.041,296,0.534,297,0.534,298,0.534,299,0.534,300,0.534,301,0.534,302,0.791,303,0.534,304,0.534,305,0.534,306,0.534,307,0.534,308,0.534,309,0.534,310,0.534,311,0.791,312,0.534,313,0.534,314,0.534,315,0.534,316,0.534,317,0.942,318,0.534,319,0.534,320,0.534,321,0.534,322,0.74,323,0.534,324,0.534,325,0.419,326,0.534,327,0.534,328,0.534,329,0.534,330,0.534,331,0.534,332,0.621,333,0.534,334,0.534,335,0.534,336,0.534,337,0.534,338,0.534,339,0.534,340,0.534,341,0.534,342,0.534,343,0.534,344,0.534,345,0.534,346,0.534,347,0.534,348,0.534,349,0.534,350,0.419,351,0.791,352,0.534,353,0.534,354,0.534,355,0.534,356,0.534,357,1.041,358,0.942,359,0.534,360,0.474,361,0.534,362,0.872,363,0.534,364,0.534,365,0.534,366,0.534,367,0.534,368,0.534,369,0.791,370,0.534,371,0.534,372,0.534,373,0.534,374,0.534,375,0.534,376,1.112,377,0.791,378,0.791,379,0.534,380,0.534,381,0.791,382,0.791,383,0.791,384,0.534,385,0.942,386,0.791,387,0.534,388,0.534,389,0.474,390,0.534,391,1.041,392,1.112,393,1.041,394,0.942,395,0.942,396,0.534,397,1.112,398,1.041,399,0.534,400,0.791,401,0.791,402,0.791,403,0.791,404,0.534,405,0.534,406,0.534,407,0.534,408,0.534,409,0.534,410,0.534,411,0.534,412,0.534,413,0.534,414,0.534,415,0.534,416,0.791,417,0.534,418,0.791,419,0.534,420,0.534,421,0.534,422,0.534,423,0.534,424,0.534,425,0.534,426,0.534,427,0.534,428,0.534,429,0.534,430,0.534,431,0.534,432,0.534,433,0.534,434,0.791,435,0.791,436,0.791,437,0.791,438,0.791,439,0.791,440,0.534,441,0.791,442,0.703,443,0.534,444,0.534,445,0.023,446,0.023]],["title/directives/DraggableDirective.html",[16,0.208,89,0.571]],["body/directives/DraggableDirective.html",[0,0.161,1,0.843,2,0.294,3,0.253,4,0.213,5,0.585,6,0.397,7,0.436,8,0.253,10,1.22,11,1.22,12,1.019,13,0.698,14,0.044,15,0.509,16,0.256,17,0.618,18,0.512,19,0.512,20,0.832,21,1.006,22,0.787,23,0.704,24,0.896,25,0.512,26,0.743,27,0.491,28,0.896,29,0.743,30,0.445,31,0.213,32,1.003,33,0.584,34,0.796,35,0.896,36,0.491,37,0.338,38,0.584,39,0.491,40,0.491,41,0.491,42,0.491,43,0.386,44,1.073,45,0.704,46,0.743,47,0.491,48,0.386,49,0.491,50,0.704,51,0.386,52,0.808,53,0.491,54,0.888,55,0.436,56,0.382,57,0.461,58,0.338,59,0.675,60,1.003,61,0.914,62,0.704,63,0.436,64,0.999,65,0.436,66,0.999,67,0.436,68,0.436,69,0.888,70,0.66,71,1.153,72,0.887,73,0.491,74,0.66,75,0.914,76,0.914,77,0.609,78,1.129,79,1.098,80,0.796,81,0.743,82,0.743,83,0.436,84,0.741,85,1.129,86,0.445,87,0.66,88,0.389,89,0.584,90,0.445,91,0.743,92,0.66,93,0.743,94,0.445,95,0.785,96,0.888,97,0.999,98,0.895,99,0.584,100,0.73,101,0.584,102,0.796,103,1.003,104,1.073,105,0.954,106,0.66,107,0.896,108,0.689,109,0.66,110,0.743,111,0.66,112,0.743,113,0.888,114,0.512,115,0.796,116,0.808,117,0.66,118,0.66,119,0.689,120,0.618,121,0.66,122,0.921,123,1.073,124,0.796,125,0.584,126,0.66,127,0.743,128,0.66,129,0.743,130,0.743,131,0.999,132,0.796,133,0.914,134,0.888,135,0.954,136,0.66,137,0.66,138,0.743,139,0.796,140,0.895,141,0.266,142,0.584,143,0.512,144,0.743,145,0.66,146,0.66,147,0.785,148,0.66,149,0.796,150,1.003,151,0.954,152,0.491,153,0.896,154,0.491,155,0.97,156,0.491,157,0.743,158,1.237,159,0.66,160,0.66,161,0.743,162,0.743,163,0.743,164,0.66,165,0.743,166,0.743,167,0.491,168,0.743,169,0.66,170,1.006,171,0.491,172,0.338,173,0.338,174,0.294,175,0.491,176,0.584,177,0.491,178,0.338,179,0.743,180,0.973,181,0.491,182,0.491,183,0.743,184,0.491,185,0.66,186,0.491,187,0.491,188,0.386,189,0.491,190,0.436,191,0.491,192,0.743,193,0.971,194,0.491,195,0.436,196,0.436,197,0.338,198,1.073,199,0.491,200,0.743,201,0.491,202,0.491,203,0.66,204,0.491,205,0.491,206,0.491,207,0.491,208,0.436,209,0.743,210,0.888,211,0.999,212,0.66,213,0.743,214,0.491,215,1.073,216,0.999,217,0.491,218,0.491,219,0.584,220,0.294,221,0.922,222,0.491,223,0.743,224,0.491,225,0.704,226,0.491,227,0.896,228,0.843,229,0.491,230,0.491,231,0.491,232,0.491,233,0.491,234,0.491,235,0.491,236,0.491,237,0.491,238,0.999,239,0.743,240,0.491,241,0.999,242,0.743,243,0.491,244,0.491,245,0.491,246,0.491,247,0.491,248,0.896,249,0.896,250,0.896,251,0.491,252,0.896,253,0.896,254,0.491,255,0.896,256,0.743,257,0.743,258,0.743,259,0.491,260,0.743,261,0.743,262,0.491,263,0.743,264,0.743,265,0.491,266,0.743,267,0.896,268,0.491,269,0.491,270,0.491,271,0.491,272,0.491,273,0.66,274,0.436,275,0.386,276,0.949,277,0.584,278,0.491,279,0.338,280,0.386,281,0.888,282,0.491,283,0.491,284,0.743,285,0.743,286,0.491,287,0.491,288,0.491,289,0.491,290,0.896,291,0.491,292,0.436,293,0.999,294,0.491,295,0.999,296,0.491,297,0.491,298,0.491,299,0.491,300,0.491,301,0.491,302,0.743,303,0.491,304,0.491,305,0.491,306,0.491,307,0.491,308,0.491,309,0.491,310,0.491,311,0.743,312,0.491,313,0.491,314,0.491,315,0.491,316,0.491,317,0.896,318,0.491,319,0.491,320,0.491,321,0.491,322,0.704,323,0.491,324,0.491,325,0.386,326,0.491,327,0.491,328,0.491,329,0.491,330,0.491,331,0.491,332,0.921,333,0.491,334,0.491,335,0.491,336,0.491,337,0.491,338,0.491,339,0.491,340,0.491,341,0.491,342,0.491,343,0.491,344,0.491,345,0.491,346,0.491,347,0.491,348,0.491,349,0.491,350,0.386,351,0.743,352,0.491,353,0.491,354,0.491,355,0.491,356,0.491,357,0.999,358,0.896,359,0.491,360,0.436,361,0.491,362,0.852,363,0.491,364,0.491,365,0.491,366,0.491,367,0.491,368,0.491,369,0.743,370,0.491,371,0.491,372,0.491,373,0.491,374,0.491,375,0.491,376,1.073,377,0.743,378,0.743,379,0.491,380,0.491,381,0.743,382,0.743,383,0.743,384,0.491,385,0.896,386,0.743,387,0.491,388,0.491,389,0.436,390,0.491,391,0.999,392,1.073,393,0.999,394,0.896,395,0.896,396,0.491,397,1.073,398,0.999,399,0.491,400,0.743,401,0.743,402,0.743,403,0.743,404,0.491,405,0.491,406,0.491,407,0.491,408,0.491,409,0.491,410,0.491,411,0.491,412,0.491,413,0.491,414,0.491,415,0.491,416,0.743,417,0.491,418,0.743,419,0.491,420,0.491,421,0.491,422,0.491,423,0.491,424,0.491,425,0.491,426,0.491,427,0.491,428,0.491,429,0.491,430,0.491,431,0.491,432,0.491,433,0.491,434,0.743,435,0.743,436,0.743,437,0.743,438,0.743,439,0.743,440,0.491,441,0.743,442,0.66,443,0.491,444,0.491,445,0.022,446,0.022,456,1.392,457,3.793,458,1.992,459,1.992,460,1.992,461,1.992,462,1.992,463,1.992,464,1.992,465,1.992,466,1.992,467,1.992,468,1.992,469,1.992,470,1.992,471,1.992,472,1.992]],["title/directives/DraggableScrollContainerDirective.html",[16,0.208,56,0.374]],["body/directives/DraggableScrollContainerDirective.html",[2,0.589,3,0.505,4,0.427,5,0.559,6,0.393,8,0.505,13,0.505,14,0.044,15,0.427,16,0.369,17,0.888,18,0.888,19,0.824,22,0.823,25,0.824,31,0.427,56,0.615,57,0.663,59,0.505,61,0.888,77,0.427,79,0.873,84,0.615,86,0.716,88,0.427,90,0.716,98,0.888,100,0.615,108,0.924,122,0.939,142,1.097,147,1.053,151,1.221,155,0.888,158,1.062,164,0.873,170,0.939,172,0.677,173,0.677,174,0.589,178,0.677,180,0.824,212,1.062,220,0.716,221,0.677,332,0.939,360,0.873,362,0.677,389,0.873,442,1.191,445,0.035,446,0.035,456,2.786,457,3.389,473,5.227,474,3.987,475,3.987,476,4.85,477,3.961,478,4.85,479,3.8,480,3.389,481,4.85,482,3.969,483,4.278,484,5.227,485,4.85,486,5.668,487,3.987,488,4.85,489,4.85,490,4.85,491,5.438,492,4.85,493,3.969,494,3.987,495,3.987,496,3.987,497,3.263,498,3.987,499,5.227,500,3.987,501,3.987,502,4.85,503,4.85,504,3.987,505,2.786,506,3.987,507,4.85,508,3.987,509,3.987,510,4.85,511,3.987,512,3.987]],["title/interfaces/DropEvent.html",[0,0.091,513,2.412]],["body/interfaces/DropEvent.html",[0,0.111,2,0.532,3,0.457,4,0.386,5,0.386,6,0.401,8,0.457,9,1.257,12,0.882,13,0.457,14,0.044,15,0.579,16,0.321,17,0.774,18,0.774,19,0.774,20,0.939,21,1.048,22,0.738,23,0.882,25,0.774,30,0.673,31,0.386,37,0.774,38,0.882,43,0.882,45,0.698,48,0.698,50,0.967,51,0.698,56,0.577,57,0.577,58,0.612,59,0.457,61,0.849,75,0.939,76,0.92,77,0.386,84,0.744,86,0.532,88,0.386,90,0.532,94,0.673,95,1.118,98,0.849,100,0.633,108,0.774,116,0.774,119,0.612,120,0.612,133,0.892,140,0.892,141,0.318,143,0.612,155,0.92,172,0.612,173,0.612,174,0.532,176,0.698,178,0.612,180,0.92,188,0.698,193,0.882,219,0.698,220,0.532,221,0.849,225,0.698,228,1.016,275,0.882,276,1.048,277,0.882,279,0.774,280,0.698,322,0.882,325,0.967,350,0.698,362,0.612,445,0.033,446,0.033,452,2.196,513,2.949,514,2.518,515,4.088,516,3.728,517,2.949,518,1.725,519,3.49,520,4.43,521,2.949,522,2.949,523,2.518,524,3.183,525,3.183,526,2.518,527,2.949,528,4.088,529,2.949,530,2.949,531,2.949,532,2.949,533,2.949,534,2.518,535,2.518,536,2.949,537,3.728,538,2.949,539,2.949,540,3.728,541,2.949,542,3.728,543,4.088,544,4.524,545,2.949,546,3.728,547,4.088,548,2.949,549,4.088,550,4.088,551,2.949,552,4.295,553,2.949,554,2.518,555,2.949,556,2.518,557,2.949,558,2.949,559,2.949,560,4.088,561,4.088,562,2.949,563,2.949,564,2.949,565,2.949,566,2.949,567,2.949,568,2.949,569,2.949,570,2.518,571,2.949,572,2.949]],["title/directives/DroppableDirective.html",[16,0.208,452,1.796]],["body/directives/DroppableDirective.html",[2,0.495,3,0.425,4,0.359,5,0.605,6,0.42,8,0.425,9,1.2,12,0.842,13,0.71,14,0.044,15,0.566,16,0.34,17,0.82,18,0.868,19,0.868,20,0.951,21,1.095,22,0.782,23,0.935,25,0.868,30,0.713,31,0.359,37,0.739,38,0.842,43,0.842,45,0.649,48,0.649,50,1.069,51,0.649,56,0.648,57,0.551,58,0.569,59,0.425,61,0.82,75,0.922,76,0.899,77,0.566,84,0.76,86,0.642,88,0.359,90,0.642,94,0.782,95,1.069,98,0.82,100,0.671,108,0.739,116,0.868,119,0.739,120,0.82,133,0.951,140,0.868,141,0.384,143,0.739,155,0.899,172,0.739,173,0.82,174,0.713,176,0.935,178,0.569,180,0.899,188,0.842,193,0.842,219,0.649,220,0.495,221,0.82,225,0.649,228,0.989,275,0.842,276,1.025,277,0.842,279,0.739,280,0.649,322,0.842,325,0.935,350,0.649,362,0.569,445,0.031,446,0.031,452,2.65,456,2.342,457,3.911,514,2.342,515,2.743,516,4.181,517,2.743,518,1.605,519,3.373,520,4.332,521,2.743,522,2.743,523,3.039,524,3.57,525,3.57,526,3.373,527,3.559,528,4.332,529,3.95,530,3.95,531,3.95,532,2.743,533,2.743,534,3.039,535,2.342,536,4.181,537,3.559,538,2.743,539,2.743,540,3.559,541,2.743,542,3.559,543,3.95,544,4.439,545,2.743,546,3.559,547,3.95,548,2.743,549,3.95,550,3.95,551,2.743,552,4.181,553,2.743,554,2.342,555,2.743,556,2.342,557,2.743,558,2.743,559,2.743,560,3.95,561,3.95,562,2.743,563,2.743,564,2.743,565,2.743,566,2.743,567,2.743,568,2.743,569,2.743,570,2.342,571,2.743,572,2.743,573,3.351,574,4.348,575,2.743,576,3.351,577,3.351,578,3.351,579,3.351,580,3.351,581,3.351]],["title/interfaces/GhostElementCreatedEvent.html",[0,0.091,83,0.646]],["body/interfaces/GhostElementCreatedEvent.html",[0,0.166,1,0.872,2,0.318,3,0.273,4,0.231,5,0.231,6,0.318,7,0.472,8,0.273,9,0.883,10,1.221,11,1.221,12,1.073,13,0.571,14,0.044,15,0.523,16,0.226,17,0.543,18,0.543,19,0.543,20,0.802,21,0.914,22,0.781,23,0.619,24,0.788,25,0.543,26,0.788,27,0.531,28,0.788,29,0.788,30,0.472,31,0.231,32,1.033,33,0.619,34,0.835,35,0.939,36,0.531,37,0.366,38,0.619,39,0.531,40,0.531,41,0.531,42,0.531,43,0.417,44,1.11,45,0.738,46,0.788,47,0.531,48,0.417,49,0.531,50,0.738,51,0.417,52,0.83,53,0.531,54,0.924,55,0.472,56,0.405,57,0.483,58,0.366,59,0.686,60,0.835,61,0.91,62,0.619,63,0.472,64,1.039,65,0.472,66,1.039,67,0.472,68,0.472,69,0.924,70,0.7,71,1.173,72,0.738,73,0.531,74,0.7,75,0.947,76,0.947,77,0.597,78,1.162,79,1.122,80,0.835,81,0.788,82,0.788,83,0.7,84,0.726,85,1.203,86,0.318,87,0.472,88,0.342,89,0.417,90,0.318,91,0.531,92,0.472,93,0.531,94,0.318,95,0.619,96,0.7,97,0.788,98,0.852,99,0.417,100,0.692,101,0.417,102,0.472,103,0.835,104,0.924,105,0.7,106,0.472,107,0.531,108,0.648,109,0.472,110,0.531,111,0.472,112,0.531,113,0.835,114,0.366,115,0.472,116,0.765,117,0.472,118,0.472,119,0.543,120,0.366,121,0.472,122,0.417,123,1.039,124,0.472,125,0.417,126,0.472,127,0.531,128,0.472,129,0.531,130,0.531,131,0.939,132,0.472,133,0.83,134,0.7,135,0.835,136,0.472,137,0.472,138,0.531,139,0.472,140,0.91,141,0.19,142,0.417,143,0.366,144,0.531,145,0.472,146,0.472,147,0.619,148,0.472,149,0.472,150,0.924,151,0.986,152,0.531,153,0.939,154,0.531,155,0.978,156,0.531,157,0.788,158,1.249,159,0.7,160,0.7,161,0.788,162,0.788,163,0.788,164,0.7,165,0.788,166,0.788,167,0.531,168,0.788,169,0.7,170,1.024,171,0.531,172,0.366,173,0.366,174,0.318,175,0.531,176,0.619,177,0.531,178,0.366,179,0.788,180,0.981,181,0.531,182,0.531,183,0.788,184,0.531,185,0.7,186,0.531,187,0.531,188,0.417,189,0.531,190,0.472,191,0.531,192,0.788,193,0.992,194,0.531,195,0.472,196,0.472,197,0.366,198,1.11,199,0.531,200,0.788,201,0.531,202,0.531,203,0.7,204,0.531,205,0.531,206,0.531,207,0.531,208,0.472,209,0.788,210,0.924,211,1.039,212,0.7,213,0.788,214,0.531,215,1.11,216,1.039,217,0.531,218,0.531,219,0.619,220,0.318,221,0.935,222,0.531,223,0.788,224,0.531,225,0.738,226,0.531,227,0.939,228,0.872,229,0.531,230,0.531,231,0.531,232,0.531,233,0.531,234,0.531,235,0.531,236,0.531,237,0.531,238,1.039,239,0.788,240,0.531,241,1.039,242,0.788,243,0.531,244,0.531,245,0.531,246,0.531,247,0.531,248,0.939,249,0.939,250,0.939,251,0.531,252,0.939,253,0.939,254,0.531,255,0.939,256,0.788,257,0.788,258,0.788,259,0.531,260,0.788,261,0.788,262,0.531,263,0.788,264,0.788,265,0.531,266,0.788,267,0.939,268,0.531,269,0.531,270,0.531,271,0.531,272,0.531,273,0.7,274,0.472,275,0.417,276,0.971,277,0.619,278,0.531,279,0.366,280,0.417,281,0.924,282,0.531,283,0.531,284,0.788,285,0.788,286,0.531,287,0.531,288,0.531,289,0.531,290,0.939,291,0.531,292,0.472,293,1.039,294,0.531,295,1.039,296,0.531,297,0.531,298,0.531,299,0.531,300,0.531,301,0.531,302,0.788,303,0.531,304,0.531,305,0.531,306,0.531,307,0.531,308,0.531,309,0.531,310,0.531,311,0.788,312,0.531,313,0.531,314,0.531,315,0.531,316,0.531,317,0.939,318,0.531,319,0.531,320,0.531,321,0.531,322,0.738,323,0.531,324,0.531,325,0.417,326,0.531,327,0.531,328,0.531,329,0.531,330,0.531,331,0.531,332,0.619,333,0.531,334,0.531,335,0.531,336,0.531,337,0.531,338,0.531,339,0.531,340,0.531,341,0.531,342,0.531,343,0.531,344,0.531,345,0.531,346,0.531,347,0.531,348,0.531,349,0.531,350,0.417,351,0.788,352,0.531,353,0.531,354,0.531,355,0.531,356,0.531,357,1.039,358,0.939,359,0.531,360,0.472,361,0.531,362,0.871,363,0.531,364,0.531,365,0.531,366,0.531,367,0.531,368,0.531,369,0.788,370,0.531,371,0.531,372,0.531,373,0.531,374,0.531,375,0.531,376,1.11,377,0.788,378,0.788,379,0.531,380,0.531,381,0.788,382,0.788,383,0.788,384,0.531,385,0.939,386,0.788,387,0.531,388,0.531,389,0.472,390,0.531,391,1.039,392,1.11,393,1.039,394,0.939,395,0.939,396,0.531,397,1.11,398,1.039,399,0.531,400,0.788,401,0.788,402,0.788,403,0.788,404,0.531,405,0.531,406,0.531,407,0.531,408,0.531,409,0.531,410,0.531,411,0.531,412,0.531,413,0.531,414,0.531,415,0.531,416,0.788,417,0.531,418,0.788,419,0.531,420,0.531,421,0.531,422,0.531,423,0.531,424,0.531,425,0.531,426,0.531,427,0.531,428,0.531,429,0.531,430,0.531,431,0.531,432,0.531,433,0.531,434,0.788,435,0.788,436,0.788,437,0.788,438,0.788,439,0.788,440,0.531,441,0.788,442,0.7,443,0.531,444,0.531,445,0.023,446,0.023]],["title/interfaces/PointerEvent.html",[0,0.091,74,0.646]],["body/interfaces/PointerEvent.html",[0,0.166,1,0.872,2,0.318,3,0.273,4,0.23,5,0.23,6,0.318,7,0.472,8,0.273,9,0.882,10,1.221,11,1.221,12,1.073,13,0.571,14,0.044,15,0.522,16,0.225,17,0.543,18,0.543,19,0.543,20,0.801,21,0.913,22,0.781,23,0.619,24,0.787,25,0.543,26,0.787,27,0.53,28,0.787,29,0.787,30,0.472,31,0.23,32,1.033,33,0.619,34,0.834,35,0.938,36,0.53,37,0.366,38,0.619,39,0.53,40,0.53,41,0.53,42,0.53,43,0.417,44,1.109,45,0.738,46,0.787,47,0.53,48,0.417,49,0.53,50,0.738,51,0.417,52,0.83,53,0.53,54,0.923,55,0.472,56,0.405,57,0.483,58,0.366,59,0.686,60,0.834,61,0.91,62,0.619,63,0.472,64,1.038,65,0.472,66,1.038,67,0.472,68,0.472,69,0.923,70,0.7,71,1.172,72,0.738,73,0.53,74,0.834,75,0.947,76,0.947,77,0.606,78,1.235,79,1.158,80,0.834,81,0.787,82,0.787,83,0.472,84,0.717,85,1.109,86,0.318,87,0.472,88,0.342,89,0.417,90,0.318,91,0.53,92,0.472,93,0.53,94,0.318,95,0.619,96,0.7,97,0.787,98,0.852,99,0.417,100,0.692,101,0.417,102,0.472,103,0.834,104,0.923,105,0.7,106,0.472,107,0.53,108,0.647,109,0.472,110,0.53,111,0.472,112,0.53,113,0.834,114,0.366,115,0.472,116,0.765,117,0.472,118,0.472,119,0.543,120,0.366,121,0.472,122,0.417,123,1.038,124,0.472,125,0.417,126,0.472,127,0.53,128,0.472,129,0.53,130,0.53,131,0.938,132,0.472,133,0.83,134,0.7,135,0.834,136,0.472,137,0.472,138,0.53,139,0.472,140,0.91,141,0.19,142,0.417,143,0.366,144,0.53,145,0.472,146,0.472,147,0.619,148,0.472,149,0.472,150,0.923,151,0.986,152,0.53,153,0.938,154,0.53,155,0.978,156,0.53,157,0.787,158,1.249,159,0.7,160,0.7,161,0.787,162,0.787,163,0.787,164,0.7,165,0.787,166,0.787,167,0.53,168,0.787,169,0.7,170,1.024,171,0.53,172,0.366,173,0.366,174,0.318,175,0.53,176,0.619,177,0.53,178,0.366,179,0.787,180,0.981,181,0.53,182,0.53,183,0.787,184,0.53,185,0.7,186,0.53,187,0.53,188,0.417,189,0.53,190,0.472,191,0.53,192,0.787,193,0.992,194,0.53,195,0.472,196,0.472,197,0.366,198,1.109,199,0.53,200,0.787,201,0.53,202,0.53,203,0.7,204,0.53,205,0.53,206,0.53,207,0.53,208,0.472,209,0.787,210,0.923,211,1.038,212,0.7,213,0.787,214,0.53,215,1.109,216,1.038,217,0.53,218,0.53,219,0.619,220,0.318,221,0.935,222,0.53,223,0.787,224,0.53,225,0.738,226,0.53,227,0.938,228,0.872,229,0.53,230,0.53,231,0.53,232,0.53,233,0.53,234,0.53,235,0.53,236,0.53,237,0.53,238,1.038,239,0.787,240,0.53,241,1.038,242,0.787,243,0.53,244,0.53,245,0.53,246,0.53,247,0.53,248,0.938,249,0.938,250,0.938,251,0.53,252,0.938,253,0.938,254,0.53,255,0.938,256,0.787,257,0.787,258,0.787,259,0.53,260,0.787,261,0.787,262,0.53,263,0.787,264,0.787,265,0.53,266,0.787,267,0.938,268,0.53,269,0.53,270,0.53,271,0.53,272,0.53,273,0.7,274,0.472,275,0.417,276,0.971,277,0.619,278,0.53,279,0.366,280,0.417,281,0.923,282,0.53,283,0.53,284,0.787,285,0.787,286,0.53,287,0.53,288,0.53,289,0.53,290,0.938,291,0.53,292,0.472,293,1.038,294,0.53,295,1.038,296,0.53,297,0.53,298,0.53,299,0.53,300,0.53,301,0.53,302,0.787,303,0.53,304,0.53,305,0.53,306,0.53,307,0.53,308,0.53,309,0.53,310,0.53,311,0.787,312,0.53,313,0.53,314,0.53,315,0.53,316,0.53,317,0.938,318,0.53,319,0.53,320,0.53,321,0.53,322,0.738,323,0.53,324,0.53,325,0.417,326,0.53,327,0.53,328,0.53,329,0.53,330,0.53,331,0.53,332,0.619,333,0.53,334,0.53,335,0.53,336,0.53,337,0.53,338,0.53,339,0.53,340,0.53,341,0.53,342,0.53,343,0.53,344,0.53,345,0.53,346,0.53,347,0.53,348,0.53,349,0.53,350,0.417,351,0.787,352,0.53,353,0.53,354,0.53,355,0.53,356,0.53,357,1.038,358,0.938,359,0.53,360,0.472,361,0.53,362,0.87,363,0.53,364,0.53,365,0.53,366,0.53,367,0.53,368,0.53,369,0.787,370,0.53,371,0.53,372,0.53,373,0.53,374,0.53,375,0.53,376,1.109,377,0.787,378,0.787,379,0.53,380,0.53,381,0.787,382,0.787,383,0.787,384,0.53,385,0.938,386,0.787,387,0.53,388,0.53,389,0.472,390,0.53,391,1.038,392,1.109,393,1.038,394,0.938,395,0.938,396,0.53,397,1.109,398,1.038,399,0.53,400,0.787,401,0.787,402,0.787,403,0.787,404,0.53,405,0.53,406,0.53,407,0.53,408,0.53,409,0.53,410,0.53,411,0.53,412,0.53,413,0.53,414,0.53,415,0.53,416,0.787,417,0.53,418,0.787,419,0.53,420,0.53,421,0.53,422,0.53,423,0.53,424,0.53,425,0.53,426,0.53,427,0.53,428,0.53,429,0.53,430,0.53,431,0.53,432,0.53,433,0.53,434,0.787,435,0.787,436,0.787,437,0.787,438,0.787,439,0.787,440,0.53,441,0.787,442,0.7,443,0.53,444,0.53,445,0.023,446,0.023]],["title/interfaces/SnapGrid.html",[0,0.091,62,0.571]],["body/interfaces/SnapGrid.html",[0,0.166,1,0.872,2,0.319,3,0.274,4,0.231,5,0.231,6,0.318,7,0.473,8,0.274,9,0.883,10,1.24,11,1.24,12,1.073,13,0.535,14,0.044,15,0.523,16,0.226,17,0.544,18,0.544,19,0.544,20,0.802,21,0.914,22,0.781,23,0.62,24,0.788,25,0.544,26,0.788,27,0.532,28,0.788,29,0.788,30,0.697,31,0.231,32,1.034,33,0.62,34,0.835,35,0.94,36,0.532,37,0.367,38,0.62,39,0.532,40,0.532,41,0.532,42,0.532,43,0.418,44,1.11,45,0.739,46,0.788,47,0.532,48,0.418,49,0.532,50,0.739,51,0.418,52,0.83,53,0.532,54,0.924,55,0.473,56,0.406,57,0.484,58,0.367,59,0.686,60,0.835,61,0.91,62,0.739,63,0.473,64,1.039,65,0.473,66,1.039,67,0.473,68,0.473,69,0.924,70,0.701,71,1.173,72,0.739,73,0.532,74,0.701,75,0.928,76,0.928,77,0.597,78,1.163,79,1.123,80,0.835,81,0.788,82,0.788,83,0.473,84,0.718,85,1.11,86,0.319,87,0.473,88,0.343,89,0.418,90,0.319,91,0.532,92,0.473,93,0.532,94,0.319,95,0.62,96,0.701,97,0.788,98,0.853,99,0.418,100,0.692,101,0.418,102,0.473,103,0.835,104,0.924,105,0.701,106,0.473,107,0.532,108,0.648,109,0.473,110,0.532,111,0.473,112,0.532,113,0.835,114,0.367,115,0.473,116,0.766,117,0.473,118,0.473,119,0.544,120,0.367,121,0.473,122,0.418,123,1.039,124,0.473,125,0.418,126,0.473,127,0.532,128,0.473,129,0.532,130,0.532,131,0.94,132,0.473,133,0.83,134,0.701,135,0.835,136,0.473,137,0.473,138,0.532,139,0.473,140,0.91,141,0.191,142,0.418,143,0.367,144,0.532,145,0.473,146,0.473,147,0.62,148,0.473,149,0.473,150,0.924,151,0.987,152,0.532,153,0.94,154,0.532,155,0.979,156,0.532,157,0.788,158,1.25,159,0.701,160,0.701,161,0.788,162,0.788,163,0.788,164,0.701,165,0.788,166,0.788,167,0.532,168,0.788,169,0.701,170,1.024,171,0.532,172,0.367,173,0.367,174,0.319,175,0.532,176,0.62,177,0.532,178,0.367,179,0.788,180,0.981,181,0.532,182,0.532,183,0.788,184,0.532,185,0.701,186,0.532,187,0.532,188,0.418,189,0.532,190,0.473,191,0.532,192,0.788,193,0.992,194,0.532,195,0.473,196,0.473,197,0.367,198,1.11,199,0.532,200,0.788,201,0.532,202,0.532,203,0.701,204,0.532,205,0.532,206,0.532,207,0.532,208,0.473,209,0.788,210,0.924,211,1.039,212,0.701,213,0.788,214,0.532,215,1.11,216,1.039,217,0.532,218,0.532,219,0.62,220,0.319,221,0.935,222,0.532,223,0.788,224,0.532,225,0.739,226,0.532,227,0.94,228,0.872,229,0.532,230,0.532,231,0.532,232,0.532,233,0.532,234,0.532,235,0.532,236,0.532,237,0.532,238,1.039,239,0.788,240,0.532,241,1.039,242,0.788,243,0.532,244,0.532,245,0.532,246,0.532,247,0.532,248,0.94,249,0.94,250,0.94,251,0.532,252,0.94,253,0.94,254,0.532,255,0.94,256,0.788,257,0.788,258,0.788,259,0.532,260,0.788,261,0.788,262,0.532,263,0.788,264,0.788,265,0.532,266,0.788,267,0.94,268,0.532,269,0.532,270,0.532,271,0.532,272,0.532,273,0.701,274,0.473,275,0.418,276,0.972,277,0.62,278,0.532,279,0.367,280,0.418,281,0.924,282,0.532,283,0.532,284,0.788,285,0.788,286,0.532,287,0.532,288,0.532,289,0.532,290,0.94,291,0.532,292,0.473,293,1.039,294,0.532,295,1.039,296,0.532,297,0.532,298,0.532,299,0.532,300,0.532,301,0.532,302,0.788,303,0.532,304,0.532,305,0.532,306,0.532,307,0.532,308,0.532,309,0.532,310,0.532,311,0.788,312,0.532,313,0.532,314,0.532,315,0.532,316,0.532,317,0.94,318,0.532,319,0.532,320,0.532,321,0.532,322,0.739,323,0.532,324,0.532,325,0.418,326,0.532,327,0.532,328,0.532,329,0.532,330,0.532,331,0.532,332,0.62,333,0.532,334,0.532,335,0.532,336,0.532,337,0.532,338,0.532,339,0.532,340,0.532,341,0.532,342,0.532,343,0.532,344,0.532,345,0.532,346,0.532,347,0.532,348,0.532,349,0.532,350,0.418,351,0.788,352,0.532,353,0.532,354,0.532,355,0.532,356,0.532,357,1.039,358,0.94,359,0.532,360,0.473,361,0.532,362,0.871,363,0.532,364,0.532,365,0.532,366,0.532,367,0.532,368,0.532,369,0.788,370,0.532,371,0.532,372,0.532,373,0.532,374,0.532,375,0.532,376,1.11,377,0.788,378,0.788,379,0.532,380,0.532,381,0.788,382,0.788,383,0.788,384,0.532,385,0.94,386,0.788,387,0.532,388,0.532,389,0.473,390,0.532,391,1.039,392,1.11,393,1.039,394,0.94,395,0.94,396,0.532,397,1.11,398,1.039,399,0.532,400,0.788,401,0.788,402,0.788,403,0.788,404,0.532,405,0.532,406,0.532,407,0.532,408,0.532,409,0.532,410,0.532,411,0.532,412,0.532,413,0.532,414,0.532,415,0.532,416,0.788,417,0.532,418,0.788,419,0.532,420,0.532,421,0.532,422,0.532,423,0.532,424,0.532,425,0.532,426,0.532,427,0.532,428,0.532,429,0.532,430,0.532,431,0.532,432,0.532,433,0.532,434,0.788,435,0.788,436,0.788,437,0.788,438,0.788,439,0.788,440,0.532,441,0.788,442,0.701,443,0.532,444,0.532,445,0.023,446,0.023]],["title/interfaces/TimeLongPress.html",[0,0.091,80,0.646]],["body/interfaces/TimeLongPress.html",[0,0.166,1,0.873,2,0.319,3,0.274,4,0.231,5,0.231,6,0.318,7,0.473,8,0.274,9,0.884,10,1.222,11,1.222,12,1.073,13,0.535,14,0.044,15,0.523,16,0.226,17,0.544,18,0.544,19,0.544,20,0.802,21,0.914,22,0.782,23,0.62,24,0.789,25,0.544,26,0.789,27,0.532,28,0.789,29,0.789,30,0.473,31,0.231,32,1.034,33,0.62,34,0.836,35,0.941,36,0.532,37,0.367,38,0.62,39,0.532,40,0.532,41,0.532,42,0.532,43,0.418,44,1.111,45,0.739,46,0.789,47,0.532,48,0.418,49,0.532,50,0.739,51,0.418,52,0.831,53,0.532,54,0.925,55,0.473,56,0.406,57,0.484,58,0.367,59,0.686,60,0.836,61,0.91,62,0.62,63,0.473,64,1.04,65,0.473,66,1.04,67,0.473,68,0.473,69,0.925,70,0.702,71,1.173,72,0.739,73,0.532,74,0.702,75,0.928,76,0.928,77,0.597,78,1.163,79,1.123,80,0.925,81,1.111,82,1.111,83,0.473,84,0.718,85,1.111,86,0.319,87,0.473,88,0.343,89,0.418,90,0.319,91,0.532,92,0.473,93,0.532,94,0.319,95,0.62,96,0.702,97,0.789,98,0.853,99,0.418,100,0.692,101,0.418,102,0.473,103,0.836,104,0.925,105,0.702,106,0.473,107,0.532,108,0.649,109,0.473,110,0.532,111,0.473,112,0.532,113,0.836,114,0.367,115,0.473,116,0.766,117,0.473,118,0.473,119,0.544,120,0.367,121,0.473,122,0.418,123,1.04,124,0.473,125,0.418,126,0.473,127,0.532,128,0.473,129,0.532,130,0.532,131,0.941,132,0.473,133,0.831,134,0.702,135,0.836,136,0.473,137,0.473,138,0.532,139,0.473,140,0.91,141,0.191,142,0.418,143,0.367,144,0.532,145,0.473,146,0.473,147,0.62,148,0.473,149,0.473,150,0.925,151,0.987,152,0.532,153,0.941,154,0.532,155,0.979,156,0.532,157,0.789,158,1.25,159,0.702,160,0.702,161,0.789,162,0.789,163,0.789,164,0.702,165,0.789,166,0.789,167,0.532,168,0.789,169,0.702,170,1.025,171,0.532,172,0.367,173,0.367,174,0.319,175,0.532,176,0.62,177,0.532,178,0.367,179,0.789,180,0.981,181,0.532,182,0.532,183,0.789,184,0.532,185,0.702,186,0.532,187,0.532,188,0.418,189,0.532,190,0.473,191,0.532,192,0.789,193,0.993,194,0.532,195,0.473,196,0.473,197,0.367,198,1.111,199,0.532,200,0.789,201,0.532,202,0.532,203,0.702,204,0.532,205,0.532,206,0.532,207,0.532,208,0.473,209,0.789,210,0.925,211,1.04,212,0.702,213,0.789,214,0.532,215,1.111,216,1.04,217,0.532,218,0.532,219,0.62,220,0.319,221,0.935,222,0.532,223,0.789,224,0.532,225,0.739,226,0.532,227,0.941,228,0.873,229,0.532,230,0.532,231,0.532,232,0.532,233,0.532,234,0.532,235,0.532,236,0.532,237,0.532,238,1.04,239,0.789,240,0.532,241,1.04,242,0.789,243,0.532,244,0.532,245,0.532,246,0.532,247,0.532,248,0.941,249,0.941,250,0.941,251,0.532,252,0.941,253,0.941,254,0.532,255,0.941,256,0.789,257,0.789,258,0.789,259,0.532,260,0.789,261,0.789,262,0.532,263,0.789,264,0.789,265,0.532,266,0.789,267,0.941,268,0.532,269,0.532,270,0.532,271,0.532,272,0.532,273,0.702,274,0.473,275,0.418,276,0.972,277,0.62,278,0.532,279,0.367,280,0.418,281,0.925,282,0.532,283,0.532,284,0.789,285,0.789,286,0.532,287,0.532,288,0.532,289,0.532,290,0.941,291,0.532,292,0.473,293,1.04,294,0.532,295,1.04,296,0.532,297,0.532,298,0.532,299,0.532,300,0.532,301,0.532,302,0.789,303,0.532,304,0.532,305,0.532,306,0.532,307,0.532,308,0.532,309,0.532,310,0.532,311,0.789,312,0.532,313,0.532,314,0.532,315,0.532,316,0.532,317,0.941,318,0.532,319,0.532,320,0.532,321,0.532,322,0.739,323,0.532,324,0.532,325,0.418,326,0.532,327,0.532,328,0.532,329,0.532,330,0.532,331,0.532,332,0.62,333,0.532,334,0.532,335,0.532,336,0.532,337,0.532,338,0.532,339,0.532,340,0.532,341,0.532,342,0.532,343,0.532,344,0.532,345,0.532,346,0.532,347,0.532,348,0.532,349,0.532,350,0.418,351,0.789,352,0.532,353,0.532,354,0.532,355,0.532,356,0.532,357,1.04,358,0.941,359,0.532,360,0.473,361,0.532,362,0.871,363,0.532,364,0.532,365,0.532,366,0.532,367,0.532,368,0.532,369,0.789,370,0.532,371,0.532,372,0.532,373,0.532,374,0.532,375,0.532,376,1.111,377,0.789,378,0.789,379,0.532,380,0.532,381,0.789,382,0.789,383,0.789,384,0.532,385,0.941,386,0.789,387,0.532,388,0.532,389,0.473,390,0.532,391,1.04,392,1.111,393,1.04,394,0.941,395,0.941,396,0.532,397,1.111,398,1.04,399,0.532,400,0.789,401,0.789,402,0.789,403,0.789,404,0.532,405,0.532,406,0.532,407,0.532,408,0.532,409,0.532,410,0.532,411,0.532,412,0.532,413,0.532,414,0.532,415,0.532,416,0.789,417,0.532,418,0.789,419,0.532,420,0.532,421,0.532,422,0.532,423,0.532,424,0.532,425,0.532,426,0.532,427,0.532,428,0.532,429,0.532,430,0.532,431,0.532,432,0.532,433,0.532,434,0.789,435,0.789,436,0.789,437,0.789,438,0.789,439,0.789,440,0.532,441,0.789,442,0.702,443,0.532,444,0.532,445,0.023,446,0.023]],["title/interfaces/ValidateDragParams.html",[0,0.091,70,0.646]],["body/interfaces/ValidateDragParams.html",[0,0.166,1,0.915,2,0.319,3,0.274,4,0.232,5,0.232,6,0.318,7,0.474,8,0.274,9,0.885,10,1.222,11,1.222,12,1.037,13,0.572,14,0.044,15,0.523,16,0.226,17,0.545,18,0.545,19,0.545,20,0.803,21,0.915,22,0.782,23,0.621,24,0.79,25,0.545,26,0.79,27,0.533,28,0.79,29,0.79,30,0.474,31,0.232,32,1.035,33,0.621,34,0.837,35,0.941,36,0.533,37,0.368,38,0.621,39,0.533,40,0.533,41,0.533,42,0.533,43,0.419,44,1.111,45,0.74,46,0.79,47,0.533,48,0.419,49,0.533,50,0.74,51,0.419,52,0.831,53,0.533,54,0.925,55,0.474,56,0.406,57,0.484,58,0.368,59,0.686,60,0.837,61,0.91,62,0.621,63,0.474,64,1.111,65,0.474,66,1.041,67,0.474,68,0.474,69,0.925,70,0.837,71,1.206,72,0.74,73,0.533,74,0.702,75,0.928,76,0.928,77,0.597,78,1.164,79,1.123,80,0.837,81,0.79,82,0.79,83,0.474,84,0.718,85,1.111,86,0.319,87,0.474,88,0.343,89,0.419,90,0.319,91,0.533,92,0.474,93,0.533,94,0.319,95,0.621,96,0.702,97,0.79,98,0.853,99,0.419,100,0.693,101,0.419,102,0.474,103,0.837,104,0.925,105,0.702,106,0.474,107,0.533,108,0.649,109,0.474,110,0.533,111,0.474,112,0.533,113,0.837,114,0.368,115,0.474,116,0.766,117,0.474,118,0.474,119,0.545,120,0.368,121,0.474,122,0.419,123,1.041,124,0.474,125,0.419,126,0.474,127,0.533,128,0.474,129,0.533,130,0.533,131,0.941,132,0.474,133,0.831,134,0.702,135,0.837,136,0.474,137,0.474,138,0.533,139,0.474,140,0.91,141,0.191,142,0.419,143,0.368,144,0.533,145,0.474,146,0.474,147,0.621,148,0.474,149,0.474,150,0.925,151,0.988,152,0.533,153,0.941,154,0.533,155,0.979,156,0.533,157,0.79,158,1.25,159,0.702,160,0.702,161,0.79,162,0.79,163,0.79,164,0.702,165,0.79,166,0.79,167,0.533,168,0.79,169,0.702,170,1.025,171,0.533,172,0.368,173,0.368,174,0.319,175,0.533,176,0.621,177,0.533,178,0.368,179,0.79,180,0.981,181,0.533,182,0.533,183,0.79,184,0.533,185,0.702,186,0.533,187,0.533,188,0.419,189,0.533,190,0.474,191,0.533,192,0.79,193,0.993,194,0.533,195,0.474,196,0.474,197,0.368,198,1.111,199,0.533,200,0.79,201,0.533,202,0.533,203,0.702,204,0.533,205,0.533,206,0.533,207,0.533,208,0.474,209,0.79,210,0.925,211,1.041,212,0.702,213,0.79,214,0.533,215,1.111,216,1.041,217,0.533,218,0.533,219,0.621,220,0.319,221,0.936,222,0.533,223,0.79,224,0.533,225,0.74,226,0.533,227,0.941,228,0.873,229,0.533,230,0.533,231,0.533,232,0.533,233,0.533,234,0.533,235,0.533,236,0.533,237,0.533,238,1.041,239,0.79,240,0.533,241,1.041,242,0.79,243,0.533,244,0.533,245,0.533,246,0.533,247,0.533,248,0.941,249,0.941,250,0.941,251,0.533,252,0.941,253,0.941,254,0.533,255,0.941,256,0.79,257,0.79,258,0.79,259,0.533,260,0.79,261,0.79,262,0.533,263,0.79,264,0.79,265,0.533,266,0.79,267,0.941,268,0.533,269,0.533,270,0.533,271,0.533,272,0.533,273,0.702,274,0.474,275,0.419,276,0.972,277,0.621,278,0.533,279,0.368,280,0.419,281,0.925,282,0.533,283,0.533,284,0.79,285,0.79,286,0.533,287,0.533,288,0.533,289,0.533,290,0.941,291,0.533,292,0.474,293,1.041,294,0.533,295,1.041,296,0.533,297,0.533,298,0.533,299,0.533,300,0.533,301,0.533,302,0.79,303,0.533,304,0.533,305,0.533,306,0.533,307,0.533,308,0.533,309,0.533,310,0.533,311,0.79,312,0.533,313,0.533,314,0.533,315,0.533,316,0.533,317,0.941,318,0.533,319,0.533,320,0.533,321,0.533,322,0.74,323,0.533,324,0.533,325,0.419,326,0.533,327,0.533,328,0.533,329,0.533,330,0.533,331,0.533,332,0.621,333,0.533,334,0.533,335,0.533,336,0.533,337,0.533,338,0.533,339,0.533,340,0.533,341,0.533,342,0.533,343,0.533,344,0.533,345,0.533,346,0.533,347,0.533,348,0.533,349,0.533,350,0.419,351,0.79,352,0.533,353,0.533,354,0.533,355,0.533,356,0.533,357,1.041,358,0.941,359,0.533,360,0.474,361,0.533,362,0.871,363,0.533,364,0.533,365,0.533,366,0.533,367,0.533,368,0.533,369,0.79,370,0.533,371,0.533,372,0.533,373,0.533,374,0.533,375,0.533,376,1.111,377,0.79,378,0.79,379,0.533,380,0.533,381,0.79,382,0.79,383,0.79,384,0.533,385,0.941,386,0.79,387,0.533,388,0.533,389,0.474,390,0.533,391,1.041,392,1.111,393,1.041,394,0.941,395,0.941,396,0.533,397,1.111,398,1.041,399,0.533,400,0.79,401,0.79,402,0.79,403,0.79,404,0.533,405,0.533,406,0.533,407,0.533,408,0.533,409,0.533,410,0.533,411,0.533,412,0.533,413,0.533,414,0.533,415,0.533,416,0.79,417,0.533,418,0.79,419,0.533,420,0.533,421,0.533,422,0.533,423,0.533,424,0.533,425,0.533,426,0.533,427,0.533,428,0.533,429,0.533,430,0.533,431,0.533,432,0.533,433,0.533,434,0.79,435,0.79,436,0.79,437,0.79,438,0.79,439,0.79,440,0.533,441,0.79,442,0.702,443,0.533,444,0.533,445,0.023,446,0.023,582,3.206]],["title/changelog.html",[141,0.219,197,0.421,583,2.476]],["body/changelog.html",[0,0.085,1,0.529,4,0.293,6,0.42,8,0.481,10,0.599,11,0.599,13,0.347,14,0.031,15,0.406,16,0.307,20,0.74,22,0.695,30,0.774,33,0.734,37,0.799,52,0.465,57,0.688,59,0.347,62,0.911,69,0.599,71,0.599,72,0.911,77,0.621,84,0.756,87,0.599,88,0.466,90,0.56,94,0.695,96,0.599,99,0.734,100,0.763,101,0.734,102,0.831,103,0.599,104,1.204,105,0.599,106,0.954,109,1.236,111,1.03,113,1.148,114,0.908,115,0.831,117,1.03,118,0.831,119,0.869,120,0.644,121,0.599,122,0.911,124,0.599,125,0.529,128,0.599,132,0.599,133,0.644,135,0.954,136,0.954,137,0.599,139,0.599,140,0.644,141,0.385,142,0.529,143,0.891,145,0.599,147,0.734,148,1.082,149,0.599,150,0.954,159,0.599,160,0.599,169,0.831,170,0.529,174,0.404,185,1.288,190,0.599,195,0.831,196,0.831,203,1.03,208,0.599,210,0.831,220,0.643,273,0.599,274,0.599,281,0.599,292,1.03,332,0.529,445,0.027,446,0.027,447,1.816,448,2.531,477,1.911,479,3.043,480,3.287,483,2.238,493,2.238,497,3.104,505,2.651,518,1.309,523,1.911,524,2.651,525,1.911,526,1.911,535,1.911,554,1.911,556,1.911,570,2.651,584,5.641,585,2.734,586,2.734,587,2.734,588,2.734,589,2.734,590,2.734,591,2.734,592,4.941,593,4.704,594,3.793,595,5.853,596,4.355,597,3.793,598,2.734,599,2.734,600,2.734,601,4.355,602,4.617,603,2.734,604,2.734,605,2.734,606,4.941,607,4.704,608,4.704,609,2.734,610,4.646,611,3.793,612,2.734,613,2.734,614,2.734,615,2.734,616,5.113,617,4.355,618,2.734,619,5.853,620,2.734,621,2.734,622,2.734,623,2.734,624,3.793,625,3.564,626,2.867,627,2.734,628,2.734,629,2.734,630,2.734,631,2.734,632,4.044,633,5.113,634,4.704,635,2.238,636,2.734,637,2.734,638,2.238,639,2.734,640,2.734,641,3.793,642,2.734,643,2.734,644,2.734,645,2.734,646,3.793,647,3.793,648,2.238,649,2.734,650,2.734,651,2.734,652,3.793,653,5.552,654,2.734,655,3.793,656,2.734,657,2.734,658,2.734,659,2.734,660,3.793,661,2.734,662,3.564,663,4.704,664,4.375,665,1.911,666,2.238,667,2.734,668,3.793,669,2.734,670,2.734,671,2.734,672,4.355,673,2.734,674,2.734,675,2.734,676,3.793,677,3.793,678,2.734,679,2.734,680,3.793,681,3.104,682,3.793,683,2.734,684,2.734,685,2.734,686,2.734,687,2.734,688,2.734,689,5.113,690,2.734,691,2.734,692,2.734,693,2.734,694,2.734,695,3.793,696,3.793,697,2.734,698,2.734,699,2.734,700,4.583,701,2.734,702,2.734,703,2.734,704,2.734,705,2.734,706,2.734,707,3.793,708,2.734,709,4.355,710,2.734,711,2.238,712,2.734,713,2.734,714,3.793,715,4.704,716,2.734,717,4.355,718,4.355,719,2.734,720,4.704,721,3.564,722,2.734,723,2.734,724,2.734,725,2.734,726,2.734,727,2.734,728,2.734,729,5.345,730,4.355,731,2.734,732,5.345,733,4.704,734,2.734,735,2.734,736,2.238,737,2.734,738,3.793,739,2.734,740,2.734,741,3.793,742,2.734,743,2.734,744,2.734,745,2.734,746,2.734,747,2.734,748,2.734,749,4.704,750,4.704,751,2.734,752,2.734,753,4.704,754,4.704,755,3.564,756,2.734,757,5.552,758,4.544,759,3.793,760,3.793,761,2.734,762,4.704,763,2.734,764,2.734,765,3.793,766,2.734,767,2.734,768,2.734,769,2.734,770,2.734,771,2.734,772,2.734,773,2.734,774,2.734,775,2.734,776,2.734,777,2.734,778,2.734,779,2.238,780,2.734,781,2.734,782,2.734,783,2.734,784,2.734,785,2.734,786,4.704,787,2.734,788,2.734,789,2.734,790,2.734,791,2.734,792,2.734,793,2.734,794,2.734,795,2.734,796,2.734,797,2.734,798,2.734,799,3.793,800,4.355,801,2.734,802,2.734,803,2.238,804,2.734,805,2.734,806,3.793,807,4.355,808,2.734,809,2.734,810,3.793,811,2.734,812,2.734,813,2.238,814,2.734,815,2.734,816,2.734,817,2.734,818,2.734,819,2.238,820,2.734,821,2.734,822,2.734,823,2.734,824,2.734,825,5.495,826,3.793,827,2.734,828,2.734,829,4.355,830,2.734,831,2.734,832,2.734,833,2.734,834,2.734,835,2.734,836,2.734,837,2.734,838,4.355,839,2.734,840,2.734,841,2.734,842,2.734,843,2.734,844,2.734,845,3.793,846,2.734,847,2.734,848,2.734,849,2.734,850,2.734,851,2.734,852,2.734,853,2.734,854,4.355,855,2.734,856,2.734,857,2.734,858,2.734,859,2.734,860,2.734,861,3.793,862,2.734,863,2.734,864,2.734,865,2.734,866,2.734,867,2.734,868,2.734,869,2.734,870,2.734,871,2.734,872,2.734,873,2.734,874,2.734,875,2.238,876,2.734,877,2.734,878,2.734,879,2.734,880,2.734,881,2.734,882,2.734,883,2.734,884,2.734,885,2.238,886,2.734,887,2.734,888,2.238,889,2.734]],["title/dependencies.html",[626,2.156,755,2.026]],["body/dependencies.html",[14,0.041,31,0.504,54,1.03,55,1.03,445,0.038,446,0.038,625,3.851,626,3.258,890,4.705,891,4.705]],["title/miscellaneous/functions.html",[518,1.693,892,1.509]],["body/miscellaneous/functions.html",[5,0.499,6,0.329,8,0.591,14,0.04,30,0.689,75,0.792,76,0.904,279,0.904,445,0.038,446,0.038,514,3.259,518,2.233,519,3.717,534,3.259,575,3.817,892,2.842,893,4.664,894,4.664,895,5.581]],["title/index.html",[8,0.314,141,0.219,197,0.421]],["body/index.html",[3,0.63,6,0.398,14,0.043,15,0.57,31,0.445,33,0.805,52,0.904,77,0.445,84,0.63,86,0.614,88,0.532,92,0.91,94,0.861,99,0.805,100,0.739,101,0.805,114,0.845,116,0.706,125,0.805,126,0.91,134,0.91,141,0.439,146,0.91,445,0.036,446,0.036,448,2.676,451,3.401,453,4.07,477,3.475,479,2.904,480,2.904,482,3.401,505,3.475,602,4.684,610,3.401,626,2.533,638,4.774,648,3.401,662,3.401,664,4.07,665,2.904,666,4.07,700,3.401,711,3.401,721,3.401,736,4.07,779,4.355,803,4.07,813,3.401,819,4.684,875,4.07,896,4.973,897,5.321,898,4.973,899,4.156,900,5.785,901,5.515,902,2.904,903,4.156,904,4.156,905,4.156,906,4.156,907,5.321,908,4.156,909,4.156,910,5.321,911,4.156,912,4.973,913,4.156,914,4.156,915,4.156,916,4.156,917,4.156,918,4.156,919,4.156,920,4.156,921,4.156,922,4.156,923,4.156,924,4.156,925,4.156,926,4.156,927,4.156,928,4.156,929,4.156,930,4.156,931,4.156,932,4.156,933,4.156,934,4.973,935,4.156,936,4.156,937,4.156,938,5.638,939,4.156,940,4.156,941,4.156,942,4.156,943,3.401]],["title/license.html",[141,0.219,197,0.421,902,1.73]],["body/license.html",[4,0.474,14,0.037,32,0.97,34,0.97,52,0.753,77,0.474,114,0.877,445,0.037,446,0.037,632,3.626,635,4.473,665,3.096,681,3.626,902,3.096,943,4.226,944,5.466,945,4.43,946,4.43,947,4.43,948,5.164,949,4.43,950,4.43,951,4.43,952,4.43,953,5.164,954,4.43,955,5.63,956,5.928,957,4.43,958,5.164,959,5.466,960,4.43,961,5.164,962,4.43,963,4.43,964,4.43,965,4.43,966,4.43,967,4.43,968,4.43,969,4.43,970,4.43,971,4.43,972,4.43,973,4.43,974,5.164,975,5.164,976,4.43,977,4.43,978,5.164,979,4.43,980,4.43,981,4.43,982,4.43,983,4.43,984,4.43,985,4.43,986,4.43,987,4.43,988,4.43,989,4.43,990,4.43,991,4.43,992,4.43,993,4.43,994,4.43,995,4.43,996,4.43,997,4.43,998,4.43,999,4.43]],["title/modules.html",[447,1.912]],["body/modules.html",[14,0.039,445,0.039,446,0.039,447,2.264,448,2.545,1000,4.729]],["title/overview.html",[1001,3.268]],["body/overview.html",[0,0.146,14,0.038,16,0.333,445,0.038,446,0.038,447,2.258,758,3.859,885,3.859,888,3.859,1001,3.859]],["title/miscellaneous/typealiases.html",[892,1.509,1002,3.537]],["body/miscellaneous/typealiases.html",[5,0.503,6,0.331,7,1.029,8,0.596,13,0.596,14,0.038,72,1.084,445,0.038,446,0.038,518,2.249,892,2.863,1003,4.698,1004,4.698]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["0.1.0",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":843,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":841,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":885,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":838,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":758,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1265bee",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["2.3.4",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["2016",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":632,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":888,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["3.0.0",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":493,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["300",{"_index":492,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["31",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["32f4ce3",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["3c5c5b9",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["4.2.0",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["4.3.0",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["4.3.1",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["4.3.2",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["44ea67",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":896,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["700fef1",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":840,"title":{},"body":{"changelog.html":{}}}],["78bdeb5",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["7fbaa2a",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":936,"title":{},"body":{"index.html":{}}}],["81",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["897b3fe",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["9831d36",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":973,"title":{},"body":{"license.html":{}}}],["account",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":994,"title":{},"body":{"license.html":{}}}],["activ",{"_index":490,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["activelongpressdrag",{"_index":483,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["actual",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":524,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["add",{"_index":700,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["alias",{"_index":1003,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["along",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["altern",{"_index":920,"title":{},"body":{"index.html":{}}}],["alway",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":967,"title":{},"body":{"license.html":{}}}],["angular",{"_index":602,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["angular/cor",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"dependencies.html":{},"index.html":{}}}],["any).eventlistenersubscriptions[typ",{"_index":416,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["api",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":736,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["append",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["appli",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["aris",{"_index":998,"title":{},"body":{"license.html":{}}}],["assign",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":957,"title":{},"body":{"license.html":{}}}],["attribut",{"_index":916,"title":{},"body":{"index.html":{}}}],["author",{"_index":987,"title":{},"body":{"license.html":{}}}],["auto",{"_index":505,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["automat",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["autoscrol",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"dependencies.html":{}}}],["awesom",{"_index":924,"title":{},"body":{"index.html":{}}}],["axi",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["back",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["bebd925",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["befor",{"_index":489,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["behaviour",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["bodi",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["boolean",{"_index":61,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["bootstrap",{"_index":908,"title":{},"body":{"index.html":{}}}],["bound",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":1000,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":945,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["calledcount",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancel",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["canceldrag",{"_index":66,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.complet",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["canceldrag$.pip",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["cancelledscrol",{"_index":496,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["candrag",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["case",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["caus",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":925,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["chang",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":583,"title":{"changelog.html":{}},"body":{}}],["changes.dragaxi",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["charg",{"_index":952,"title":{},"body":{"license.html":{}}}],["check",{"_index":923,"title":{},"body":{"index.html":{}}}],["checkeventlisten",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["child",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["claim",{"_index":990,"title":{},"body":{"license.html":{}}}],["class",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["click",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["clienti",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":520,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["clientx",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["clone.appendchild(nod",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.innerhtml",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["clone.parentelement!.removechild(clon",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["close",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["combinelatest(this.pointermov",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["come",{"_index":930,"title":{},"body":{"index.html":{}}}],["commit",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["compat",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":570,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["compon",{"_index":875,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["condit",{"_index":972,"title":{},"body":{"license.html":{}}}],["config",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["configur",{"_index":488,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["connect",{"_index":999,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":914,"title":{},"body":{"index.html":{}}}],["const",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["constructor",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["constructor(el",{"_index":573,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["contain",{"_index":479,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["container.direct",{"_index":58,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["container.directive.t",{"_index":474,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container.directive.ts:26",{"_index":487,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["container.directive.ts:34",{"_index":494,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["containerhashorizontalscrol",{"_index":507,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["containerhasverticalscrol",{"_index":510,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["content",{"_index":711,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["continu",{"_index":940,"title":{},"body":{"index.html":{}}}],["contract",{"_index":995,"title":{},"body":{"license.html":{}}}],["control",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["coordin",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["copi",{"_index":955,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":944,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["creat",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["css",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["current",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["currentdrag",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.complet",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdrag$.next",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdata",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["currentdragdropdata",{"_index":544,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["currentdragsubscript",{"_index":536,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["cursor",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["custom",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["customis",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["d233788",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":991,"title":{},"body":{"license.html":{}}}],["data",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["date.now",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dc0f863",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["dd3e89",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":958,"title":{},"body":{"license.html":{}}}],["declar",{"_index":451,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["defin",{"_index":457,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["delet",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["delta",{"_index":491,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["deltascrol",{"_index":431,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.left",{"_index":436,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltascroll.top",{"_index":438,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltatot",{"_index":439,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltax",{"_index":434,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["deltay",{"_index":437,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["demo",{"_index":897,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":907,"title":{},"body":{"index.html":{}}}],["demomodul",{"_index":909,"title":{},"body":{"index.html":{}}}],["depend",{"_index":626,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["deregist",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllisten",{"_index":542,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["descript",{"_index":475,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["destroy",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dev",{"_index":813,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["develop",{"_index":901,"title":{},"body":{"index.html":{}}}],["devic",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["didn't",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":567,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dimens",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":16,"title":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"overview.html":{}}}],["directli",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["directori",{"_index":932,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["disablescrol",{"_index":501,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["dispos",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchang",{"_index":517,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["distribut",{"_index":965,"title":{},"body":{"license.html":{}}}],["do",{"_index":557,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["document",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["document.documentelement.scrollleft",{"_index":428,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["document.documentelement.scrolltop",{"_index":426,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dom",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"dependencies.html":{}}}],["don't",{"_index":662,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["drag$.pip",{"_index":545,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["drag$.subscrib",{"_index":569,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragactiveclass",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["draganddropmodul",{"_index":448,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["dragaxi",{"_index":60,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragaxix",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":69,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragcomplet",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragcontain",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragcursor=\"mov",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragend(ev",{"_index":913,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragended$.subscrib",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragendev",{"_index":68,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragent",{"_index":529,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["draggabl",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.direct",{"_index":454,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirect",{"_index":89,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["draggablehelp",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["draggablescrollcontainerdirect",{"_index":56,"title":{"directives/DraggableScrollContainerDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragleav",{"_index":530,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragmoveev",{"_index":67,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragov",{"_index":531,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoveract",{"_index":552,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoverclass",{"_index":526,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragpointerdownev",{"_index":63,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragsnapgrid",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstart",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["dragstarted$.subscrib",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dragstartev",{"_index":65,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["drop",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.t",{"_index":450,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["dropev",{"_index":513,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DropEvent.html":{}}}],["droppabl",{"_index":664,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.direct",{"_index":455,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.j",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.j",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["droppable/doc",{"_index":919,"title":{},"body":{"index.html":{}}}],["droppable/issues/61",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["droppable/src/lib/drag",{"_index":449,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/dragg",{"_index":473,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["droppable/src/lib/draggable.directive.t",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:103",{"_index":459,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:109",{"_index":461,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:115",{"_index":463,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:121",{"_index":466,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:127",{"_index":467,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:133",{"_index":460,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:139",{"_index":458,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:145",{"_index":464,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:151",{"_index":465,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:157",{"_index":470,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:165",{"_index":471,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:171",{"_index":472,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:177",{"_index":469,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:183",{"_index":468,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:97",{"_index":462,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.t",{"_index":514,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["droppable/src/lib/droppable.directive.ts:43",{"_index":577,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:49",{"_index":576,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:55",{"_index":578,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":579,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:67",{"_index":580,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:73",{"_index":581,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:75",{"_index":574,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirect",{"_index":452,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableel",{"_index":539,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.rect",{"_index":546,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":547,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.updatecach",{"_index":543,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppablethen",{"_index":906,"title":{},"body":{"index.html":{}}}],["droppeddata",{"_index":912,"title":{},"body":{"index.html":{}}}],["duplic",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["durat",{"_index":442,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["e.g",{"_index":481,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["each",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["ee94dc5",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["elementref",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["emit",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["enablescrol",{"_index":504,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["end",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":928,"title":{},"body":{"index.html":{}}}],["error",{"_index":848,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.cancel",{"_index":500,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["event.canceldrag$.emit",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clienti",{"_index":407,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.changedtouches[0].clientx",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clienti",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.clientx",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.i",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["event.preventdefault",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clienti",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.touches[0].clientx",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["event.x",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["eventemitt",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["eventlistenersubscript",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["events:non",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["expos",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":980,"title":{},"body":{"license.html":{}}}],["extend",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["f29b424",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["f6a5cd",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["f936805",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["f98f586",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["fb75711",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":610,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["filter(([didoverlap",{"_index":566,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["filter(([previ",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["filter(nod",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["find",{"_index":917,"title":{},"body":{"index.html":{}}}],["fire",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":983,"title":{},"body":{"license.html":{}}}],["fix",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["follow",{"_index":971,"title":{},"body":{"license.html":{}}}],["foreach(nod",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["forroot",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":951,"title":{},"body":{"license.html":{}}}],["function",{"_index":518,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["furnish",{"_index":970,"title":{},"body":{"license.html":{}}}],["gener",{"_index":918,"title":{},"body":{"index.html":{}}}],["get",{"_index":197,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["getscrollposit",{"_index":422,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghost",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostdragen",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostel",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementappendto",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcr",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["ghostelementcreatedev",{"_index":83,"title":{"interfaces/GhostElementCreatedEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ghostelementtempl",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["global",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["globaldragstyl",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["grant",{"_index":950,"title":{},"body":{"license.html":{}}}],["grid",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["guidelin",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hascontainerscrollbar",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["haseventlisten",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["hasscrollbar",{"_index":506,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["height",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["helper",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["helper.provid",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["here",{"_index":910,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":949,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["higher",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":988,"title":{},"body":{"license.html":{}}}],["hover",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["html",{"_index":495,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["htmlelement",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["htmlstyleel",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":898,"title":{},"body":{"index.html":{}}}],["icon",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["immedi",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["impli",{"_index":981,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":635,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["inject(docu",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["input",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["insert",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["insid",{"_index":480,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["instal",{"_index":900,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["interact",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"overview.html":{}}}],["iscoordinatewithinrectangl",{"_index":519,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":894,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdragactiv",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["isn't",{"_index":476,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["iswithinel",{"_index":549,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["item",{"_index":911,"title":{},"body":{"index.html":{}}}],["key",{"_index":418,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["kind",{"_index":979,"title":{},"body":{"license.html":{}}}],["lazili",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["leav",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["lettabl",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":947,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":992,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":989,"title":{},"body":{"license.html":{}}}],["librari",{"_index":803,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licenc",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":902,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":961,"title":{},"body":{"license.html":{}}}],["line",{"_index":533,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["listen",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["liter",{"_index":582,"title":{},"body":{"interfaces/ValidateDragParams.html":{}}}],["local",{"_index":931,"title":{},"body":{"index.html":{}}}],["lock",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["long",{"_index":486,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["longer",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["longpressconfig",{"_index":484,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["loosen",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(([pointermoveev",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(([previ",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(calledcount",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(movedata",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["map(valu",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["margin",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["match",{"_index":446,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.ab",{"_index":435,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.left",{"_index":433,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.abs(movescrollposition.top",{"_index":432,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformi",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["math.round(movedata.transformx",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["matt",{"_index":946,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":982,"title":{},"body":{"license.html":{}}}],["merg",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["merge(dragcomplet",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap((pointerdownev",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mergemap(dragenddata",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["metadata",{"_index":456,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["migrat",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["mimic",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":892,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":943,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":963,"title":{},"body":{"license.html":{}}}],["modul",{"_index":447,"title":{"modules/DragAndDropModule.html":{},"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{},"overview.html":{}}}],["mous",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mousedown",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mouseent",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseev",{"_index":78,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseleav",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemov",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveev",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clienti",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mousemoveevent.clientx",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mouseup",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["move",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["movedata",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrollleft",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.scrolltop",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformi",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movedata.transformx",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["movescrollposit",{"_index":430,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["moz",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ms",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["mwldraggabl",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["mwldraggablescrollcontain",{"_index":482,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"index.html":{}}}],["mwldroppabl",{"_index":523,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["name",{"_index":534,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":779,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["new",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["next",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.i",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["next.x",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ng",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":453,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngondestroy",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngoninit",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ngzone",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["node",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["node.j",{"_index":929,"title":{},"body":{"index.html":{}}}],["none",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["noninfring",{"_index":986,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":915,"title":{},"body":{"index.html":{}}}],["notic",{"_index":974,"title":{},"body":{"license.html":{}}}],["now",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":638,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["number",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["o",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(styles).foreach(key",{"_index":419,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach(typ",{"_index":415,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observ",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["observable(observ",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["observer.next(",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["obtain",{"_index":954,"title":{},"body":{"license.html":{}}}],["old",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["onc",{"_index":721,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchang",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ondestroy",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmousedown(ev",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseent",{"_index":408,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseleav",{"_index":410,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["onmouseup(ev",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchend(ev",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["ontouchstart(ev",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["oper",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["otherwis",{"_index":997,"title":{},"body":{"license.html":{}}}],["out",{"_index":665,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["outsid",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":525,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["overflow",{"_index":503,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["overlap",{"_index":528,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(distinctuntilchang",{"_index":551,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(filter(overlapsnow",{"_index":563,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapschang",{"_index":550,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow",{"_index":560,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow)).subscrib",{"_index":564,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overview",{"_index":1001,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrit",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["packag",{"_index":755,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["param",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["paramet",{"_index":575,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["part",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":984,"title":{},"body":{"license.html":{}}}],["pass",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["path",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":625,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":948,"title":{},"body":{"license.html":{}}}],["permit",{"_index":969,"title":{},"body":{"license.html":{}}}],["person",{"_index":953,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pipe(filter(overlapsnow",{"_index":559,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["pipe(shar",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pipe(take(1",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["place",{"_index":478,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["pointer",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["pointerdown",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clienti",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.clientx",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdownevent.event.stoppropag",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdrag",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pip",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerdragged$.pipe(pairwis",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerev",{"_index":74,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermov",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermove.pip",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clienti",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointermoveevent.clientx",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["pointerup",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["port",{"_index":935,"title":{},"body":{"index.html":{}}}],["portion",{"_index":977,"title":{},"body":{"license.html":{}}}],["posit",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["power",{"_index":903,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":927,"title":{},"body":{"index.html":{}}}],["preserv",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["prevent",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["previou",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.i",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["previous.x",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["privat",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["project",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.t",{"_index":1004,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.t",{"_index":893,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/angular",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propag",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["properti",{"_index":9,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["prototyp",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":681,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":497,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{}}}],["publish",{"_index":964,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":985,"title":{},"body":{"license.html":{}}}],["readm",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["recalcul",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":922,"title":{},"body":{"index.html":{}}}],["recomput",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.left",{"_index":521,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.left}px",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.top",{"_index":522,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.top}px",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rect.width}px",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["rectangl",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":941,"title":{},"body":{"index.html":{}}}],["releaselicens",{"_index":942,"title":{},"body":{"index.html":{}}}],["reload",{"_index":937,"title":{},"body":{"index.html":{}}}],["remov",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["renam",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["renderer2",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["replaysubject",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["repliat",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":933,"title":{},"body":{"index.html":{}}}],["requir",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["restor",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":960,"title":{},"body":{"license.html":{}}}],["result",{"_index":445,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["revert",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":962,"title":{},"body":{"license.html":{}}}],["round",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":819,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["safari",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["same",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":905,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["scroll.left",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scroll.top",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollabl",{"_index":477,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{},"changelog.html":{},"index.html":{}}}],["scrollcontain",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainerrect",{"_index":541,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["scrollcontainerscrol",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollcontainerscroll$).pip",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scroller",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolli",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollleft",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrolltop",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["scrollx",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["seamless",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":554,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["select",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["selector",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["sell",{"_index":968,"title":{},"body":{"license.html":{}}}],["server",{"_index":934,"title":{},"body":{"index.html":{}}}],["set",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["setcursor(valu",{"_index":412,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["setelementstyl",{"_index":417,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shall",{"_index":975,"title":{},"body":{"license.html":{}}}],["share",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["shouldbegindrag",{"_index":429,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["show",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["showoriginalelementwhiledrag",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["side",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["simplechang",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["skyhook",{"_index":926,"title":{},"body":{"index.html":{}}}],["snap",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["snapgrid",{"_index":62,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["softwar",{"_index":956,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["stackblitz",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["standard",{"_index":535,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["start",{"_index":141,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{}}}],["startscrollposit",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.left",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startscrollposition.top",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["startwith(startscrollposit",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["stop",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["string",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["style",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["styles[key",{"_index":421,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subject",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"license.html":{}}}],["sublicens",{"_index":966,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["subscript",{"_index":516,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["substanti",{"_index":976,"title":{},"body":{"license.html":{}}}],["support",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["system.j",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":515,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["tabl",{"_index":899,"title":{},"body":{"index.html":{}}}],["take",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["take(1",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takelast",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takelast(1",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["takeuntil(dragcomplet",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["templat",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"index.html":{}}}],["templateref",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["test",{"_index":938,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":939,"title":{},"body":{"index.html":{}}}],["text",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["text/css",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["there'",{"_index":555,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.cancelledscrol",{"_index":499,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.candrag",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.checkeventlisten",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.currentdragsubscript",{"_index":537,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.currentdragsubscription.unsubscrib",{"_index":572,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.destroy",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.destroy$.next",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.defaultview",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.appendchild(globaldragstyl",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.document.head.removechild(globaldragstyl",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragactiveclass",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragaxis.i",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragaxis.x",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragcursor",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragend.next",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragenter.next",{"_index":562,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.draggablehelper.currentdrag.subscrib",{"_index":538,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragging.next",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragleave.next",{"_index":568,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragover.next",{"_index":565,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragoverclass",{"_index":561,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragpointerdown.next",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.i",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragsnapgrid.x",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.dragstart.next",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.drop.next",{"_index":571,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dropdata",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeel",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.clonenod",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.nexts",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.element.nativeelement.parentnode!.insertbefor",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.elementref.nativeel",{"_index":498,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.elementref.nativeelement.clientheight",{"_index":512,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.elementref.nativeelement.clientwidth",{"_index":509,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.elementref.nativeelement.scrollheight",{"_index":511,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.elementref.nativeelement.scrollwidth",{"_index":508,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseent",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseleav",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mousemov",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchmov",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.getscrollposit",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostdragen",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostel",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementappendto.appendchild(clon",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementcreated.emit",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ghostelementtempl",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmousedown(ev",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseent",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseleav",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.onmouseup(ev",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchend(ev",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.ontouchstart(ev",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.complet",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.next",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerdown$.pip",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.complet",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointermove$.next",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.complet",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.pointerup$.next",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.addclass",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.appendchild",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createel",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.createtext",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.listen",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.listen(scrollcontain",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.removeclass",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setattribute(globaldragstyl",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyl",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(el",{"_index":420,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.element.nativeel",{"_index":413,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.renderer.setstyle(this.elementref.nativeel",{"_index":502,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["this.scrol",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontain",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.activelongpressdrag",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.disablescrol",{"_index":444,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeel",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":548,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":424,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":423,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.enablescrol",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.hasscrollbar",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.longpressconfig.delta",{"_index":440,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scrollcontainer.longpressconfig.dur",{"_index":443,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.scroller.destroy",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor",{"_index":411,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setcursor(this.dragcursor",{"_index":409,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(clon",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.setelementstyles(this.ghostel",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.shouldbegindrag",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.showoriginalelementwhiledrag",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerbegin",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.timelongpress.timerend",{"_index":441,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.unsubscribeeventlisten",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.validatedrag",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.vcr.createembeddedview",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.zone.run",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["this.zone.runoutsideangular",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["through",{"_index":904,"title":{},"body":{"index.html":{}}}],["throw",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":527,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["timelongpress",{"_index":80,"title":{"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerbegin",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["timerend",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["todo",{"_index":553,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["top",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tort",{"_index":996,"title":{},"body":{"license.html":{}}}],["touch",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["touchcancel",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchend",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchev",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmov",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveev",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["touchstart",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transform",{"_index":71,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["transformi",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformx",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["transformy}px",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["translate(${transformx}px",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tri",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["trigger",{"_index":485,"title":{},"body":{"directives/DraggableScrollContainerDirective.html":{}}}],["true",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["tslint:dis",{"_index":532,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1002,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["univers",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisten",{"_index":414,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["until",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["updat",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["updatecach",{"_index":540,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["upgrad",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["valid",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["validatedragparam",{"_index":70,"title":{"interfaces/ValidateDragParams.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["valu",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["vcr",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["version",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":558,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["view",{"_index":666,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewref",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["viewref.rootnod",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["visibl",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["void",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["warranti",{"_index":978,"title":{},"body":{"license.html":{}}}],["way",{"_index":556,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["webkit",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["whether",{"_index":993,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":648,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":427,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["window.pageyoffset",{"_index":425,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{}}}],["without",{"_index":959,"title":{},"body":{"license.html":{}}}],["work",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["wors",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":921,"title":{},"body":{"index.html":{}}}],["x",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["y",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}],["yourself",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"directives/DraggableScrollContainerDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"interfaces/ValidateDragParams.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n  Modules\n  DragAndDropModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                DraggableDirective\n                            \n                            \n                                DraggableScrollContainerDirective\n                            \n                            \n                                DroppableDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    DraggableDirective\n                            \n                            \n                                    DraggableScrollContainerDirective\n                            \n                            \n                                    DroppableDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ]\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dragCancelled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                    \n                                \n                                \n                                    \n                                        dragCancelled:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancelDrag$\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        The css class to apply when the element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:139\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                    \n                        The axis along which the element is draggable\n\n                            \n                            Type :    DragAxis\n\n                            \n                        \n                            Default value : { x: true, y: true }\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:103\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                    \n                        The cursor to use when dragging the element\n\n                            \n                            Type :    string\n\n                            \n                        \n                            Default value : ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:133\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                    \n                        Snap all drags to an x / y grid\n\n                            \n                            Type :    SnapGrid\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:109\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                    \n                        an object of data you can pass to the drop event\n\n                            \n                            Type :    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:97\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : true\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:115\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                            \n                            Type :    HTMLElement\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:145\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                            \n                            Type :    TemplateRef\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:151\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:121\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                            \n                            Type :    ValidateDrag\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:127\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                    \n                        Called after the element is dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:183\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                    \n                        Called when the element is being dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:177\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:157\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:165\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                    \n                        Called after the ghost element has been created\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:171\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableScrollContainerDirective.html":{"url":"directives/DraggableScrollContainerDirective.html","title":"directive - DraggableScrollContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableScrollContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts\n        \n\n            \n                Description\n            \n            \n                If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n  \n    Drag me!\n  \n            \n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggableScrollContainer]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                activeLongPressDrag\n                            \n                            \n                                longPressConfig\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        activeLongPressDrag\n                    \n                    \n                        Trigger the DragStart after a long touch in scrollable container when true\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        longPressConfig\n                    \n                    \n                        Configuration of a long touch\nDuration in ms of a long touch before activating DragStart\nDelta of the\n\n                        \n                            Default value : { duration: 300, delta: 30 }\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable-scroll-container.directive.ts:34\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnInit,\n  Renderer2\n} from '@angular/core';\n\n/**\n * If the window isn't scrollable, then place this on the scrollable container that draggable elements are inside. e.g.\n * ```html\n  \n    Drag me!\n  \n  ```\n */\n@Directive({\n  selector: '[mwlDraggableScrollContainer]'\n})\nexport class DraggableScrollContainerDirective implements OnInit {\n  /**\n   * Trigger the DragStart after a long touch in scrollable container when true\n   */\n  @Input()\n  activeLongPressDrag: boolean = false;\n\n  /**\n   * Configuration of a long touch\n   * Duration in ms of a long touch before activating DragStart\n   * Delta of the\n   */\n  @Input()\n  longPressConfig = { duration: 300, delta: 30 };\n\n  private cancelledScroll = false;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public elementRef: ElementRef,\n    private renderer: Renderer2,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit() {\n    this.zone.runOutsideAngular(() => {\n      this.renderer.listen(\n        this.elementRef.nativeElement,\n        'touchmove',\n        (event: TouchEvent) => {\n          if (this.cancelledScroll && event.cancelable) {\n            event.preventDefault();\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  disableScroll(): void {\n    this.cancelledScroll = true;\n    this.renderer.setStyle(this.elementRef.nativeElement, 'overflow', 'hidden');\n  }\n\n  /**\n   * @hidden\n   */\n  enableScroll(): void {\n    this.cancelledScroll = false;\n    this.renderer.setStyle(this.elementRef.nativeElement, 'overflow', 'auto');\n  }\n\n  /**\n   * @hidden\n   */\n  hasScrollbar(): boolean {\n    const containerHasHorizontalScroll =\n      this.elementRef.nativeElement.scrollWidth -\n        this.elementRef.nativeElement.clientWidth >\n      0;\n    const containerHasVerticalScroll =\n      this.elementRef.nativeElement.scrollHeight -\n        this.elementRef.nativeElement.clientHeight >\n      0;\n    return containerHasHorizontalScroll || containerHasVerticalScroll;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                    DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                    \n                        Added to the element when an element is dragged over it\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:43\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                    \n                        Called when a draggable element starts overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                    \n                        Called when a draggable element stops overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                    \n                        Called when a draggable element is moved over the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                    \n                        Called when a draggable element is dropped on this element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:73\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentDragSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GhostElementCreatedEvent.html":{"url":"interfaces/GhostElementCreatedEvent.html","title":"interface - GhostElementCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GhostElementCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        element\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeLongPress.html":{"url":"interfaces/TimeLongPress.html","title":"interface - TimeLongPress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimeLongPress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        timerBegin\n                                \n                                \n                                        timerEnd\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        timerBegin\n                                    \n                                \n                                \n                                    \n                                        timerBegin:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerEnd\n                                    \n                                \n                                \n                                    \n                                        timerEnd:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateDragParams.html":{"url":"interfaces/ValidateDragParams.html","title":"interface - ValidateDragParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidateDragParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        transform\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                    \n                                \n                                \n                                    \n                                        transform:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport autoScroll from 'dom-autoscroller';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport interface ValidateDragParams extends Coordinates {\n  transform: {\n    x: number;\n    y: number;\n  };\n}\n\nexport type ValidateDrag = (params: ValidateDragParams) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  private scroller: { destroy: () => void };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y, transformX, transformY }) =>\n              !this.validateDrag ||\n              this.validateDrag({\n                x,\n                y,\n                transform: { x: transformX, y: transformY }\n              })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.scroller = autoScroll(\n            [\n              this.scrollContainer\n                ? this.scrollContainer.elementRef.nativeElement\n                : this.document.defaultView\n            ],\n            {\n              margin: 20,\n              autoScroll() {\n                return true;\n              }\n            }\n          );\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.scroller.destroy();\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n4.3.2 (2019-06-26)\nBug Fixes\n\nrestore compatibility with stackblitz (ee94dc5)\n\n\n4.3.1 (2019-06-05)\nBug Fixes\n\nrestore compatibility with angular universal (7fbaa2a)\n\n\n4.3.0 (2019-04-21)\nBug Fixes\n\nexpose ValidateDrag type (32f4ce3)\n\nFeatures\n\nexpose css transform on validate drag function (3c5c5b9)\nsupport auto scrolling when dragging (78bdeb5)\n\n\n4.2.0 (2019-03-17)\nFeatures\n\nexpose ghost element and starting mouse position on ghost element created event (d233788), closes #81 #85\n\n\n4.1.0 (2019-02-17)\nBug Fixes\n\nallow angular 8 peer dependency (f936805)\n\nFeatures\n\ndraggable-scroll-container: Added input activeLongPressDrag (#79) (f98f586), closes #78\n\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            dom-autoscroller : ^2.3.4\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isCoordinateWithinRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \nisCoordinateWithinRectangle(clientX: undefined, clientY: undefined, rect: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rect\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\n    \n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp]\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}Note: if draggable elements are inside a scrollable element then you will need to add mwlDraggableScrollContainer as an attribute to the scrollable container.\nYou may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidateDrag\n                    \n                \n                \n                    \n                        ValidateDrag:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
